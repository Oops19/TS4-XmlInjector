<?xml version="1.0" encoding="iso-8859-1"?>
<TuningRoot>
  <Instance instance_type="snippet" class="XmlInjector" module="xml_injector.snippet" instance_needs_reference="True" instance_subclasses_only="False" path="Snippets\Descriptions" use_guid_for_reference="False">
    <TunableList name="add_buffs_to_traits" description="A list of traits and buffs to add" class="TunableList">
      <TunableTuple>
        <Tunable type="trait" name="trait" class="TunableReference" description="Reference to a Trait tuning instance" allow_none="False" pack_safe="True" restrict="Trait"/>
        <TunableList name="buffs" description="A list of buffs to add" class="TunableList" unique_entries="true">
          <TunableTuple class="TunableBuffReference">
            <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
              <Tunable name="disabled" class="TunableExistance"/>
              <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
            </TunableVariant>
            <Tunable type="buff" name="buff_type" class="TunableReference" description="Buff that will get added to sim." allow_none="False" pack_safe="True"/>
          </TunableTuple>
        </TunableList>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_interactions_to_objects" description="A list of object and interaction lists" class="TunableList">
      <TunableTuple>
        <TunableVariant type="none" name="object_selection" class="ObjectSelection" default="None">
          <TunableTuple name="object_list" class="ObjectSelection._ObjectList">
            <TunableList name="object_list" class="TunableList" description="A list of objects to add the interactions to">
              <Tunable type="int" description="Reference to an object tuning instance" default="None"/>
            </TunableList>
          </TunableTuple>
          <TunableTuple name="objects_with_affordance" class="ObjectSelection._ObjectsWithAffordance">
            <Tunable name="affordance" type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
          </TunableTuple>
          <TunableTuple name="objects_matching_name" class="ObjectSelection._ObjectsMatchingName">
            <Tunable name="partial_name" type="str" description="A string specifying the partial name of objects to select" default="None"/>
          </TunableTuple>
          <TunableTuple name="objects_with_tag" class="ObjectSelection._ObjectsWithTag">
            <TunableEnum type="Tag" name="tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" description="A tag to search for object selection."/>
          </TunableTuple>
        </TunableVariant>
        <TunableList name="_super_affordances" description="A list of interactions to add to the object_sim" class="TunableList">
          <Tunable type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
        </TunableList>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_interactions_to_phones" description="A list of interactions to add to sim phones" class="TunableList">
      <Tunable type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
    </TunableList>
    <TunableList name="add_interactions_to_relationship_panel" description="A list of interactions to add to the relationship panel" class="TunableList">
      <Tunable type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
    </TunableList>
    <TunableList name="add_interactions_to_sims" description="A list of interactions to add to the object_sim" class="TunableList">
      <Tunable type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
    </TunableList>
    <TunableList name="add_mixer_interactions" description="A list of mixer_snippet and interaction lists" class="TunableList">
      <TunableTuple>
        <TunableList name="mixer_snippets" description="A list of AffordanceLists to add the interactions to" class="TunableList">
          <Tunable type="snippet" class="TunableReference" description="Reference to an AffordanceList snippet tuning instance" allow_none="False" pack_safe="True" restrict="AffordanceList"/>
        </TunableList>
        <TunableList name="affordances" description="A list of interactions to add to the mixers" class="TunableList">
          <Tunable type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
        </TunableList>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_name_component_to_objects" description="A list of object and states lists" class="TunableList">
      <TunableTuple>
        <TunableVariant type="none" name="object_selection" class="ObjectSelection" default="None">
          <TunableTuple name="object_list" class="ObjectSelection._ObjectList">
            <TunableList name="object_list" class="TunableList" description="A list of objects to add the interactions to">
              <Tunable type="int" description="Reference to an object tuning instance" default="None"/>
            </TunableList>
          </TunableTuple>
          <TunableTuple name="objects_with_affordance" class="ObjectSelection._ObjectsWithAffordance">
            <Tunable name="affordance" type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
          </TunableTuple>
          <TunableTuple name="objects_matching_name" class="ObjectSelection._ObjectsMatchingName">
            <Tunable name="partial_name" type="str" description="A string specifying the partial name of objects to select" default="None"/>
          </TunableTuple>
          <TunableTuple name="objects_with_tag" class="ObjectSelection._ObjectsWithTag">
            <TunableEnum type="Tag" name="tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" description="A tag to search for object selection."/>
          </TunableTuple>
        </TunableVariant>
        <TunableTuple name="name_component" class="TunableNameComponent" description="Manages the saved name and description on objects for which&#xA;users can enter custom names and/or descriptions.">
          <TunableVariant type="None" name="affordance" class="OptionalTunable" default="use_default" description="The affordance provided by this Name component. Use it if you want&#xA;to provide a custom affordance instead of the default one, which&#xA;will not be used if this is set.">
            <Tunable type="interaction" name="enabled" class="TunableReference" description="The affordance provided by this Name component. Use it if you want&#xA;to provide a custom affordance instead of the default one, which&#xA;will not be used if this is set." allow_none="False"/>
            <Tunable name="use_default" class="TunableExistance"/>
          </TunableVariant>
          <Tunable type="bool" name="allow_description" class="Tunable" default="False" description="If set, the user is allowed to give a custom description to this&#xA;object."/>
          <Tunable type="bool" name="allow_name" class="Tunable" default="True" description="If set, the user is allowed to give a custom name to this&#xA;object."/>
          <TunableList name="templates" class="TunableList" description="The list of the template content for this component.">
            <TunableTuple class="TunableTuple">
              <Tunable type="int" name="template_description" class="TunableLocalizedString" default="0x0" description="The template description for the component." allow_none="True"/>
              <Tunable type="int" name="template_name" class="TunableLocalizedString" default="0x0" description="The template name for the component." allow_none="True"/>
            </TunableTuple>
          </TunableList>
        </TunableTuple>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_object_relationships_to_objects" description="A list of object and object relationships" class="TunableList">
      <TunableTuple>
        <TunableVariant type="none" name="object_selection" class="ObjectSelection" default="None">
          <TunableTuple name="object_list" class="ObjectSelection._ObjectList">
            <TunableList name="object_list" class="TunableList" description="A list of objects to add the interactions to">
              <Tunable type="int" description="Reference to an object tuning instance" default="None"/>
            </TunableList>
          </TunableTuple>
          <TunableTuple name="objects_with_affordance" class="ObjectSelection._ObjectsWithAffordance">
            <Tunable name="affordance" type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
          </TunableTuple>
          <TunableTuple name="objects_matching_name" class="ObjectSelection._ObjectsMatchingName">
            <Tunable name="partial_name" type="str" description="A string specifying the partial name of objects to select" default="None"/>
          </TunableTuple>
          <TunableTuple name="objects_with_tag" class="ObjectSelection._ObjectsWithTag">
            <TunableEnum type="Tag" name="tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" description="A tag to search for object selection."/>
          </TunableTuple>
        </TunableVariant>
        <TunableTuple name="object_relationships_component" class="TunableObjectRelationshipComponent" description="A component to manage a very simplified version of relationships between&#xA;objects and Sims. &#xA;&#xA;Relationships are stored as a dictionary mapping a sim_id to a statistic,&#xA;and are modified and tested through special LootOps and Tests. Because this&#xA;data lives on an object, all relationships with this object will disappear&#xA;when this object is sold or otherwise deleted.">
          <TunableVariant type="None" name="number_of_allowed_relationships" class="OptionalTunable" default="disabled" description="Number of Sims who can have a relationship with this object at one&#xA;time.  If not specified, an infinite number of Sims can have a &#xA;relationship with the object.">
            <Tunable name="disabled" class="TunableExistance"/>
            <Tunable type="int" name="enabled" class="TunableRange" default="1" min="1" max="None" tuning_state="NeedsTuning"/>
          </TunableVariant>
          <TunableVariant type="None" name="relationship_based_state_change_tuning" class="OptionalTunable" default="disabled" description="A list of value ranges and associated states.  If the active Sim&#xA;has a relationship with this object  that falls within one of the&#xA;value ranges specified here, the object will change state to match&#xA;the specified state.&#xA;&#xA;These state changes exist on a per Sim basis, so this tuning will&#xA;effectively make the same object appear different depending on&#xA;which Sim is currently active.">
            <Tunable name="disabled" class="TunableExistance"/>
            <TunableTuple name="enabled" class="TunableTuple" description="A list of value ranges and associated states.  If the active Sim&#xA;has a relationship with this object  that falls within one of the&#xA;value ranges specified here, the object will change state to match&#xA;the specified state.&#xA;&#xA;These state changes exist on a per Sim basis, so this tuning will&#xA;effectively make the same object appear different depending on&#xA;which Sim is currently active.">
              <Tunable type="object_state" name="default_state" class="TunableReference" description="The state this object will change to if there is no other tuned&#xA;relationship based state change for the currently active Sim." allow_none="False" restrict="ObjectStateValue"/>
              <TunableList name="state_changes" class="TunableList">
                <TunableTuple class="TunableTuple">
                  <Tunable type="object_state" name="state" class="TunableReference" description="The state this object will change to if it's relationship&#xA;with the active Sim falls within the specified range." allow_none="False" restrict="ObjectStateValue"/>
                  <TunableTuple name="value_threshold" class="TunableThreshold" description="The range that the active Sim's relationship with this&#xA;object must fall within in order for this state change to&#xA;take place.">
                    <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                    <Tunable type="float" name="value" class="Tunable" default="0" description="The value of a threshold." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableTuple>
              </TunableList>
            </TunableTuple>
          </TunableVariant>
          <Tunable type="statistic" name="relationship_stat" class="TunableReference" description="The statistic which will be created for each of this object's&#xA;relationships." allow_none="False" restrict="Statistic"/>
          <TunableVariant type="None" name="relationship_track_visual" class="OptionalTunable" default="disabled" description="If enabled, the relationship track to send the client and where&#xA;it should be displayed. If this is None then this relationship will &#xA;not be sent down to the client.">
            <Tunable name="disabled" class="TunableExistance"/>
            <TunableTuple name="enabled" class="TunableTuple">
              <Tunable type="statistic" name="relationship_track" class="TunableReference" description="The relationship that this track will visually try and imitate in&#xA;regards to static track tack data." allow_none="False" restrict="RelationshipTrack"/>
              <Tunable type="bool" name="visible_in_relationship_panel" class="Tunable" default="True" description="By default the relationship is visible in the relationship &#xA;panel and the object's tooltip. If this is set to false, &#xA;hide the relationship from the relationship panel. "/>
            </TunableTuple>
          </TunableVariant>
        </TunableTuple>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_states_to_objects" description="A list of object and states lists" class="TunableList">
      <TunableTuple>
        <TunableVariant type="none" name="object_selection" class="ObjectSelection" default="None">
          <TunableTuple name="object_list" class="ObjectSelection._ObjectList">
            <TunableList name="object_list" class="TunableList" description="A list of objects to add the interactions to">
              <Tunable type="int" description="Reference to an object tuning instance" default="None"/>
            </TunableList>
          </TunableTuple>
          <TunableTuple name="objects_with_affordance" class="ObjectSelection._ObjectsWithAffordance">
            <Tunable name="affordance" type="interaction" class="TunableReference" description="Reference to an interaction tuning instance" allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
          </TunableTuple>
          <TunableTuple name="objects_matching_name" class="ObjectSelection._ObjectsMatchingName">
            <Tunable name="partial_name" type="str" description="A string specifying the partial name of objects to select" default="None"/>
          </TunableTuple>
          <TunableTuple name="objects_with_tag" class="ObjectSelection._ObjectsWithTag">
            <TunableEnum type="Tag" name="tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" description="A tag to search for object selection."/>
          </TunableTuple>
        </TunableVariant>
        <TunableTuple name="state_component" class="TunableStateComponent" description="Allow persistent state to be saved for this object.">
          <TunableList name="state_triggers" class="TunableList">
            <TunableTuple class="TunableStateTrigger" description="A structure that listens for state changes and applies state/statistic&#xA;operations on the object when a certain combination of states are set.">
              <TunableList name="at_states" class="TunableList">
                <Tunable type="object_state" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
              </TunableList>
              <TunableList name="prohibited_states" class="TunableList" description="List of prohibited states. If the object has one of this state,&#xA;it will not trigger the target state.">
                <Tunable type="object_state" class="TunableReference" description="Prohibited state." allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
              </TunableList>
              <TunableVariant type="None" name="set_on_children" class="OptionalTunable" default="leave_children_alone" description="If enabled, will apply states and/or stats to children of this&#xA;object.">
                <Tunable name="leave_children_alone" class="TunableExistance"/>
                <TunableTuple name="set_on_children" class="TunableTuple" description="Lists of states and stats to apply to children.">
                  <TunableList name="set_states" class="TunableSet" description="List of States to set on children." unique_entries="true">
                    <Tunable type="object_state" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                  </TunableList>
                  <TunableList name="statistic_ops" class="TunableList" description="List of statistic ops to apply to children.">
                    <TunableVariant type="None" class="TunableStatisticChange" default="none" description="A statistic change operation to apply to all chilren of&#xA;this object.">
                      <Tunable name="none" class="TunableExistance"/>
                      <TunableTuple name="statistic_add" class="TunableStatisticAddOp" description="Attempt to add the specified statistic.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_change" class="TunableStatisticChangeOp" description="Modify the value of a statistic.">
                        <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                        <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
                        <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                          <Tunable name="no_max" class="TunableExistance"/>
                          <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                            <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                          </TunableTuple>
                          <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                            <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                            <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                              <TunableTuple class="TunableVector2" description="Point on a Curve">
                                <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                            </TunableList>
                            <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                          <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                            <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                              <Tunable name="raw_value" class="TunableExistance"/>
                              <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                                <TunableTuple class="TunableVector2" description="Point on a Curve">
                                  <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                  <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                            </TunableVariant>
                            <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                            <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                          </TunableTuple>
                        </TunableList>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_change_by_category" class="TunableChangeStatisticByCategory" description="Change value of  all statistics of a specific category.">
                        <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                          <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                          <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                            <TunableTuple class="TunableTuple">
                              <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                              <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                        <TunableVariant type="None" name="change" class="TunableVariant" default="none">
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="percent_change" class="TunablePercentChangeAmountFactory">
                            <Tunable type="float" name="percent_change_amount" class="TunablePercent" default="-50" min="-100" max="100" description="Percent of current value of statistic should amount&#xA;be changed.  If you want to decrease the amount by&#xA;50% enter -50% into the tuning field."/>
                          </TunableTuple>
                          <TunableTuple name="stat_change" class="TunableChangeAmountFactory">
                            <Tunable type="float" name="change_amout" class="Tunable" default="0" description="Amount of change to be applied to statistics that match category." tuning_state="NeedsTuning"/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                        <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_remove" class="TunableStatisticRemoveOp" description="Attempt to remove the specified statistic.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_remove_by_category" class="TunableRemoveStatisticByCategory" description="Remove all statistics of a specific category.">
                        <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                          <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                          <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                            <TunableTuple class="TunableTuple">
                              <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                              <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                        <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                        <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_set" class="TunableStatisticSetOp" description="Set a statistic to the provided value.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                        <Tunable type="int" name="value" class="Tunable" default="None" description="The new statistic value." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <TunableTuple name="statistic_set_in_range" class="TunableStatisticSetRangeOp" description="Set a statistic to a random value in the tuned range.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                        <TunableTuple name="value_range" class="TunableInterval" description="The upper and lower bound of the range.">
                          <Tunable type="int" name="lower_bound" class="TunableRange" default="1" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                          <Tunable type="int" name="upper_bound" class="TunableRange" default="2" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableTuple>
                      <TunableTuple name="statistic_set_max" class="TunableStatisticSetMaxOp" description="Set a statistic to its maximum value.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_set_min" class="TunableStatisticSetMinOp" description="Set a statistic to its minimum value.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="statistic_set_rank" class="TunableStatisticSetRankOp" description="Set a Ranked Statistic to a specific rank level.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" restrict="RankedStatistic"/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                        <Tunable type="int" name="value" class="Tunable" default="None" description="The new rank value." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <TunableTuple name="statistic_transfer" class="TunableStatisticTransferOp" description="Transfer a statistic value from one target to another.">
                        <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                        <TunableEnum type="ParticipantType" name="statistic_donor" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The owner of the statistic we are transferring the value from."/>
                        <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                          <Tunable name="no_text" class="TunableExistance"/>
                          <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                          <Tunable name="use_default" class="TunableExistance"/>
                        </TunableVariant>
                        <TunableEnum type="TransferType" name="transfer_type" class="TunableEnumEntry" default="ADDITIVE" static_entries="statistics-statistic_ops.TransferType" description="Type of statistic transfer to use."/>
                        <TunableVariant type="None" name="transfer_type_average_advanced" class="OptionalTunable" default="disabled" description="If enabled, the average calculation will be the sum of multiplying&#xA;the stat value and stat quantity then dividing with total quantity.&#xA;T  = Transferred Stat value&#xA;S  = Stat value&#xA;QT = Quantity Transferred Stat value&#xA;QS = Quantity Stat value&#xA;Result = ((T * QT) + (S * QS)) / (QT + QS)&#xA;&#xA;If disabled, the result will calculate Mean of 2 stat values.&#xA;Result = (T + S) / 2">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple" description="Statistic quantities for both subject and donor.">
                            <Tunable type="statistic" name="quantity_stat" class="TunableReference" description="Statistic quantity subject which will be applied to the&#xA;average calculation." allow_none="False"/>
                            <Tunable type="statistic" name="quantity_transferred_stat" class="TunableReference" description="Statistic quantity donor which will be applied to the&#xA;average calculation." allow_none="False"/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="statistic" name="transferred_stat" class="TunableReference" description="The statistic whose value to transfer." allow_none="False"/>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableList>
                </TunableTuple>
              </TunableVariant>
              <TunableVariant type="None" name="set_random_state" class="OptionalTunable" default="No_random_states" description="If enabled it will trigger a random state value out of the possible&#xA;weighted list.&#xA;This can be combined with set_state so either or both of them &#xA;can apply on a state triggered. &#xA;If a chance of nothing happening is desired you can tune an empty &#xA;field on the trigger_random_state list. ">
                <Tunable name="No_random_states" class="TunableExistance"/>
                <TunableList name="Trigger_random_state" class="TunableList" description="List of weighted states to be triggered.">
                  <TunableTuple class="TunableTuple" description="Pairs of states and weights to be randomly selected.">
                    <Tunable type="object_state" name="state_value" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                    <TunableList name="tests" class="TunableStateTriggerTestSet" description="A list of tests.  All tests must succeed to pass the TestSet.">
                      <TunableVariant type="None" class="TunableStateTriggerTestVariant" default="none" description="A single tunable test.">
                        <TunableTuple name="festival_running" class="TunableFestivalRunningTest" description="A test to check whether a festival is running.">
                          <TunableVariant type="None" name="check_if_on_festival_street" class="OptionalTunable" default="disabled" description="If enabled, test against if the player is on the festival's street.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="bool" name="enabled" class="Tunable" default="True" description="If checked, this test will pass only if the player is on the&#xA;festival's street. If unchecked, the test will pass only if the&#xA;player is not on the festival street."/>
                          </TunableVariant>
                          <TunableVariant type="None" name="drama_node" class="OptionalTunable" default="enabled" description="If enabled then we will check a specific type of festival drama&#xA;node otherwise we will look at all of the festival drama nodes.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="drama_node" name="enabled" class="TunableReference" description="Reference to the festival drama node that we want to be running." allow_none="False" restrict="FestivalDramaNode"/>
                          </TunableVariant>
                          <Tunable type="bool" name="negate" class="Tunable" default="False" description="If enabled this test will pass if no festivals of the tuned&#xA;requirements are running."/>
                          <TunableTuple name="valid_time_blocks" class="TunableTuple" description="Festival drama nodes have a tunable pre-festival duration that&#xA;delay festival start to some point after the drama node has&#xA;started. For example, if the festival drama node has a pre-festival&#xA;duration of 2 hours and the drama node runs at 8am, the festival&#xA;will not start until 10am.&#xA;&#xA;By default, this test passes if the festival drama node is running,&#xA;regardless if the festival is in its pre-festival duration. This&#xA;tuning changes that behavior.">
                            <Tunable type="bool" name="pre_festival" class="Tunable" default="True" description="If the festival is currently in its pre-festival duration,&#xA;test can pass if this is checked and fails if unchecked."/>
                            <Tunable type="bool" name="running" class="Tunable" default="True" description="If the festival is running (it is past its pre-festival&#xA;duration), test can pass if this is checked and fails if&#xA;unchecked."/>
                          </TunableTuple>
                        </TunableTuple>
                        <TunableTuple name="next_festival" class="TunableNextFestivalTest" description="A test to check whether a festival is the next one.">
                          <TunableVariant type="None" name="drama_node" class="OptionalTunable" default="enabled" description="If enabled then we will check a specific type of festival drama&#xA;node otherwise we will look at all of the festival drama nodes.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="drama_node" name="enabled" class="TunableReference" description="Reference to the festival drama node that we want to be the&#xA;next one." allow_none="False" restrict="FestivalDramaNode"/>
                          </TunableVariant>
                          <Tunable type="bool" name="negate" class="Tunable" default="False" description="If enabled this test will pass if the next festival is not one of&#xA;the tuned nodes."/>
                        </TunableTuple>
                        <Tunable name="none" class="TunableExistance"/>
                        <TunableTuple name="object_criteria" class="TunableObjectCriteriaTest" description="A test to look at all the objects and compare them to the tuned criteria.">
                          <Tunable type="bool" name="completed" class="Tunable" default="False" description="If checked, any craftable object (such as a painting) must be finished&#xA;for it to be considered."/>
                          <TunableVariant type="None" name="desired_state_threshold" class="OptionalTunable" default="disabled" description="A state threshold that the object must satisfy for this test to pass">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableThreshold" description="A state threshold that the object must satisfy for this test to pass">
                              <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                              <Tunable type="object_state" name="value" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="identity_test" class="TunableVariant" default="no_identity_test" description="Which test to run on the object in order to determine &#xA;if it matches or not.">
                            <TunableTuple name="definition_id" class="TunableObjectTypeFactory">
                              <Tunable type="object" name="actual_object" class="TunableReference" description="The object we want to test ownership of" allow_none="False" pack_safe="True"/>
                            </TunableTuple>
                            <Tunable name="no_identity_test" class="TunableExistance"/>
                            <TunableTuple name="tags" class="TunableObjectTagFactory">
                              <TunableList name="tag_set" class="TunableSet" unique_entries="true">
                                <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="What tag to test for." pack_safe="True"/>
                              </TunableList>
                              <TunableEnum type="TagTestType" name="test_type" class="TunableEnumEntry" default="CONTAINS_ANY_TAG_IN_SET" static_entries="objects-object_tests.TagTestType" description="How to test the tags in the tag set against the objects on the lot."/>
                            </TunableTuple>
                            <TunableTuple name="trending" class="TunableObjectTrendingFactory"/>
                          </TunableVariant>
                          <Tunable type="bool" name="on_active_lot" class="Tunable" default="False" description="If checked, test whether or not the object is on the active&#xA;lot. If unchecked the object can be either on the active lot or&#xA;in the open streets area, we don't really care."/>
                          <Tunable type="bool" name="owned" class="Tunable" default="True" description="If checked will test if the object is owned by the active &#xA;household. If unchecked it doesn't matter who owns the object or&#xA;if it is owned at all."/>
                          <TunableVariant type="None" name="positional_relationship_test" class="TunableVariant" default="no_positional_relationship_test" description="The type of positional relationship test to run on the object with respect to &#xA;another object.">
                            <Tunable name="no_positional_relationship_test" class="TunableExistance"/>
                            <TunableTuple name="radius_test" class="Tunable_RadiusFactory" description="The object must be within a certain radius of a&#xA;tuned participant in order for the test to pass.">
                              <Tunable type="float" name="radius" class="TunableDistanceSquared" default="5.0" description="The radius, with the radius actor's position, that defines&#xA;the area within which the object is valid." tuning_state="NeedsTuning"/>
                              <TunableEnum type="ParticipantType" name="radius_actor" class="TunableEnumEntry" default="ParticipantTypeSingle.Object" static_entries="interactions.ParticipantType" description="The actor whose position, with the radius, defines the&#xA;area within which the object is valid."/>
                            </TunableTuple>
                            <TunableTuple name="tagged_object_on_same_level_test" class="Tunable_TaggedObjectOnSameLevelFactory" description="The object must has at least one object with a tuned tag on the&#xA;same level as a tuned participant in order for the test to pass.">
                              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="ParticipantTypeSingle.Object" static_entries="interactions.ParticipantType" description="The participant to test against. "/>
                              <TunableEnum type="Tag" name="tag" class="TunableTag" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" dynamic_entries_prefix="" invalid_entries="INVALID" pack_safe="True"/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="subject_specific_tests" class="TunableVariant" default="all_objects">
                            <TunableTuple name="all_objects" class="TunableTuple">
                              <TunableTuple name="quantity" class="TunableThreshold" description="The number of objects that meet the tuned critera needed to pass this&#xA;test. quantity is run after a list of matching objects is created&#xA;using the tuned criteria.">
                                <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                                <Tunable type="float" name="value" class="Tunable" default="1" description="The value of a threshold." tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableVariant type="None" name="total_value" class="OptionalTunable" default="disabled" description="If set, the total monetary value of all the objects that meet the tuned &#xA;criteria needed in order to pass this test. total_value is run after &#xA;a list of matching objects is created using the tuned criteria.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableThreshold" description="If set, the total monetary value of all the objects that meet the tuned &#xA;criteria needed in order to pass this test. total_value is run after &#xA;a list of matching objects is created using the tuned criteria.">
                                  <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                                  <Tunable type="float" name="value" class="Tunable" default="0" description="The value of a threshold." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="single_object" class="TunableTuple">
                              <TunableEnum type="ParticipantType" name="target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="If set this test will loop through the specified participants and&#xA;run the object identity and criteria tests on them instead of all&#xA;of the objects on the lot."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableList name="test_events" class="TunableList" description="The list of events that trigger this instance of the tuned test on.&#xA;&#xA;If you pick ObjectStateChange, the test will be registered with&#xA;EventManager for every ObjectStateValue managed by ObjectState&#xA;controlling the desired_state_threshold. E.g. if the test cares&#xA;about BrokenState_Broken, we will register tolisten for events for&#xA;state changes of BrokenState_Broken, BrokenState_Unbroken,&#xA;BrokenState_Repairing, etc.">
                            <TunableEnum type="ObjectCriteriaTestEvents" class="TunableEnumEntry" default="AllObjectEvents" static_entries="objects-object_tests.ObjectCriteriaTestEvents"/>
                          </TunableList>
                          <Tunable type="bool" name="use_current_values" class="Tunable" default="False" description="If checked, use the current/appraised value of the object, instead&#xA;of the catalog value"/>
                          <Tunable type="bool" name="use_depreciated_values" class="Tunable" default="False" description="If checked, the value consideration for each checked object will at its depreciated amount.&#xA;This affects the &quot;All Objects&quot; test type, changing the total value considered to be at the&#xA;non-depreciated amount."/>
                          <TunableVariant type="None" name="value" class="OptionalTunable" default="disabled" description="A threshold test for the monetary value of a single object in order for it&#xA;to be considered.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableThreshold" description="A threshold test for the monetary value of a single object in order for it&#xA;to be considered.">
                              <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                              <Tunable type="float" name="value" class="Tunable" default="0" description="The value of a threshold." tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableList>
                    <Tunable type="int" name="weight" class="Tunable" default="1" description="                        " tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableList>
              </TunableVariant>
              <TunableVariant type="None" name="set_states" class="OptionalTunable" default="No_state_list" description="If enabled it will trigger the states tuned on the list.&#xA;Either this list or set random state needs to be tuned on a state&#xA;trigger.">
                <Tunable name="No_state_list" class="TunableExistance"/>
                <TunableList name="Set_state_list" class="TunableList" min="1" description="List of states to be applied.">
                  <Tunable type="object_state" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                </TunableList>
              </TunableVariant>
              <TunableList name="statistic_operations" class="TunableList" description="A list of statistic operations that will be applied when the&#xA;trigger is thrown. &#xA;&#xA;BEWARE: if a State being applied above is linked to a stat in this&#xA;list, they may collide, and the statistic here will take precedent.&#xA;Also, if a state this trigger is listening to is linked to a stat&#xA;tuned here, then it's possible this will get in a circular loop&#xA;forever. Please be smart about how you use this power.">
                <TunableVariant type="None" class="TunableStatisticChange" default="none" description="A statistic change operation.">
                  <Tunable name="none" class="TunableExistance"/>
                  <TunableTuple name="statistic_add" class="TunableStatisticAddOp" description="Attempt to add the specified statistic.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_change" class="TunableStatisticChangeOp" description="Modify the value of a statistic.">
                    <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                    <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
                    <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                      <Tunable name="no_max" class="TunableExistance"/>
                      <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                        <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                        <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                        <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                          <TunableTuple class="TunableVector2" description="Point on a Curve">
                            <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                            <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                          </TunableTuple>
                        </TunableList>
                        <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                      <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                        <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                          <Tunable name="raw_value" class="TunableExistance"/>
                          <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                            <TunableTuple class="TunableVector2" description="Point on a Curve">
                              <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                              <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableList>
                        </TunableVariant>
                        <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                        <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_change_by_category" class="TunableChangeStatisticByCategory" description="Change value of  all statistics of a specific category.">
                    <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                      <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                      <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                        <TunableTuple class="TunableTuple">
                          <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                    <TunableVariant type="None" name="change" class="TunableVariant" default="none">
                      <Tunable name="none" class="TunableExistance"/>
                      <TunableTuple name="percent_change" class="TunablePercentChangeAmountFactory">
                        <Tunable type="float" name="percent_change_amount" class="TunablePercent" default="-50" min="-100" max="100" description="Percent of current value of statistic should amount&#xA;be changed.  If you want to decrease the amount by&#xA;50% enter -50% into the tuning field."/>
                      </TunableTuple>
                      <TunableTuple name="stat_change" class="TunableChangeAmountFactory">
                        <Tunable type="float" name="change_amout" class="Tunable" default="0" description="Amount of change to be applied to statistics that match category." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_remove" class="TunableStatisticRemoveOp" description="Attempt to remove the specified statistic.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_remove_by_category" class="TunableRemoveStatisticByCategory" description="Remove all statistics of a specific category.">
                    <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                      <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                      <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                        <TunableTuple class="TunableTuple">
                          <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                    <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_set" class="TunableStatisticSetOp" description="Set a statistic to the provided value.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                    <Tunable type="int" name="value" class="Tunable" default="None" description="The new statistic value." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="statistic_set_in_range" class="TunableStatisticSetRangeOp" description="Set a statistic to a random value in the tuned range.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableTuple name="value_range" class="TunableInterval" description="The upper and lower bound of the range.">
                      <Tunable type="int" name="lower_bound" class="TunableRange" default="1" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                      <Tunable type="int" name="upper_bound" class="TunableRange" default="2" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableTuple>
                  <TunableTuple name="statistic_set_max" class="TunableStatisticSetMaxOp" description="Set a statistic to its maximum value.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_set_min" class="TunableStatisticSetMinOp" description="Set a statistic to its minimum value.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="statistic_set_rank" class="TunableStatisticSetRankOp" description="Set a Ranked Statistic to a specific rank level.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" restrict="RankedStatistic"/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                    <Tunable type="int" name="value" class="Tunable" default="None" description="The new rank value." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="statistic_transfer" class="TunableStatisticTransferOp" description="Transfer a statistic value from one target to another.">
                    <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                    <TunableEnum type="ParticipantType" name="statistic_donor" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The owner of the statistic we are transferring the value from."/>
                    <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                      <Tunable name="no_text" class="TunableExistance"/>
                      <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                      <Tunable name="use_default" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableEnum type="TransferType" name="transfer_type" class="TunableEnumEntry" default="ADDITIVE" static_entries="statistics-statistic_ops.TransferType" description="Type of statistic transfer to use."/>
                    <TunableVariant type="None" name="transfer_type_average_advanced" class="OptionalTunable" default="disabled" description="If enabled, the average calculation will be the sum of multiplying&#xA;the stat value and stat quantity then dividing with total quantity.&#xA;T  = Transferred Stat value&#xA;S  = Stat value&#xA;QT = Quantity Transferred Stat value&#xA;QS = Quantity Stat value&#xA;Result = ((T * QT) + (S * QS)) / (QT + QS)&#xA;&#xA;If disabled, the result will calculate Mean of 2 stat values.&#xA;Result = (T + S) / 2">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableTuple" description="Statistic quantities for both subject and donor.">
                        <Tunable type="statistic" name="quantity_stat" class="TunableReference" description="Statistic quantity subject which will be applied to the&#xA;average calculation." allow_none="False"/>
                        <Tunable type="statistic" name="quantity_transferred_stat" class="TunableReference" description="Statistic quantity donor which will be applied to the&#xA;average calculation." allow_none="False"/>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="statistic" name="transferred_stat" class="TunableReference" description="The statistic whose value to transfer." allow_none="False"/>
                  </TunableTuple>
                </TunableVariant>
              </TunableList>
              <TunableVariant type="None" name="trigger_chance" class="OptionalTunable" default="disabled" description="The chance to trigger the target state when we reach the at_state.">
                <Tunable name="disabled" class="TunableExistance"/>
                <Tunable type="float" name="enabled" class="TunableRange" default="100" min="0" max="100" description="The chance to trigger the target state when we reach the at_state." tuning_state="NeedsTuning"/>
              </TunableVariant>
              <TunableEnum type="StateTriggerOperation" name="trigger_operation" class="TunableEnumEntry" default="AND" static_entries="objects-components-state.StateTriggerOperation" description="The operation to apply on the at_states to decide if we can trigger&#xA;the at_state. &#xA;AND:  trigger the new state only if the object is in all the listed &#xA;      states at the same time. &#xA;OR:   trigger the new state if the object is in any of the listed &#xA;      states. &#xA;NONE: trigger the new state only if the object is in none of the &#xA;      listed states."/>
            </TunableTuple>
          </TunableList>
          <TunableList name="states" class="TunableList" description="Supported states for this object">
            <TunableTuple class="TunableTuple" description="A supported state for this object">
              <TunableList name="client_states" class="TunableMapping" mapping_key="key" mapping_value="value" description="A list of client states. Although ObjectStateValues&#xA;have their own State Change Operations (Audio effect&#xA;state, Broadcaster, etc), those operations will be&#xA;overriden by operations specified here.">
                <TunableTuple class="TunableTuple">
                  <Tunable type="object_state" name="key" class="TunableReference" description="A state value" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                  <TunableTuple name="value" class="TunableStateChangeOperation">
                    <TunableVariant type="None" name="audio_effect_state" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="A way to apply An audio effect (.effectx) to the object when state changes">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_audio_effect" description="An element which starts an audio effect attached to an object.">
                        <Tunable name="no_audio_effect" class="TunableExistance"/>
                        <TunableTuple name="start_audio_effect" class="TunableApplyAudioEffect" description="An element which starts an audio effect attached to an object.">
                          <Tunable type="str" name="effect_name" class="TunableStringHash64" default="" description="Name of the audio modification that will be applied."/>
                          <Tunable type="str" name="tag_name" class="TunableStringHash64" default="x" description="The tag name is the key that will be used for the effects. Any&#xA;effect of the same key will remove a previous effect."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="audio_state" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="An audio state to apply">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_audio" description="An audio state to apply">
                        <Tunable name="no_audio" class="TunableExistance"/>
                        <TunableTuple name="start_audio" class="TunablePlayAudio" description="An audio state to apply">
                          <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                          <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                          <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                          </TunableVariant>
                          <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="autonomy_modifiers" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="A tunable to add custom statistic behavior when a state gets set. &#xA;The autonomy modifier name will be maintained to match the existing tuning&#xA;defined on autonomy which will allow to tune for statistic changes whenever&#xA;a new state gets gets hit or added to an script object">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_statistic_to_apply" description="A tunable to add custom statistic behavior when a state gets set. &#xA;The autonomy modifier name will be maintained to match the existing tuning&#xA;defined on autonomy which will allow to tune for statistic changes whenever&#xA;a new state gets gets hit or added to an script object">
                        <TunableTuple name="apply_statistic_modifiers" class="TunableStatisticModifierList" description="A tunable to add custom statistic behavior when a state gets set. &#xA;The autonomy modifier name will be maintained to match the existing tuning&#xA;defined on autonomy which will allow to tune for statistic changes whenever&#xA;a new state gets gets hit or added to an script object">
                          <TunableList name="autonomy_modifiers" class="TunableList" description="List of possible Modifiers that may happen when a statistic gets &#xA;hit, this will modify the objects statistics behavior.">
                            <TunableTuple class="TunableAutonomyModifier" description="An encapsulation of a modification to Sim behavior.  These objects&#xA;are passed to the autonomy system to affect things like scoring,&#xA;which SI's are available, etc.">
                              <TunableList name="commodities_to_add" class="TunableList" description="Commodites that are added while this autonomy modifier is&#xA;active.  These commodities are removed when the autonomy&#xA;modifier is removed.">
                                <Tunable type="statistic" class="TunableReference" allow_none="False" pack_safe="True" restrict="Commodity"/>
                              </TunableList>
                              <TunableList name="decay_modifier_by_category" class="StatisticCategoryModifierMapping" mapping_key="key" mapping_value="value" description="Statistic Category to float mapping for decay modifiers for&#xA;statistics. All decay modifiers are multiplied together along with&#xA;decay rate.">
                                <TunableTuple class="TunableTuple">
                                  <TunableEnum type="StatisticCategory" name="key" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of statistics to add the modifier to."/>
                                  <Tunable type="float" name="value" class="Tunable" default="1.0" description="The value to multiply by the decay of the statistic by." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="decay_modifiers" class="TunableMapping" mapping_key="key" mapping_value="value" description="Statistic to float mapping for decay modifiers for&#xA;statistics.  All decay modifiers are multiplied together along&#xA;with the decay rate.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="statistic" name="key" class="TunableReference" description="The stat the modifier will apply to." allow_none="False" pack_safe="True" restrict="Commodity,RankedStatistic"/>
                                  <Tunable type="float" name="value" class="Tunable" default="0" description="Multiply statistic decay by this value." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="interaction_score_modifier" class="TunableList" description="A list of score modifications to interactions (specified by list, &#xA;affordance or tags) to apply when the actor has this autonomy modifier.">
                                <TunableTuple class="TunableTuple">
                                  <TunableList name="affordance_lists" class="TunableList" description="A list of affordance snippets that will be compared against.">
                                    <Tunable type="snippet" class="TunableReference" description="A reference to a AffordanceList tuning snippet." allow_none="False" restrict="AffordanceList"/>
                                  </TunableList>
                                  <TunableList name="affordances" class="TunableSet" description="A list of affordances that will be compared against." unique_entries="true">
                                    <Tunable type="interaction" class="TunableReference" allow_none="False"/>
                                  </TunableList>
                                  <TunableList name="interaction_category_tags" class="TunableTags" unique_entries="true">
                                    <TunableEnum type="Tag" class="TunableEnumWithFilter" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="This attribute is used to test for affordances that contain any of the tags in this set." dynamic_entries_prefix="interaction" invalid_entries="INVALID" pack_safe="True"/>
                                  </TunableList>
                                  <Tunable type="float" name="modifier" class="Tunable" default="1.0" description="Multiply score by this amount." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="locked_stats" class="TunableList" description="List of the stats we locked from this modifier.  Locked stats&#xA;are set to their maximum values and then no longer allowed to&#xA;decay.">
                                <Tunable type="statistic" class="TunableReference" description="The stat the modifier will apply to." allow_none="False" pack_safe="True" restrict="Commodity,Statistic,Skill,LifeSkillStatistic,RankedStatistic"/>
                              </TunableList>
                              <Tunable type="bool" name="locked_stats_autosatisfy_on_unlock" class="Tunable" default="True" description="If true, locked stats will be set to the value on the auto&#xA;satisfy curve when unlocked.  If false they will remain as-is.&#xA;(i.e. maxed)"/>
                              <TunableList name="object_tags_that_override_off_lot_autonomy" class="TunableList" description="A list of object tags for objects that are always valid to be considered &#xA;for autonomy regardless of their on-lot or off-lot status.  Note that this &#xA;will only override off-lot autonomy availability.  It doesn't affect other &#xA;ways that objects are culled out.  For example, if an object list is passed&#xA;into the autonomy request (like when we're looking at targets of a crafting &#xA;phase), we only consider the objects in that list.  This won't override that &#xA;list.">
                                <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag"/>
                              </TunableList>
                              <TunableVariant type="None" name="off_lot_autonomy_rule" class="OptionalTunable" default="disabled" description="The rules to apply for how autonomy handle on-lot and off-lot&#xA;targets.&#xA;&#xA;DEFAULT:&#xA;    Off-lot sims who are outside the lot's tolerance will not autonomously perform&#xA;    interactions on the lot. Sims will only autonomously perform off-lot&#xA;    interactions within their off-lot radius.&#xA;ON_LOT_ONLY:&#xA;    Sims will only consider targets on the active lot.&#xA;OFF_LOT_ONLY:&#xA;    Sims will only consider targets that are off the active lot.&#xA;UNLIMITED:&#xA;    Sims will consider all objects regardless of on/off lot status.&#xA;FESTIVAL:&#xA;    Sims will consider all objects within the festival area.&#xA;ANCHORED:&#xA;    Sims will only consider objects within a tuned radius of&#xA;    autonomy anchor objects. Anchor objects can be objects that&#xA;    match a tag, sims that match a buff, or set by external&#xA;    systems.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableVariant type="None" name="enabled" class="TunableOffLotAutonomy" default="default_behavior" description="The rules to apply for how autonomy handle on-lot and off-lot&#xA;targets.&#xA;&#xA;DEFAULT:&#xA;    Off-lot sims who are outside the lot's tolerance will not autonomously perform&#xA;    interactions on the lot. Sims will only autonomously perform off-lot&#xA;    interactions within their off-lot radius.&#xA;ON_LOT_ONLY:&#xA;    Sims will only consider targets on the active lot.&#xA;OFF_LOT_ONLY:&#xA;    Sims will only consider targets that are off the active lot.&#xA;UNLIMITED:&#xA;    Sims will consider all objects regardless of on/off lot status.&#xA;FESTIVAL:&#xA;    Sims will consider all objects within the festival area.&#xA;ANCHORED:&#xA;    Sims will only consider objects within a tuned radius of&#xA;    autonomy anchor objects. Anchor objects can be objects that&#xA;    match a tag, sims that match a buff, or set by external&#xA;    systems.">
                                  <TunableTuple name="anchored" class="TunableTuple" description="Sims will only consider targets that are off the active lot. ">
                                    <TunableVariant type="None" name="anchor_buff" class="OptionalTunable" default="disabled" description="If enabled, this will set the autonomy anchor to all&#xA;sims that match the tuned buff.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableBuffReference" description="The buff in question.">
                                        <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                                          <Tunable name="disabled" class="TunableExistance"/>
                                          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
                                        </TunableVariant>
                                        <Tunable type="buff" name="buff_type" class="TunableReference" description="Buff that will get added to sim." allow_none="False"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableVariant type="None" name="anchor_tag" class="OptionalTunable" default="disabled" description="If enabled, this will set the autonomy anchor to all&#xA;objects that match the tuned tag.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableEnum type="Tag" name="enabled" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="The tag used to find an object to be an anchor."/>
                                    </TunableVariant>
                                    <Tunable type="float" name="radius" class="TunableRange" default="50" min="0" max="None" description="The radius around the anchoring point in which the sim will consider objects.&#xA;This point must be set on the autonomy component.&#xA;&#xA;Designers: Please make sure this autonomy modifier is attached to a role or &#xA;other other gameplay system that will correctly set the anchoring point before&#xA;you set this. Or set the anchor tag on this tunable." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="default_behavior" class="TunableTuple" description="Off-lot sims who are outside the lot's tolerance will not autonomously perform&#xA;interactions on the lot. Sims will only autonomously perform off-lot&#xA;interactions within their off-lot radius.">
                                    <Tunable type="float" name="radius" class="TunableRange" default="25" min="0" max="None" description="The radius around the sim in which he will consider off-lot objects.  If it is &#xA;0, the Sim will not consider off-lot objects at all.  This is not recommended &#xA;since it will keep them from running any interactions unless they are already &#xA;within the tolerance for that lot (set with Off Lot Tolerance)." tuning_state="NeedsTuning"/>
                                    <Tunable type="float" name="tolerance" class="Tunable" default="7.5" description="This is how many meters the Sim can be off of the lot while still being &#xA;considered on the lot for the purposes of autonomy.  For example, if &#xA;this is set to 5, the sim can be 5 meters from the edge of the lot and &#xA;still consider all the objects on the lot for autonomy.  If the sim were &#xA;to step 6 meters from the lot, the sim would be considered off the lot &#xA;and would only score off-lot objects that are within the off lot radius." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="off_lot_only" class="TunableTuple" description="Sims will only consider targets that are off the active lot. ">
                                    <Tunable type="float" name="radius" class="TunableRange" default="1000" min="0" max="None" description="The radius around the sim in which he will consider off-lot objects.  If it is &#xA;0, the Sim will not consider off-lot objects at all.  This is not recommended &#xA;since it will keep them from running any interactions unless they are already &#xA;within the tolerance for that lot (set with Off Lot Tolerance)." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="on_lot_only" class="TunableTuple" description="Sims will only consider targets on the active lot."/>
                                  <TunableTuple name="restricted" class="TunableTuple" description="Sims will consider all objects in the restricted open&#xA;street autonomy area.  This is defined by points in world&#xA;builder so please make sure that world builder has setup&#xA;the objects before trying to use this option."/>
                                  <TunableTuple name="unlimited" class="TunableTuple" description="Sims will consider all objects regardless of on/off lot&#xA;status."/>
                                </TunableVariant>
                              </TunableVariant>
                              <TunableVariant type="None" name="only_scored_static_commodities" class="OptionalTunable" default="disabled" description="If enabled, the sim in this role state will consider ONLY these&#xA;static commodities when doing autonomy. EX: for walkbys, only&#xA;consider the ringing the doorbell">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableList name="enabled" class="TunableList" description="List of statistics that will only be considered when doing&#xA;autonomy.">
                                  <Tunable type="scommodity" class="TunableReference" allow_none="False" restrict="StaticCommodity"/>
                                </TunableList>
                              </TunableVariant>
                              <TunableVariant type="None" name="only_scored_stats" class="OptionalTunable" default="disabled" description="If enabled, the sim in this role state will consider ONLY these&#xA;stats when doing autonomy. EX: for the maid, only score&#xA;commodity_maidrole_clean so she doesn't consider doing things&#xA;that she shouldn't care about.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableList name="enabled" class="TunableList" description="List of statistics that will only be considered when doing&#xA;autonomy.">
                                  <Tunable type="statistic" class="TunableReference" allow_none="False" restrict="Commodity,Statistic,Skill,LifeSkillStatistic,RankedStatistic"/>
                                </TunableList>
                              </TunableVariant>
                              <TunableVariant type="None" name="outside_objects_multiplier" class="OptionalTunable" default="disabled" description="When enabled, objects that are outside will have their interaction &#xA;scores modified unless they are tagged with 'counts_as_inside'.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="float" name="enabled" class="Tunable" default="1.0" description="Amount to multiple the autonomy score by." tuning_state="NeedsTuning"/>
                              </TunableVariant>
                              <TunableVariant type="None" name="override_convergence_value" class="OptionalTunable" default="Use_default_convergence" description="If enabled it will set a new convergence value to the tuned&#xA;statistics.  The decay of those statistics will start moving&#xA;toward the new convergence value.&#xA;Convergence value will apply as long as these modifier is active,&#xA;when modifier is removed, convergence value will return to default&#xA;tuned value.&#xA;As a tuning restriction when this modifier gets removed we will &#xA;reset the convergence to its original value.  This means that we &#xA;don't support two states at the same time overwriting convergence&#xA;so we should'nt tune multiple convergence overrides on the same &#xA;object.">
                                <TunableList name="Set_new_convergence_value" class="TunableMapping" mapping_key="key" mapping_value="value" description="Mapping of statistic to new convergence value.">
                                  <TunableTuple class="TunableTuple">
                                    <Tunable type="statistic" name="key" class="TunableReference" allow_none="False" restrict="Commodity"/>
                                    <Tunable type="int" name="value" class="Tunable" default="0" description="Value to which the statistic should convert to." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                </TunableList>
                                <Tunable name="Use_default_convergence" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableVariant type="None" name="provided_affordance_compatibility" class="TunableAffordanceFilterSnippet" default="literal" description="Tune this to provide suppression to certain affordances when an object has&#xA;this autonomy modifier.&#xA;EX: Tune this to exclude all on the buff for the maid to prevent&#xA;    other sims from trying to chat with the maid while the maid is&#xA;    doing her work.&#xA;To tune if this restriction is for autonomy only, etc, see&#xA;super_affordance_suppression_mode.&#xA;Note: This suppression will also apply to the owning sim! So if you&#xA;    prevent people from autonomously interacting with the maid, you&#xA;    also prevent the maid from doing self interactions. To disable&#xA;    this, see suppress_self_affordances.&#xA; (This may be tuned in place here using 'literal' or as a reference to a AffordanceFilter tuning snippet.)">
                                <TdescFragTag name="literal" class="_TunableAffordanceFilter" description="An affordance filter."/>
                                <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a AffordanceFilter tuning snippet." allow_none="False" restrict="AffordanceFilter"/>
                              </TunableVariant>
                              <TunableList name="relationship_score_multiplier_with_buff_on_target" class="TunableMapping" mapping_key="key" mapping_value="value" description="Mapping of buffs to multipliers.  The buff must exist on the TARGET sim.&#xA;If it does, this value will be multiplied into the relationship score.&#xA;&#xA;Example: The make children desire to socialize with children, you can add &#xA;this autonomy modifier to the child's age buff.  You can then map it with &#xA;a key to the child buff to apply a positive multiplier.  An alternative &#xA;would be to create a mapping to every other age and apply a multiplier that &#xA;is smaller than 1.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="buff" name="key" class="TunableReference" description="The buff that the target sim must have to apply this multiplier." allow_none="False"/>
                                  <Tunable type="float" name="value" class="Tunable" default="1" description="The multiplier to apply." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="score_multipliers" class="TunableMapping" mapping_key="key" mapping_value="value" description="Mapping of statistics to multipliers values to the autonomy&#xA;scores.  EX: giving motive_bladder a multiplier value of 2 will&#xA;make it so that that motive_bladder is scored twice as high as&#xA;it normally would be.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="statistic" name="key" class="TunableReference" description="The stat the multiplier will apply to." allow_none="False" restrict="Commodity,Statistic,Skill,LifeSkillStatistic,RankedStatistic"/>
                                  <Tunable type="float" name="value" class="Tunable" default="1" description="The autonomy score multiplier for the stat.  Multiplies&#xA;autonomy scores by the tuned value." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="situation_type_social_score_multiplier" class="TunableMapping" mapping_key="key" mapping_value="value" description="A tunable mapping form situation type to multiplier to apply&#xA;when the target Sim is in a situation of the specified type with&#xA;the actor Sim.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="situation" name="key" class="TunableReference" description="A reference to the type of situation that both Sims need to&#xA;be in together in order for the multiplier to be applied." allow_none="False" pack_safe="True"/>
                                  <Tunable type="float" name="value" class="Tunable" default="1" description="The multiplier to apply." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="skill_tag_modifiers" class="TunableMapping" mapping_key="key" mapping_value="value" description="The skill_tag to float mapping of skill modifiers.  Skills with&#xA;these tags will have their amount gained multiplied by the&#xA;sum of all the tuned values.">
                                <TunableTuple class="TunableTuple">
                                  <TunableEnum type="Tag" name="key" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="What skill tag to apply the modifier on."/>
                                  <Tunable type="float" name="value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="stat_use_multiplier" class="TunableMapping" mapping_key="key" mapping_value="value" description="List of stats and multiplier to affect their increase-decrease.&#xA;All stats on this list whenever they get modified (e. by a &#xA;constant modifier on an interaction, an interaction result...)&#xA;will apply the multiplier to their modified values. &#xA;e. A toilet can get a multiplier to decrease the repair rate&#xA;when its used, for this we would tune the commodity&#xA;brokenness and the multiplier 0.5 (to decrease its effect)&#xA;This tunable multiplier will affect the object statistics&#xA;not the ones for the sims interacting with it.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="statistic" name="key" class="TunableReference" description="The stat the multiplier will apply to." allow_none="False" pack_safe="True" restrict="Commodity,Statistic,Skill,LifeSkillStatistic,RankedStatistic"/>
                                  <TunableTuple name="value" class="TunableTuple" description="Float value to apply to the statistic whenever its&#xA;affected.  Greater than 1.0 if you want to increase.&#xA;Less than 1.0 if you want a decrease (&gt;0.0). &#xA;A value of 0 is considered invalid and is skipped.">
                                    <TunableEnum type="StatisticChangeDirection" name="apply_direction" class="TunableEnumEntry" default="BOTH" static_entries="statistics-base_statistic.StatisticChangeDirection" description="Direction on when the multiplier should work on the &#xA;statistic.  For example a decrease on an object &#xA;brokenness rate, should not increase the time it takes to &#xA;repair it."/>
                                    <Tunable type="float" name="multiplier" class="Tunable" default="1.0" description="Float value to apply to the statistic whenever its&#xA;affected.  Greater than 1.0 if you want to increase.&#xA;Less than 1.0 if you want a decrease (&gt;0.0). &#xA;A value of 0 is considered invalid and is skipped." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                </TunableTuple>
                              </TunableList>
                              <TunableList name="static_commodity_score_multipliers" class="TunableMapping" mapping_key="key" mapping_value="value" description="Mapping of statistics to multipliers values to the autonomy&#xA;scores.  EX: giving motive_bladder a multiplier value of 2 will&#xA;make it so that that motive_bladder is scored twice as high as&#xA;it normally would be.">
                                <TunableTuple class="TunableTuple">
                                  <Tunable type="scommodity" name="key" class="TunableReference" description="The static commodity the multiplier will apply to." allow_none="False" pack_safe="True"/>
                                  <Tunable type="float" name="value" class="Tunable" default="1" description="The autonomy score multiplier for the static commodity.  Multiplies&#xA;autonomy scores by the tuned value." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableVariant type="None" name="subject" class="TunableVariant" default="apply_to_owner" description="Specifies to whom this autonomy modifier will apply.&#xA;- Apply to owner: Will apply the modifiers to the object or sim who &#xA;is triggering the modifier.  &#xA;e.g Buff will apply the modifiers to the sim when he gets the buff.  &#xA;An object will apply the modifiers to itself when it hits a state.&#xA;- Apply to interaction participant:  Will save the modifiers to &#xA;be only triggered when the object/sim who holds the modifier &#xA;is on an interaction.  When the interaction starts the the subject&#xA;tuned will get the modifiers during the duration of the interaction. &#xA;e.g A sim with modifiers to apply on an object will only trigger &#xA;when the sim is interactin with an object.">
                                <TunableVariant type="None" name="apply_on_interaction_to_participant" class="OptionalTunable" default="disabled" description="Subject on which the modifiers should apply.  When this is set&#xA;it will mean that the autonomy modifiers will trigger on a &#xA;subect different than the object where they have been added.&#xA;e.g. a shower ill have hygiene modifiers that have to affect &#xA;the Sim ">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableList name="enabled" class="TunableEnumFlags" default="Object" description="Subject on which the modifiers should apply.  When this is set&#xA;it will mean that the autonomy modifiers will trigger on a &#xA;subect different than the object where they have been added.&#xA;e.g. a shower ill have hygiene modifiers that have to affect &#xA;the Sim " unique_entries="true">
                                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                  </TunableList>
                                </TunableVariant>
                                <Tunable name="apply_to_owner" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="bool" name="super_affordance_suppress_on_add" class="Tunable" default="False" description="If checked, then the suppression rules will be applied when the&#xA;modifier is added, potentially canceling interactions the owner is&#xA;running."/>
                              <TunableEnum type="SuperAffordanceSuppression" name="super_affordance_suppression_mode" class="TunableEnumEntry" default="AUTONOMOUS_ONLY" static_entries="autonomy-autonomy_modifier.SuperAffordanceSuppression" description="Setting this defines how to apply the settings tuned in Super Affordance Compatibility."/>
                              <Tunable type="bool" name="suppress_preroll_autonomy" class="Tunable" default="False" description="If checked, sims with this buff will not run preroll autonomy when&#xA;first loading into a lot. This means that when the loading screen&#xA;disappears, they will be standing exactly where they spawned,&#xA;looking like a chump, instead of being somewhere on the lot doing&#xA;a normal-looking activity. As soon as the loading screen disappears,&#xA;all bets are off and autonomy will run normally again."/>
                              <Tunable type="bool" name="suppress_self_affordances" class="Tunable" default="True" description="If checked, the super affordance compatibility tuned for this &#xA;autonomy modifier will also apply to the sim performing self&#xA;interactions.&#xA;&#xA;If not checked, we will not do provided_affordance_compatibility checks&#xA;if the target of the interaction is the same as the actor.&#xA;&#xA;Ex: Tune the maid's provided_affordance_compatibility to exclude all&#xA;    so that other sims will not chat with the maid. But disable&#xA;    suppress_self_affordances so that the maid can still perform&#xA;    interactions on herself (such as her No More Work interaction&#xA;    that tells her she's finished cleaning)."/>
                              <TunableVariant type="None" name="supress_outside_objects_if_sun_out" class="OptionalTunable" default="disabled" description="When enabled, objects on the outside will be suppressed by autonomy&#xA;if the sun is out (i.e. region provides light, it's daytime, &#xA;and weather isn't too cloudy) and will not be used unless they have&#xA;interactions tagged with 'counts_as_inside'.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="bool" name="enabled" class="Tunable" default="True" description="When checked, outside objects will be suppressed, otherwise&#xA;supression will be canceled.&#xA;Canceling suppression will have a higher priority than an&#xA;active supression, this is to support cases like vampire buffs&#xA;always being suppressed, but when they activate the daywalker&#xA;power, that cancelation of suppression should always have a &#xA;higher priority. "/>
                              </TunableVariant>
                              <TunableVariant type="None" name="transition_from_sit_posture_penalty" class="OptionalTunable" default="disabled" description="When enabled causes the Sim to be penalized for transitioning&#xA;from Sit to another posture.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="float" name="enabled" class="Tunable" default="1.0" description="The multiplier to apply to the autonomous interaction score&#xA;as a result of the Sim transitioning from sit to something&#xA;else.&#xA;&#xA;This number should be less than one (&lt;1) in order for it to be&#xA;a penalty, otherwise it will be a bonus." tuning_state="NeedsTuning"/>
                              </TunableVariant>
                            </TunableTuple>
                          </TunableList>
                          <TunableTuple name="periodic_statistic_change" class="TunableTuple" description="The stat change apply on the target within the state value.">
                            <Tunable type="float" name="interval" class="TunableSimMinute" default="60" min="None" max="None" description="The number of sim minutes in between each application of the tuned operations.&#xA;Note: This operation sets an alarm, which has performance implications,&#xA;so please see a GPE before setting to a number lower than 5 mins." tuning_state="NeedsTuning"/>
                            <TunableList name="operations" class="TunableList">
                              <TunableTuple class="TunableObjectStatisticChangeOp" description="Statistic Change Operation will apply on object without interaction involved.">
                                <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                                  <Tunable name="no_max" class="TunableExistance"/>
                                  <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                                    <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                                    <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                                    <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                    </TunableList>
                                    <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                                <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                                  <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                                    <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                                      <Tunable name="raw_value" class="TunableExistance"/>
                                      <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                                        <TunableTuple class="TunableVector2" description="Point on a Curve">
                                          <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                          <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                                        </TunableTuple>
                                      </TunableList>
                                    </TunableVariant>
                                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                                  </TunableTuple>
                                </TunableList>
                                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                                  <Tunable name="no_text" class="TunableExistance"/>
                                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                                  <Tunable name="use_default" class="TunableExistance"/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableList>
                          </TunableTuple>
                        </TunableTuple>
                        <Tunable name="no_statistic_to_apply" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="awareness" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="Enable the ability for an object to contribute to awareness.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_awareness" description="Enable the ability for an object to contribute to awareness.">
                        <Tunable name="no_awareness" class="TunableExistance"/>
                        <TunableTuple name="start_awareness" class="TunableAwarenessSourceRequest" description="Enable the ability for an object to contribute to awareness.">
                          <TunableList name="awareness_sources" class="TunableMapping" mapping_key="key" mapping_value="value" description="A mapping of awareness channels and scores. The score is cumulative,&#xA;with all requests for the same channel contributing to an object's&#xA;awareness source score.">
                            <TunableTuple class="TunableTuple">
                              <TunableEnum type="AwarenessChannel" name="key" class="TunableEnumEntry" default="PROXIMITY" dynamic_entries="animation-awareness-awareness_enums.AwarenessChannel._elements" static_entries="animation-awareness-awareness_enums.AwarenessChannel" description="The channel to add an awareness score to." invalid_entries="PROXIMITY,AUDIO_VOLUME"/>
                              <Tunable type="float" name="value" class="Tunable" default="1" description="The awareness score for this object, for the specified channel." tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="broadcaster" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Request broadcasters to be applied.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_broadcaster" description="Request broadcasters to be applied.">
                        <Tunable name="no_broadcaster" class="TunableExistance"/>
                        <TunableTuple name="start_broadcaster" class="TunableBroadcasterRequest" description="Request broadcasters to be applied.">
                          <TunableList name="broadcaster_types" class="TunableTestedList" description="A list of broadcasters to request.">
                            <TunableTuple class="TunableTuple" description="An entry in this tested list.">
                              <Tunable type="broadcaster" name="item" class="TunableReference" description="The broadcasters to request." allow_none="False" pack_safe="True"/>
                              <Tunable type="bool" name="stop_processing" class="Tunable" default="False" description="If checked, no other element from this list is considered if&#xA;this element passes its associated test."/>
                              <TdescFragTag name="test" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="change_value" class="OptionalTunable" default="disabled" description="Operation to change the current value of the target object and potenitally&#xA;add that value to the running total of insurance owed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableObjectValueChangeOperation" description="Operation to change the current value of the target object and potenitally&#xA;add that value to the running total of insurance owed.">
                        <Tunable type="float" name="change_percentage" class="TunablePercent" default="100" min="0" max="100" description="A percentage of the catalog value to modify the current value of &#xA;the target. It will either decrease or increase the value of the &#xA;object based on the setting of reduce_value."/>
                        <TunableVariant type="None" name="value_change_type" class="TunableVariant" default="decrease_value">
                          <TunableTuple name="decrease_value" class="TunableValueDecreaseFactory">
                            <Tunable type="bool" name="covered_by_insurance" class="Tunable" default="True" description="If checked it means that the user will be awarded an insurance&#xA;payment for the value lost. Currently this only happens with&#xA;fire insurance and there is seperate tuning in the fire service&#xA;for how much of the reduction is awarded as part of the insurance.&#xA;&#xA;NOTE: There is a tunable percent of the value that get's tuned here&#xA;that actually gets added to the insurance tally. That tuning&#xA;exists on services.fire_service. The name of the tunable is&#xA;Fire Insurance Claim Percentage.                     "/>
                          </TunableTuple>
                          <TunableTuple name="increase_value" class="TunableValueIncreaseFactory">
                            <Tunable type="bool" name="apply_depreciation" class="Tunable" default="False" description="Whether or not to apply initial depreciation when&#xA;this value change is applied.&#xA;&#xA;Example: if you are replacing an object that is&#xA;burned we want to make the value worth the full&#xA;value of the object again, but you also need to&#xA;apply the initial depreciation as if it was &#xA;purchased from buy mode."/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="environment_score" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A State Change Operation Tunable for Environment Score.">
                      <TunableTuple name="apply_new_value" class="TunableEnvironmentScoreState" description="A State Change Operation Tunable for Environment Score.">
                        <TunableTuple name="base_modifiers" class="TunableTunableEnvironmentScoreModifiers" description="Modifiers for this object's Environment Score based on it's Client State.&#xA;&#xA;Example: Broken objects should emit a negative environment score and should&#xA;have an added negative modifier.&#xA;&#xA;Example: Blooming Flowers should emit a positive emotion when they are blooming">
                          <TunableList name="mood_modifiers" class="TunableMapping" mapping_key="mood" mapping_value="modifiers" description="Modifiers to apply to a given Mood for the environment scoring of an object.">
                            <TunableTuple class="TunableTuple">
                              <TunableTuple name="modifiers" class="TunableModifiers">
                                <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                                <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable type="mood" name="mood" class="TunableReference" description="The Mood we want to modify for objects in question." allow_none="False"/>
                            </TunableTuple>
                          </TunableList>
                          <TunableVariant type="None" name="negative_modifiers" class="OptionalTunable" default="disabled" description="Modifiers for an object's negative environment score">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableModifiers">
                              <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                              <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="positive_modifiers" class="OptionalTunable" default="disabled" description="Modifiers for an object's positive environment score">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableModifiers">
                              <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                              <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableTuple>
                        <TunableList name="trait_modifiers" class="TunableMapping" mapping_key="trait" mapping_value="modifiers" description="Each trait can put modifiers on any number of moods as well as the negative environment scoring.&#xA;&#xA;Example: Neat trait could set the negative score multiplier&#xA;to 2 for spoiled/dirty/broken objects.&#xA;&#xA;Example: For a dirty object, a Sim with the Slob trait&#xA;could set the negative score multiplier to 0, and even set&#xA;the happy mood to +2.">
                          <TunableTuple class="TunableTuple">
                            <TunableTuple name="modifiers" class="TunableTunableEnvironmentScoreModifiers" description="The Environmental Score modifiers for a particular trait.">
                              <TunableList name="mood_modifiers" class="TunableMapping" mapping_key="mood" mapping_value="modifiers" description="Modifiers to apply to a given Mood for the environment scoring of an object.">
                                <TunableTuple class="TunableTuple">
                                  <TunableTuple name="modifiers" class="TunableModifiers">
                                    <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                                    <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable type="mood" name="mood" class="TunableReference" description="The Mood we want to modify for objects in question." allow_none="False"/>
                                </TunableTuple>
                              </TunableList>
                              <TunableVariant type="None" name="negative_modifiers" class="OptionalTunable" default="disabled" description="Modifiers for an object's negative environment score">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableModifiers">
                                  <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                                  <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="positive_modifiers" class="OptionalTunable" default="disabled" description="Modifiers for an object's positive environment score">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableModifiers">
                                  <Tunable type="float" name="add_modifier" class="Tunable" default="0" description="The modifier to add to a value" tuning_state="NeedsTuning"/>
                                  <Tunable type="float" name="multiply_modifier" class="Tunable" default="1" description="The modifier to multiply a value by" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <Tunable type="trait" name="trait" class="TunableReference" description="The Trait that the Sim must have to enable these modifiers." allow_none="False" pack_safe="True"/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="flowing_puddle_enabled" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="If True, this object will start spawning puddles based on its PuddleSpawningComponentTuning.">
                      <Tunable type="bool" name="apply_new_value" class="Tunable" default="False" description="If True, this object will start spawning puddles based on its PuddleSpawningComponentTuning."/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="focus_score" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Define how focus score is determined for this object.">
                      <TunableVariant type="None" name="apply_new_value" class="TunableFocusScoreVariant" default="globally" description="Define how focus score is determined for this object.">
                        <TunableTuple name="globally" class="Tunable_FocusScoreGlobal" description="The score is global and applies to Sims of all species.">
                          <TunableEnum type="FocusScore" name="base" class="TunableEnumEntry" default="NONE" dynamic_entries="animation-focus-focus_tuning.FocusScore._elements" static_entries="animation-focus-focus_tuning.FocusScore" description="The base focus score, with no multipliers applied." tuning_state="NeedsTuning"/>
                          <TunableList name="multipliers" class="TunableMapping" mapping_key="key" mapping_value="value" description="A mapping of traits that increase or decrease a Sim's interest&#xA;towards an object. The multiplier is applied to the tuned&#xA;associate value of the focus score.">
                            <TunableTuple class="TunableTuple">
                              <Tunable type="trait" name="key" class="TunableReference" description="The trait that triggers the multiplier." allow_none="False" pack_safe="True"/>
                              <Tunable type="float" name="value" class="TunableRange" default="1" min="0" max="None" description="The score multiplier to apply if the Sim has the specified&#xA;trait." tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="species_specific" class="Tunable_FocusScoreSpecies" description="The score is species-specific.">
                          <TunableList name="scores" class="TunableMapping" mapping_key="key" mapping_value="value" description="A mapping of species to the focus score specific to that&#xA;species.">
                            <TunableTuple class="TunableTuple">
                              <TunableEnum type="Species" name="key" class="TunableEnumEntry" default="HUMAN" static_entries="sims-sim_info_types.Species" description="The species associated with this score."/>
                              <TunableTuple name="value" class="Tunable_FocusScoreGlobal" description="The score is global and applies to Sims of all species.">
                                <TunableEnum type="FocusScore" name="base" class="TunableEnumEntry" default="NONE" dynamic_entries="animation-focus-focus_tuning.FocusScore._elements" static_entries="animation-focus-focus_tuning.FocusScore" description="The base focus score, with no multipliers applied." tuning_state="NeedsTuning"/>
                                <TunableList name="multipliers" class="TunableMapping" mapping_key="key" mapping_value="value" description="A mapping of traits that increase or decrease a Sim's interest&#xA;towards an object. The multiplier is applied to the tuned&#xA;associate value of the focus score.">
                                  <TunableTuple class="TunableTuple">
                                    <Tunable type="trait" name="key" class="TunableReference" description="The trait that triggers the multiplier." allow_none="False" pack_safe="True"/>
                                    <Tunable type="float" name="value" class="TunableRange" default="1" min="0" max="None" description="The score multiplier to apply if the Sim has the specified&#xA;trait." tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                </TunableList>
                              </TunableTuple>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="geometry_state" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A geometry state to apply">
                      <TunableVariant type="None" name="apply_new_value" class="TunableGeometryState" default="set_to_default_value" description="A geometry state to apply">
                        <Tunable type="str" name="set_to_custom_value" class="Tunable" default="geometryStateName"/>
                        <Tunable name="set_to_default_value" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="geometry_state_override" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Apply a geometry state override to the object.">
                      <TunableTuple name="apply_new_value" class="TunableGeometryStateOverrideOperation" description="When enabled, any request to change a specific geometry state is overridden&#xA;with a request for another.&#xA;&#xA;This includes any geometry state requests coming from animation.">
                        <TunableList name="geometry_state_overrides" class="TunableList" description="A list of geometry state override operations to apply.">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="str" name="original_geometry_state" class="Tunable" default="" description="The geometry state that is to be overridden."/>
                            <Tunable type="str" name="override_geometry_state" class="Tunable" default="" description="The geometry state to override original_geometry_state with."/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="glow" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="Make the object glow.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_glow" description="Make the object glow.">
                        <Tunable name="no_glow" class="TunableExistance"/>
                        <TunableTuple name="start_glow" class="TunableGlow" description="Make the object glow.">
                          <TunableVariant type="None" name="color" class="TunableColor" default="none" description="The color of the call to action.">
                            <TunableTuple name="hex" class="TunableColorHex" description="A color.">
                              <Tunable type="str" name="hex_code" class="Tunable" default="#FFFFFFFF" description="An ARGB color in hex, same as one would use in HTML. A leading '0x' or '#' is allowed but not required. You can omit the alpha, in which case opaque is assumed."/>
                            </TunableTuple>
                            <TunableEnum type="Color" name="name" class="TunableEnumEntry" default="WHITE" static_entries="sims4-color.Color"/>
                            <Tunable name="none" class="TunableExistance"/>
                            <TunableTuple name="rgb" class="TunableColorRGBA" description="A color.">
                              <Tunable type="int" name="a" class="TunableRange" default="255" min="0" max="255" description="alpha value (0-255) (0 is transparent, 255 is opaque)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="b" class="TunableRange" default="255" min="0" max="255" description="blue value (0-255)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="g" class="TunableRange" default="255" min="0" max="255" description="green value (0-255)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="r" class="TunableRange" default="255" min="0" max="255" description="red value (0-255)" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableVariant>
                          <Tunable type="float" name="pulse_frequency" class="TunableRange" default="1.0" min="0.1" max="None" description="The frequency at which the highlight pulses." tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="thickness" class="TunableRange" default="0.002" min="0.001" max="0.005" description="The thickness of the highlight." tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="grubby" class="OptionalTunableClientStateChangeItem" default="leave_unchanged">
                      <Tunable type="bool" name="apply_new_value" class="Tunable" default="True"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="light_dimmer" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A dimmer value to apply">
                      <Tunable type="float" name="apply_new_value" class="TunableRange" default="0" min="0" max="1" description="A dimmer value to apply" tuning_state="NeedsTuning"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="light_material_states" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Override the material states to apply on the object when its light&#xA;is on or off.">
                      <TunableTuple name="apply_new_value" class="TunableTuple">
                        <TunableVariant type="None" name="material_state_off" class="TunableVariant" default="leave_unchanged" description="If specified, override the material state for this light&#xA;when the object is off.">
                          <Tunable type="str" name="apply_new_value" class="Tunable" default="lightsoff" description="The material state for this light when the object is&#xA;off."/>
                          <Tunable name="leave_unchanged" class="TunableExistance"/>
                          <Tunable name="set_to_default" class="TunableExistance"/>
                        </TunableVariant>
                        <TunableVariant type="None" name="material_state_on" class="TunableVariant" default="leave_unchanged" description="If specified, override the material state for this light&#xA;when the object is on.">
                          <Tunable type="str" name="apply_new_value" class="Tunable" default="lightson" description="The material state for this light when the object is on."/>
                          <Tunable name="leave_unchanged" class="TunableExistance"/>
                          <Tunable name="set_to_default" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="live_drag_state" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A State Change Operation to enable or disable Live Drag.">
                      <TunableTuple name="apply_new_value" class="TunableLiveDragStateOperation" description="A State Change Operation to enable or disable Live Drag.">
                        <TunableEnum type="LiveDragStateOp" name="operation" class="TunableEnumEntry" default="LIVE_DRAG_OP_ALLOW" static_entries="server-live_drag_operations.LiveDragStateOp" description="The Live Drag change we want this state to provide.&#xA;LIVE_DRAG_OP_ALLOW: A setting that does not restrict live drag.&#xA;This will only have an effect if the previous state disabled live&#xA;drag. &#xA;LIVE_DRAG_OP_DISABLE: A setting to disable live drag for this&#xA;state. Only another state that forces Live Drag to enable will&#xA;override this state."/>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="lot_statistic_modifiers" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="A tunable to add a list of statistic behaviors to the current lot when a state gets set. ">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_modifiers" description="A tunable to add a list of statistic behaviors to the current lot when a state gets set. ">
                        <TunableTuple name="apply_modifiers" class="TunableLotStatisticModifierList" description="A tunable to add a list of statistic behaviors to the current lot when a state gets set. ">
                          <TunableList name="statistic_changes" class="TunableList" description="statistic changes to apply to lot when state gets set">
                            <TunableTuple class="TunableObjectStatisticChangeOp" description="Statistic Change Operation will apply on object without interaction involved.">
                              <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                              <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                                <Tunable name="no_max" class="TunableExistance"/>
                                <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                                  <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                                  <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                                  <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                                    <TunableTuple class="TunableVector2" description="Point on a Curve">
                                      <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                      <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                  </TunableList>
                                  <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                              <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                              <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                                <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                                  <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                                    <Tunable name="raw_value" class="TunableExistance"/>
                                    <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                    </TunableList>
                                  </TunableVariant>
                                  <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                                </TunableTuple>
                              </TunableList>
                              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                                <Tunable name="no_text" class="TunableExistance"/>
                                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                                <Tunable name="use_default" class="TunableExistance"/>
                              </TunableVariant>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                        <Tunable name="no_modifiers" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="mannequin_pose" class="OptionalTunableClientStateChangeItem" default="leave_unchanged">
                      <Tunable type="animation" name="apply_new_value" class="TunableReference" allow_none="False" restrict="ObjectPose"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="material_state" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A material state to apply">
                      <TunableTuple name="apply_new_value" class="TunableMaterialState" description="A material state to apply">
                        <Tunable type="float" name="opacity" class="TunableRange" default="1" min="0" max="1" description="Opacity of the material from ( 0.0 == transparent ) to ( 1.0 == opaque ). Not yet supported on the client." tuning_state="NeedsTuning"/>
                        <TunableVariant type="None" name="state_name" class="TunableStringOrDefault" default="set_to_default_value" description="The name of the material state.">
                          <Tunable type="str" name="set_to_custom_value" class="Tunable" default="materialStateName"/>
                          <Tunable name="set_to_default_value" class="TunableExistance"/>
                        </TunableVariant>
                        <Tunable type="float" name="transition" class="TunableSimMinute" default="0" min="None" max="None" description="Time to take when transitioning in sim minutes. Not yet supported on the client." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="material_variant" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A material variant to apply">
                      <TunableVariant type="None" name="apply_new_value" class="TunableMaterialVariant" default="set_to_default_value" description="A material variant to apply">
                        <Tunable type="str" name="set_to_custom_value" class="Tunable" default="materialVariantName"/>
                        <Tunable name="set_to_default_value" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="model" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A model state to apply">
                      <TunableVariant type="None" name="apply_new_value" class="TunableModelOrDefault" default="set_to_default_model" description="A model state to apply">
                        <TunableTuple name="set_to_custom_model" class="TunableModel" description="Specify the model to use.">
                          <TunableVariant type="None" name="model" class="TunableVariant" default="from_resource" description="Define the model to use.">
                            <TunableTuple name="from_definition" class="Tunable_ModelFromDefinition" description="Define a model from a specified definition. Optionally, apply the&#xA;definition as well.">
                              <Tunable type="bool" name="apply_definition" class="Tunable" default="False" description="If set, the definition is also swapped. Otherwise, only the&#xA;model is swapped."/>
                              <Tunable type="object" name="definition" class="TunableReference" description="The model's definition. " allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="from_resource" class="Tunable_ModelFromResource" description="Define a model from a specified resource.">
                              <Tunable type="ResourceKey" name="model" class="TunableResourceKey" default="None" description="The model's resource." resource_types="0x1661233"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableTuple>
                        <Tunable name="set_to_default_model" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="multicolor" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="List of colors to be applied to the object. &#xA;Currently only 3 colors are supported by the multicolor shader&#xA;and the order of these matter, so apply in the same order&#xA;as the layers are setup (this can been seen in medator or &#xA;contact your modeler).&#xA;If tuning RGB values, the Alpha will be ignored.">
                      <TunableList name="apply_new_value" class="TunableList" max="3" description="List of colors to be applied to the object. &#xA;Currently only 3 colors are supported by the multicolor shader&#xA;and the order of these matter, so apply in the same order&#xA;as the layers are setup (this can been seen in medator or &#xA;contact your modeler).&#xA;If tuning RGB values, the Alpha will be ignored.">
                        <TunableVariant type="None" class="TunableColorSnippet" default="literal" description="Color to be applied. &#xA; (This may be tuned in place here using 'literal' or as a reference to a Color tuning snippet.)">
                          <TunableVariant type="None" name="literal" class="TunableColor" default="none" description="A color.">
                            <TunableTuple name="hex" class="TunableColorHex" description="A color.">
                              <Tunable type="str" name="hex_code" class="Tunable" default="#FFFFFFFF" description="An ARGB color in hex, same as one would use in HTML. A leading '0x' or '#' is allowed but not required. You can omit the alpha, in which case opaque is assumed."/>
                            </TunableTuple>
                            <TunableEnum type="Color" name="name" class="TunableEnumEntry" default="WHITE" static_entries="sims4-color.Color"/>
                            <Tunable name="none" class="TunableExistance"/>
                            <TunableTuple name="rgb" class="TunableColorRGBA" description="A color.">
                              <Tunable type="int" name="a" class="TunableRange" default="255" min="0" max="255" description="alpha value (0-255) (0 is transparent, 255 is opaque)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="b" class="TunableRange" default="255" min="0" max="255" description="blue value (0-255)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="g" class="TunableRange" default="255" min="0" max="255" description="green value (0-255)" tuning_state="NeedsTuning"/>
                              <Tunable type="int" name="r" class="TunableRange" default="255" min="0" max="255" description="red value (0-255)" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableVariant>
                          <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Color tuning snippet." allow_none="False" restrict="Color"/>
                        </TunableVariant>
                      </TunableList>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="opacity" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="An opacity to apply">
                      <Tunable type="float" name="apply_new_value" class="TunableRange" default="1" min="0" max="1" description="An opacity to apply" tuning_state="NeedsTuning"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="painting_reveal_level" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A painting reveal level to apply.  Smaller values show less of&#xA;the final painting.  The maximum value fully reveals the&#xA;painting.">
                      <Tunable type="int" name="apply_new_value" class="TunableRange" default="0" min="0" max="5" description="A painting reveal level to apply.  Smaller values show less of&#xA;the final painting.  The maximum value fully reveals the&#xA;painting." tuning_state="NeedsTuning"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="painting_state" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Change the entire painting state.">
                      <TunableTuple name="apply_new_value" class="TunableChangePaintingState" description="A State Change Operation Tunable for Painting States.">
                        <TunableVariant type="None" name="overlay_texture_id" class="TunableVariant" default="none" description="Change the overlay texture id in some way.  This is the&#xA;texture that we want to use as the overlay on this picture">
                          <TunableTuple name="clear_texture" class="_ClearTexture"/>
                          <TunableTuple name="dont_use" class="_DontUsePaintingTextureField"/>
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="set_texture" class="_SetTexture">
                            <Tunable type="ResourceKey" name="texture_key" class="TunableResourceKey" default="None" description="The resource key that we want to switch the painting state to." resource_types="0x2f7d0006"/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="reveal_level" class="OptionalTunable" default="disabled" description="If enabled then we will change the reveal level of the painting&#xA;state.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="int" name="enabled" class="TunableRange" default="0" min="0" max="5" description="The reveal level that we will change the painting state to." tuning_state="NeedsTuning"/>
                        </TunableVariant>
                        <TunableVariant type="None" name="reveal_texture_id" class="TunableVariant" default="none" description="Change the reveal texture id in some way.  This is the&#xA;texture that we will use as a map to reveal the painting being&#xA;created.">
                          <TunableTuple name="clear_texture" class="_ClearTexture"/>
                          <TunableTuple name="dont_use" class="_DontUsePaintingTextureField"/>
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="set_texture" class="_SetTexture">
                            <Tunable type="ResourceKey" name="texture_key" class="TunableResourceKey" default="None" description="The resource key that we want to switch the painting state to." resource_types="0x2f7d0006"/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="state_texture_id" class="TunableVariant" default="none" description="Change the state texture id in some way.  This is the&#xA;texture that will be revealed when being revealed as a mural.">
                          <TunableTuple name="clear_texture" class="_ClearTexture"/>
                          <TunableTuple name="dont_use" class="_DontUsePaintingTextureField"/>
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="set_texture" class="_SetTexture">
                            <Tunable type="ResourceKey" name="texture_key" class="TunableResourceKey" default="None" description="The resource key that we want to switch the painting state to." resource_types="0x2f7d0006"/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="texture_id" class="TunableVariant" default="none" description="Modify the texture id in some way.">
                          <TunableTuple name="clear_texture" class="_ClearTexture"/>
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="set_texture" class="_SetTexture">
                            <Tunable type="ResourceKey" name="texture_key" class="TunableResourceKey" default="None" description="The resource key that we want to switch the painting state to." resource_types="0x2f7d0006"/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="periodic_loot" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Periodic loot operation.  Every tuned number of Sim minutes,&#xA;the specified periodic loots will be applied.&#xA;&#xA;NOTE: The recurring alarm that awards loots is not persisted!  The&#xA;initial delay will always be used when loading.&#xA;&#xA;If timing persistence is important, and you are so inclined to do so, &#xA;do not use this functionally and opt instead to tune loots that are awarded&#xA;on commodity states, knowing the additional overhead of tuning&#xA;and managing the commodity that controls them.">
                      <TunableTuple name="apply_new_value" class="TunablePeriodicLootOperation" description="Periodic loot operation.  Every tuned number of Sim minutes,&#xA;the specified periodic loots will be applied.&#xA;&#xA;NOTE: The recurring alarm that awards loots is not persisted!  The&#xA;initial delay will always be used when loading.&#xA;&#xA;If timing persistence is important, and you are so inclined to do so, &#xA;do not use this functionally and opt instead to tune loots that are awarded&#xA;on commodity states, knowing the additional overhead of tuning&#xA;and managing the commodity that controls them.">
                        <TunableList name="periodic_loots" class="TunableList" description="A list of periodic loots to apply.">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="float" name="frequency_interval" class="TunableSimMinute" default="15" min="5" max="None" description="The time between loot applications. " tuning_state="NeedsTuning"/>
                            <Tunable type="float" name="initial_delay" class="TunableSimMinute" default="15" min="0" max="None" description="Delay before the first loot." tuning_state="NeedsTuning"/>
                            <TunableList name="loots_to_apply" class="TunableList" description="The loots to apply" unique_entries="true">
                              <Tunable type="action" class="TunableReference" description="The loot to apply." allow_none="False" pack_safe="True"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="pregnancy_progress" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A pregnancy progress value to apply">
                      <Tunable type="float" name="apply_new_value" class="TunableRange" default="0" min="0" max="1" description="A pregnancy progress value to apply" tuning_state="NeedsTuning"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="replace_object" class="OptionalTunable" default="disabled" description="If enabled, when this state is set to active the owning object will delete&#xA;itself and optionally spawn a new object of the specified type in its place.&#xA;&#xA;Please be aware that if this field is enabled, the owning object will be&#xA;deleted and the new object will have no reference to it or any of its&#xA;properties and settings.  Make sure this is what you want.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableObjectReplacementOperation" description="If enabled, when this state is set to active the owning object will delete&#xA;itself and optionally spawn a new object of the specified type in its place.&#xA;&#xA;Please be aware that if this field is enabled, the owning object will be&#xA;deleted and the new object will have no reference to it or any of its&#xA;properties and settings.  Make sure this is what you want.">
                        <Tunable type="bool" name="destroy_original_object" class="Tunable" default="True" description="If checked, the original object will be destroyed.  If&#xA;unchecked, the original object will be left around."/>
                        <TunableVariant type="None" name="new_object" class="OptionalTunable" default="disabled" description="A reference to the type of object which will be created in this&#xA;object's place.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="object" name="enabled" class="TunableReference" allow_none="False"/>
                        </TunableVariant>
                        <Tunable type="bool" name="transfer_sim_ownership" class="Tunable" default="False" description="If checked, when ownership is enabled on both objects, &#xA;transfer the sim that is the owner to the new object."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="scale" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A scale to apply">
                      <Tunable type="float" name="apply_new_value" class="Tunable" default="1" description="A scale to apply" tuning_state="NeedsTuning"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="scratched" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Change the state of this object appearing scratched.">
                      <Tunable type="bool" name="apply_new_value" class="Tunable" default="True"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="singed" class="OptionalTunableClientStateChangeItem" default="leave_unchanged">
                      <Tunable type="bool" name="apply_new_value" class="Tunable" default="True"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="situation" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Create situations while this state is active.">
                      <TunableTuple name="apply_new_value" class="TunableStateSituationRequest" description="A tunable to create a list of situations that will be spun up while the&#xA;object is in this state.">
                        <TunableList name="situations_to_create" class="TunableList" description="A list of situations that will be created while the object is in&#xA;this state.">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="bool" name="invite_only" class="Tunable" default="True" description="If this situation should use an invite only guest list or&#xA;not."/>
                            <Tunable type="situation" name="situation" class="TunableReference" description="A situation that will be created when this state is set." allow_none="False"/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="tint" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A tint to apply (This may be tuned in place here using 'literal' or as a reference to a Color tuning snippet.)">
                      <TunableVariant type="None" name="apply_new_value" class="TunableColorSnippet" default="literal" description="A tint to apply (This may be tuned in place here using 'literal' or as a reference to a Color tuning snippet.)">
                        <TunableVariant type="None" name="literal" class="TunableColor" default="none" description="A color.">
                          <TunableTuple name="hex" class="TunableColorHex" description="A color.">
                            <Tunable type="str" name="hex_code" class="Tunable" default="#FFFFFFFF" description="An ARGB color in hex, same as one would use in HTML. A leading '0x' or '#' is allowed but not required. You can omit the alpha, in which case opaque is assumed."/>
                          </TunableTuple>
                          <TunableEnum type="Color" name="name" class="TunableEnumEntry" default="WHITE" static_entries="sims4-color.Color"/>
                          <Tunable name="none" class="TunableExistance"/>
                          <TunableTuple name="rgb" class="TunableColorRGBA" description="A color.">
                            <Tunable type="int" name="a" class="TunableRange" default="255" min="0" max="255" description="alpha value (0-255) (0 is transparent, 255 is opaque)" tuning_state="NeedsTuning"/>
                            <Tunable type="int" name="b" class="TunableRange" default="255" min="0" max="255" description="blue value (0-255)" tuning_state="NeedsTuning"/>
                            <Tunable type="int" name="g" class="TunableRange" default="255" min="0" max="255" description="green value (0-255)" tuning_state="NeedsTuning"/>
                            <Tunable type="int" name="r" class="TunableRange" default="255" min="0" max="255" description="red value (0-255)" tuning_state="NeedsTuning"/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Color tuning snippet." allow_none="False" restrict="Color"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="toggle_footprint" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="If enabled, when this state is set to active the owning object toggles&#xA;the specified footprint as requested.&#xA;&#xA;Pushes off any sims on objects footprint if any footprint is being enabled">
                      <TunableTuple name="apply_new_value" class="TunableToggleFootprintOperation" description="If enabled, when this state is set to active the owning object toggles&#xA;the specified footprint as requested.&#xA;&#xA;Pushes off any sims on objects footprint if any footprint is being enabled">
                        <TunableList name="toggles" class="TunableList" description="List of footprints to toggle.">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="bool" name="enable" class="Tunable" default="False" description="If checked, we turn on the tuned footprint when entering&#xA;the state changes. If not checked, we turn off the tuned&#xA;footprint when entering the state."/>
                            <Tunable type="str" name="footprint_hash" class="TunableStringHash32" default="None" description="Name of the footprint to toggle."/>
                            <Tunable type="bool" name="push_sims" class="Tunable" default="True" description="If enabled, Sims will be pushed from this footprint when&#xA;it is turned on."/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="transient" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="This is what the objects transient value is set to">
                      <Tunable type="bool" name="apply_new_value" class="Tunable" default="False" description="This is what the objects transient value is set to"/>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="ui_metadata" class="OptionalTunableClientStateChangeItem" default="leave_unchanged">
                      <TunableTuple name="apply_new_value" class="TunableUiMetadataList">
                        <TunableList name="data" class="TunableMapping" mapping_key="key" mapping_value="value" description="        ">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="str" name="key" class="Tunable" default="None"/>
                            <TunableVariant type="None" name="value" class="TunableVariant" default="none">
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableVariant type="None" name="other_value" class="TunableVariant" default="integral">
                                <Tunable type="bool" name="boolean" class="Tunable" default="False"/>
                                <TunableVariant type="None" name="color" class="TunableColor" default="none" description="A color.">
                                  <TunableTuple name="hex" class="TunableColorHex" description="A color.">
                                    <Tunable type="str" name="hex_code" class="Tunable" default="#FFFFFFFF" description="An ARGB color in hex, same as one would use in HTML. A leading '0x' or '#' is allowed but not required. You can omit the alpha, in which case opaque is assumed."/>
                                  </TunableTuple>
                                  <TunableEnum type="Color" name="name" class="TunableEnumEntry" default="WHITE" static_entries="sims4-color.Color"/>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="rgb" class="TunableColorRGBA" description="A color.">
                                    <Tunable type="int" name="a" class="TunableRange" default="255" min="0" max="255" description="alpha value (0-255) (0 is transparent, 255 is opaque)" tuning_state="NeedsTuning"/>
                                    <Tunable type="int" name="b" class="TunableRange" default="255" min="0" max="255" description="blue value (0-255)" tuning_state="NeedsTuning"/>
                                    <Tunable type="int" name="g" class="TunableRange" default="255" min="0" max="255" description="green value (0-255)" tuning_state="NeedsTuning"/>
                                    <Tunable type="int" name="r" class="TunableRange" default="255" min="0" max="255" description="red value (0-255)" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                </TunableVariant>
                                <Tunable type="ResourceKey" name="icon" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                <Tunable type="int" name="integral" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                <Tunable type="int" name="string" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens."/>
                              </TunableVariant>
                              <TunableVariant type="None" name="state_value" class="TunableVariant" default="value">
                                <Tunable name="display_description" class="TunableExistance"/>
                                <Tunable name="display_name" class="TunableExistance"/>
                                <Tunable name="icon" class="TunableExistance"/>
                                <Tunable name="value" class="TunableExistance"/>
                              </TunableVariant>
                            </TunableVariant>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="utility_modifiers" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A State Change Operation tunable for household utilities.">
                      <TunableTuple name="apply_new_value" class="TunableUtilityModifierState" description="A State Change Operation tunable for household utilities.">
                        <TunableList name="utility_modifiers" class="TunableList" description="Modifiers for household utilities. These are applied to the&#xA;utilities of the household that owns this object.">
                          <TunableVariant type="None" class="TunableVariant" default="shut_off" description="The utility and modifer we want to apply.">
                            <TunableTuple name="shut_off" class="TunableShutOffUtilityModifier" description="A modifier for shutting off a household utility.">
                              <TunableEnum type="UtilityShutoffReasonPriority" name="shutoff_reason" class="TunableEnumEntry" default="NO_REASON" dynamic_entries="sims-household_utilities-utility_types.UtilityShutoffReasonPriority._elements" static_entries="sims-household_utilities-utility_types.UtilityShutoffReasonPriority" description="The priority of our shutoff reason. This determines how important&#xA;the shutoff tooltip is relative to other reasons the utility is&#xA;being shutoff."/>
                              <Tunable type="int" name="shutoff_tooltip" class="TunableLocalizedString" default="0x0" description="A tooltip to show when an interaction cannot be run due to this&#xA;utility being shutoff."/>
                              <TunableEnum type="Utilities" name="utility" class="TunableEnumEntry" default="POWER" dynamic_entries="sims-household_utilities-utility_types.Utilities._elements" static_entries="sims-household_utilities-utility_types.Utilities" description="The household utility we want to modify."/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="vfx_state" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged" description="Play one or more visual effects.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_vfx" description="Define the type of visual effect to play.">
                        <Tunable name="no_vfx" class="TunableExistance"/>
                        <TunableVariant type="None" name="start_vfx" class="TunableVariant" default="single_effect" description="Define the type of visual effect to play.">
                          <TunableTuple name="multiple_effects" class="TunablePlayMultipleEffects" description="Play multiple visual effects.">
                            <TunableList name="vfx_list" class="TunableList" description="A list of effects to play">
                              <TunableTuple class="TunablePlayEffect" description="A single effect to play.">
                                <Tunable type="str" name="effect_name" class="Tunable" default="" description="The name of the effect to play."/>
                                <TunableVariant type="None" name="joint_name" class="OptionalTunable" default="Slot" description="Specify if the visual effect is attached to a slot and, if so, which&#xA;slot.">
                                  <Tunable name="Current_Position" class="TunableExistance"/>
                                  <Tunable type="str" name="Slot" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is attached to."/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="single_effect" class="TunablePlayEffect" description="Distributable Primitive-like object (it supports the running/stop/write API)&#xA;that represents a visual effect parented to a game object.&#xA;&#xA;Call start() to start the effect and stop() to stop it.">
                            <Tunable type="str" name="effect_name" class="Tunable" default="" description="The name of the effect to play."/>
                            <TunableVariant type="None" name="joint_name" class="OptionalTunable" default="Slot" description="Specify if the visual effect is attached to a slot and, if so, which&#xA;slot.">
                              <Tunable name="Current_Position" class="TunableExistance"/>
                              <Tunable type="str" name="Slot" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is attached to."/>
                            </TunableVariant>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="vfx_state_state" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Define a visual effect state on any visual effects controlled by&#xA;this state.">
                      <TunableTuple name="apply_new_value" class="TunablePlayEffectState" description="For a Visual Effect that is playing due to the associated state, set the VFX&#xA;state as defined in the Swarm file.">
                        <Tunable type="int" name="state_index" class="TunableRange" default="0" min="0" max="None" description="The index of the state to apply to the VFX activated by the state&#xA;that is also activating this state change. This is defined in the&#xA;Swarm file." tuning_state="NeedsTuning"/>
                        <TunableVariant type="None" name="state_owning_vfx" class="OptionalTunable" default="Use_Current_State" description="Specify which client states the VFX that we care about are owned by.">
                          <Tunable name="Use_Current_State" class="TunableExistance"/>
                          <TunableList name="Use_Specific_State" class="TunableList" description="Specify specific state(s) that own VFX.">
                            <Tunable type="object_state" class="TunableReference" description="The client state(s) owning the VFX we want to modify." allow_none="False" pack_safe="True" restrict="ObjectState"/>
                          </TunableList>
                        </TunableVariant>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="video_playlist" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="List of clip names and append behavior.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_video" description="List of clip names and append behavior.">
                        <Tunable name="no_video" class="TunableExistance"/>
                        <TunableTuple name="start_video" class="TunableTuple" description="List of clip names and append behavior.">
                          <Tunable type="bool" name="append_clip" class="Tunable" default="False" description="If enabled clip list will be appended to previous &#xA;playing clip instead of interrupting the existing &#xA;playlist.&#xA;This should be tuned when the clips should have a &#xA;smoother transition like a credits scene on a movie."/>
                          <TunableList name="clip_list" class="TunableList">
                            <Tunable type="ResourceKey" class="TunableResourceKey" default="None" resource_types="0x376840d7"/>
                          </TunableList>
                          <Tunable type="bool" name="loop_last" class="Tunable" default="True" description="If enabled, the clip will loop. Otherwise, it's played&#xA;once and stop on last frame."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="video_playlist_looping" class="OptionalTunableClientStateChangeItemWithDisable" default="leave_unchanged">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_video">
                        <Tunable name="no_video" class="TunableExistance"/>
                        <Tunable type="ResourceKey" name="start_video" class="TunableResourceKey" default="None" resource_types="0x545ac67a"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="visibility" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="A visibility state to apply">
                      <TunableTuple name="apply_new_value" class="TunableVisibilityState" description="A visibility state to apply">
                        <Tunable type="bool" name="enable_drop_shadow" class="Tunable" default="True" description="If True, this object's drop shadow may be visible.  If False, &#xA;this object's drop shadow will not be visible."/>
                        <Tunable type="bool" name="inherits" class="Tunable" default="True" description="If True, this object can only be visible if its parent is &#xA;visible. If False, it may be visible regardless of its parent's &#xA;visibility."/>
                        <Tunable type="bool" name="visibility" class="Tunable" default="True" description="If True, the object may be visible. If False, the object will &#xA;not be visible."/>
                      </TunableTuple>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="visibility_flags" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="If specified, apply visibility flag overrides for this object. For&#xA;example, control whether or not the object is reflected in mirrors&#xA;and water.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="No_Flags">
                        <TunableList name="enabled" class="TunableEnumFlags" unique_entries="true">
                          <TunableEnum type="VisibilityFlags" class="TunableEnumEntry" default="MIRRORS" static_entries="objects-visibility-visibility_enums.VisibilityFlags"/>
                        </TunableList>
                        <Tunable name="No_Flags" class="TunableExistance"/>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="walkstyle" class="OptionalTunableClientStateChangeItem" default="leave_unchanged" description="Request a walkstyle on a particular Sim. Walkstyles with higher priorities&#xA;trump walkstyles with lower priorities.">
                      <TunableVariant type="None" name="apply_new_value" class="OptionalTunable" default="no_request" description="Request a walkstyle on a particular Sim. Walkstyles with higher priorities&#xA;trump walkstyles with lower priorities.">
                        <Tunable name="no_request" class="TunableExistance"/>
                        <TunableTuple name="request_walkstyle" class="TunableWalkStyleRequest" description="Request a walkstyle on a particular Sim. Walkstyles with higher priorities&#xA;trump walkstyles with lower priorities.">
                          <TunableEnum type="WalkStylePriority" name="priority" class="TunableEnumEntry" default="INVALID" dynamic_entries="routing-walkstyle-walkstyle_enums.WalkStylePriority._elements" static_entries="routing-walkstyle-walkstyle_enums.WalkStylePriority" description="The priority of the walkstyle. Higher priority walkstyles will take&#xA;precedence over lower priority. Equal priority will favor recent&#xA;requests." invalid_entries="INVALID"/>
                          <Tunable type="ResourceKey" name="walkstyle" class="TunableWalkstyle" default="None" description="The locomotion resource (i.e. walkstyle) to request. Depending&#xA;on the tuned priority and other requests active on the Sim, this&#xA;may or may not apply immediately." resource_types="0x27c01d95"/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable name="leave_unchanged" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                </TunableTuple>
              </TunableList>
              <TunableVariant type="None" name="default_value" class="TunableVariant" default="reference" description="The default value for the state.">
                <TunableList name="random" class="TunableList" description="A weighted list of object states to randomly choose&#xA;between as the default for this state.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="object_state" name="state" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                    <Tunable type="float" name="weight" class="Tunable" default="1.0" tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableList>
                <Tunable type="object_state" name="reference" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
              </TunableVariant>
              <Tunable type="bool" name="reset_on_load_if_time_passes" class="Tunable" default="False" description="If checked then the object is saved with the default&#xA;state rather than the current state.  If we want it&#xA;to return to this state we need an interaction that&#xA;is saved to put it back into it."/>
              <Tunable type="bool" name="reset_to_default" class="Tunable" default="False" description="If checked, when the object is reset, the state will be&#xA;reset to the default value. Otherwise, it will keep the&#xA;current value."/>
              <TunableVariant type="None" name="tested_states_on_add" class="OptionalTunable" default="disabled" description="The first test that passes will have its state applied.&#xA;If no tests pass, the fallback state will be applied.&#xA;This can be used to conditionally apply a state to an&#xA;object.  For example, the Tree Rabbit Hale needs to &#xA;default to the open state when it's on the Slyvan Glade&#xA;venue.&#xA;This runs when the object is added to the world.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTestedStateValueReference" description="Test based states.  The first test that passes will have its state applied.&#xA;If all tests fail, the fallback state will be applied.&#xA;These are applied in def on_add of the state component.">
                  <TunableVariant type="None" name="fallback_state" class="OptionalTunable" default="disabled" description="If all tests fail, this state will be applied.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="object_state" name="enabled" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                  </TunableVariant>
                  <TunableList name="tested_states" class="TunableList" description="The first test that passes will have its state applied.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="object_state" name="state" class="TunableReference" allow_none="False" pack_safe="True" restrict="ObjectStateValue"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
              </TunableVariant>
            </TunableTuple>
          </TunableList>
        </TunableTuple>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_to_loot_actions" description="A list of LootAction references and LootActionVariant to add" class="TunableList">
      <TunableTuple>
        <Tunable name="loot_actions_ref" type="action" class="TunableReference" description="Reference to a LootAction tuning instance" pack_safe="True" restrict="LootActions"/>
        <TunableList name="loot_actions_to_add" description="List of loots operations that will be awarded." class="TunableList">
          <TunableVariant type="None" class="LootActionVariant" default="none">
            <Tunable type="action" name="actions" class="TunableReference" description="Apply a set of loot operations." allow_none="False" pack_safe="True" restrict="LootActions,RandomWeightedLoot"/>
            <TunableTuple name="add_relic_combo" class="TunableAddRelicCombo" description="A loot that adds a specified relic combo to a Sim's relic tracker.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="RelicComboId" name="relic_combo_id" class="TunableEnumEntry" default="INVALID" dynamic_entries="relics-relic_tuning.RelicComboId._elements" static_entries="relics-relic_tuning.RelicComboId" description="The relic combo ID to add to the Sim's Relic Tracker." invalid_entries="INVALID"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="apply_tags_to_object" class="TunableApplyTagsToObject" description="A construct that sets object tags">
              <TunableList name="apply_persisted_tags" class="TunableTags" unique_entries="true">
                <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A set of persisted category tags to apply to the finished product." invalid_entries="INVALID" pack_safe="True"/>
              </TunableList>
              <TunableList name="apply_unpersisted_tags" class="TunableTags" unique_entries="true">
                <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A set of unpersisted category tags to apply to the finished product." invalid_entries="INVALID" pack_safe="True"/>
              </TunableList>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="award_perk" class="TunableAwardPerkLoot" description="This loot will give the specified perk to the sim.">
              <TunableVariant type="None" name="award_strategy" class="TunableVariant" default="unlock">
                <TunableTuple name="progress" class="Tunable_PerkProgressStrategy" description="Gives progress towards awarding the perk.  The perk must have a progression&#xA;statistic for this loot to work.">
                  <Tunable type="float" name="progress" class="Tunable" default="0" description="This is the amount of progress to give towards awarding the perk" tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="unlock" class="Tunable_UnlockPerkStrategy" description="Unlocks the perk.">
                  <Tunable type="bool" name="unlock_for_free" class="Tunable" default="True" description="When checked the perk can be awarded even if the Sim you are&#xA;awarding it to cannot afford the perk.&#xA;&#xA;When unchecked this loot will attempt to charge the Sim for perk&#xA;and if the Sim cannot afford the perk will fail to award the perk.&#xA;This failure will happen silently as it is a totally normal flow&#xA;for this loot."/>
                </TunableTuple>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="notification_on_successful_unlock" class="OptionalTunable" default="disabled" description="If enabled, a notification that displays when the perk is&#xA;successfully awarded.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableVariant type="None" name="enabled" class="TunableNotificationSnippet" default="literal" description="This is the notification that shows when the perk is successfully&#xA;unlocked.&#xA; (This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.)">
                  <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                    <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                    </TunableVariant>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                    <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                  </TunableTuple>
                  <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                </TunableVariant>
              </TunableVariant>
              <Tunable type="bucks_perk" name="perk" class="TunableReference" description="The perk to give the Sim. " allow_none="False"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="award_whim_bucks" class="TunableAwardWhimBucksLootOp" description="This loot will give the specified number of whim bucks to the sim. ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="int" name="whim_bucks" class="TunableRange" default="1" min="1" max="None" description="The number of whim bucks to give." tuning_state="NeedsTuning"/>
            </TunableTuple>
            <TunableTuple name="breakthrough_moment" class="TunableBreakThroughLootOperation" description="An operation that shows a breakthrough headline on target Sim.">
              <Tunable type="statistic" name="breakthrough_commodity" class="TunableReference" description="The commodity that tracks the breakthrough progress." allow_none="False"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="float" name="time" class="TunableRealSecond" default="5" min="None" max="None" description="The amount of time, in real seconds, to show headline effect." tuning_state="NeedsTuning"/>
            </TunableTuple>
            <TunableTuple name="bucks_loot" class="TunableBucksLoot" description="A loot operation granting a tuned amount of a specific type of Bucks.">
              <Tunable type="int" name="amount" class="Tunable" default="10" description="The amount of Bucks to award." tuning_state="NeedsTuning"/>
              <TunableEnum type="BucksType" name="bucks_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="bucks-bucks_enums.BucksType._elements" static_entries="bucks-bucks_enums.BucksType" description="The type of Bucks to grant."/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="force_refund" class="Tunable" default="False" description="If enabled then if the total amount of bucks would be reduced to&#xA;a negative value, the bucks tracker will try to get back to zero&#xA;by refunding perks to make up the difference."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="buff" class="TunableBuffOp" description="Factory created by tuning to represent buff loot.">
              <TunableTuple name="buff" class="TunablePackSafeBuffReference">
                <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
                </TunableVariant>
                <Tunable type="buff" name="buff_type" class="TunableReference" description="Buff that will get added to sim." allow_none="False" pack_safe="True"/>
              </TunableTuple>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="buff_removal" class="TunableBuffRemovalOp" description="This loot will remove buffs from a Sim.">
              <TunableList name="buff_tags_to_remove" class="TunableTags" unique_entries="true">
                <TunableEnum type="Tag" class="TunableEnumWithFilter" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="If 'remove_all_buffs' is not checked, buffs with any tag in this list&#xA;will be removed from the subject. If 'remove_all_buffs' is checked, this&#xA;list will be ignored." dynamic_entries_prefix="buff" invalid_entries="INVALID" pack_safe="True"/>
              </TunableList>
              <TunableList name="buffs_to_ignore" class="TunableList" description="If 'remove_all_buffs' is checked, no buffs included in this list will&#xA;be removed.  If 'remove_all_buffs' is unchecked, this list will be&#xA;ignored.">
                <Tunable type="buff" class="TunableReference" description="Buff to be removed." allow_none="False"/>
              </TunableList>
              <TunableList name="buffs_to_remove" class="TunableList" description="If 'remove_all_buffs' is not checked, this is the list of buffs that&#xA;will be removed from the subject.  If 'remove_all_buffs' is checked,&#xA;this list will be ignored.">
                <Tunable type="buff" class="TunableReference" description="Buff to be removed." allow_none="False" pack_safe="True"/>
              </TunableList>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="remove_all_visible_buffs" class="Tunable" default="False" description="If checked, all visible buffs on the Sim, excluding those specified in&#xA;the 'buffs_to_ignore' list will be removed.  If unchecked, buff removal&#xA;will be handled by the 'buffs_to_remove' list."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="buff_transfer" class="TunableBuffTransferOp" description="Loot action to facilitate transfer of buffs (or mood buffs). The buffs&#xA;are applied to the tuned Subject Sim.">
              <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                <Tunable name="disabled" class="TunableExistance"/>
                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="mood_types" class="OptionalTunable" default="disabled" description="If enabled, only transfer buffs with associated moods in this list.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableList name="enabled" class="TunableList" description="If enabled, only transfer buffs with associated moods in this list.">
                  <Tunable type="mood" class="TunableReference" allow_none="False"/>
                </TunableList>
              </TunableVariant>
              <Tunable type="bool" name="moods_only" class="Tunable" default="True" description="Checking this box will limit the operations to only the buffs with&#xA;an associated mood."/>
              <TunableVariant type="None" name="polarity" class="OptionalTunable" default="disabled" description="If enabled, only transfer buffs that match the selected polarity.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableEnum type="BuffPolarity" name="enabled" class="TunableEnumEntry" default="NEUTRAL" static_entries="buffs.BuffPolarity" description="If enabled, only transfer buffs that match the selected polarity."/>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="Buffs are transferred from this Sim to the Subject."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="business_modify_customer_flow" class="TunableModifyCustomerFlow" description="A loot that either sets a business as ready to receive customers or as not&#xA;ready to receive customers. In the later case it means customers will stop &#xA;showing up at all.">
              <Tunable type="bool" name="allow_customers" class="Tunable" default="True" description="If checked then set the current business, if there is one active,&#xA;to allow for customers to arrive.&#xA;&#xA;If unchecked then set the current business, if there is one active,&#xA;to disallow customers from arriving."/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="butler_state_change" class="TunableButlerSituationStateChange" description="A loot that either enables or disables the butler situation state.">
              <Tunable type="situation" name="butler_situation" class="TunableReference" description="The Situation who's state will change." allow_none="False" pack_safe="True"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="operation" class="TunableVariant" default="enable" description="Enable or disable operation for tuned tone.">
                <Tunable name="disable" class="TunableExistance"/>
                <Tunable name="enable" class="TunableExistance"/>
              </TunableVariant>
              <TunableEnum type="ButlerSituationStates" name="situation_state" class="TunableEnumEntry" default="DEFAULT" static_entries="situations-service_npcs-butler-butler_loot_ops.ButlerSituationStates" description="Situation state for the butler that should be enabled or disabled&#xA;depending on the operation." invalid_entries="DEFAULT"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="cancel_scheduled_drama_node" class="TunableCancelScheduledDramaNodeLoot" description="A loot operation for canceling scheduled drama nodes. Any drama node with&#xA;in the tuned set with the specified recipient and sender will be canceled.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableList name="drama_nodes" class="TunableSet" description="            " unique_entries="true">
                <Tunable type="drama_node" class="TunableReference" allow_none="False"/>
              </TunableList>
              <TunableEnum type="ParticipantType" name="receiver" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The recipient of the drama node."/>
              <TunableVariant type="None" name="sender" class="OptionalTunable" default="disabled" description="The sender of the drama node. Can be left unspecified if there is&#xA;no sender.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
              </TunableVariant>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="career_level" class="TunableCareerLevelOp" description="Factory for promoting/demoting a sim in a career.">
              <Tunable type="career" name="career" class="TunableReference" description="The career upon which we'll be promoting/demoting the Sim.&#xA;If the Sim doesn't have this career or there's a reason the career&#xA;can't be promoted/demoted, nothing will happen." allow_none="False"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="CareerLevelOps" name="operation" class="TunableEnumEntry" default="PROMOTE" static_entries="careers-career_ops.CareerLevelOps" description="The operation to perform on the career."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="career_loot" class="TunableCareerLootOp" description="Factory for career loot op.">
              <TunableVariant type="None" name="career" class="TunableVariant" default="career_reference" description="The career to apply loot to.">
                <TunableTuple name="all_careers" class="TunableTuple" description="Apply the operation to all of the Sim's careers."/>
                <TunableTuple name="career_reference" class="TunableTuple" description="Reference to the career.">
                  <Tunable type="career" name="reference" class="TunableReference" allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <TunableTuple name="participant_type" class="TunableTuple" description="The id of the career upon which the op will be applied to. Sim&#xA;Participant must have the career. Typically should be PickedItemId&#xA;if this loot is being applied by the continuation of a&#xA;CareerPickerSuperInteraction.">
                  <TunableList name="participant" class="TunableEnumFlags" default="PickedItemId" unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                  </TunableList>
                </TunableTuple>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableList name="operations" class="TunableList" description="A list of career loot ops.">
                <TunableVariant type="None" class="TunableVariant" default="performance" description="What the Sim will get with this op.">
                  <TunableTuple name="demote" class="TunableTuple" description="Promote the Sim on the career.">
                    <Tunable type="int" name="levels_to_demote" class="TunableRange" default="1" min="1" max="None" description="The number of levels to demote the Sim." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="fine" class="TunableTuple" description="A tuned amount of money, as a multiple of the current&#xA;career's simoleons per hour, the Sim will have removed&#xA;from their funds.  If the Sim does not have funds to cover&#xA;the fine, their account will be depleted.">
                    <Tunable type="float" name="hour_multiplier" class="Tunable" default="0" description="The multiplier on the career's simoleons per hour." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="fire" class="TunableTuple" description="Fire the Sim from the career.">
                    <Tunable type="bool" name="clear_history" class="Tunable" default="False" description="If checked, clear out the work history so when the Sim&#xA;gets the same career they start over."/>
                  </TunableTuple>
                  <TunableTuple name="join" class="TunableTuple" description="Have the specified Sim join the career.">
                    <TunableVariant type="None" name="level_to_join" class="OptionalTunable" default="disabled" description="If enabled, this is the level at which the Sim will &#xA;join the career.  Otherwise, the Sim will start at &#xA;level 1 or a higher level if they were previously in&#xA;this career.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableRange" default="1" min="1" max="None" tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <Tunable type="bool" name="show_confirmation_dialog" class="Tunable" default="False" description="If checked and Sim is in other careers or is retired, &#xA;prompt the player to confirm joining the new career. &#xA;&#xA;If accepted, Sim will automatically quit other careers &#xA;and unretire. If canceled, nothing happens and new &#xA;career isn't added."/>
                  </TunableTuple>
                  <TunableTuple name="money" class="TunableTuple" description="A tuned amount of money, as a multiple of the current&#xA;career's simoleons per hour, for the Sim to get.">
                    <Tunable type="float" name="hour_multiplier" class="Tunable" default="0" description="The multiplier on the career's simoleons per hour." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="performance" class="TunableTuple" description="The tuned amount will be applied to the relevant career's&#xA;performance statistic.">
                    <Tunable type="float" name="amount" class="Tunable" default="0" description="The amount to apply to the career's performance statistic.&#xA;Can be negative." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="promote" class="TunableTuple" description="Promote the Sim on the career.">
                    <Tunable type="int" name="levels_to_promote" class="TunableRange" default="1" min="1" max="None" description="The number of levels to promote the Sim." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="pto" class="TunableTuple" description="The amount to apply to the career's pto statistic.&#xA;Can be negative.">
                    <Tunable type="float" name="amount" class="Tunable" default="0" description="The amount to apply to the career's performance statistic.&#xA;Can be negative." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="quit" class="TunableTuple" description="Have the specified Sim quit their career. "/>
                  <TunableTuple name="retire" class="TunableTuple" description="Retire the Sim from the career. The career will provide a&#xA;daily pension until death. All other careers will be quit."/>
                  <TunableTuple name="take_day_off" class="TunableTuple" description="Take off the next work period.  If you want it to consume PTO&#xA;then you must also use a pto operation.">
                    <TunableEnum type="CareerTimeOffReason" name="reason" class="TunableEnumEntry" default="NO_TIME_OFF" dynamic_entries="careers-career_ops.CareerTimeOffReason._elements" static_entries="careers-career_ops.CareerTimeOffReason" description="The reason for taking day off."/>
                  </TunableTuple>
                </TunableVariant>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="claim_seat" class="TunableClaimRestaurantSeat" description="A loot that allows a sim to claim a seat at a restaurant.&#xA;&#xA;This works for seats that are unclaimed and also seats that are&#xA;claimed by someone else. If the seat is already claimed by the&#xA;subject then nothing happens.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="claim_table" class="TunableClaimRestaurantTable" description="A loot that allows a sim to claim a restaurant table. This works for&#xA;an individual Sim or any group that the specified Sim is part of.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="create_notebook_entry" class="TunableNotebookEntryLootOp" description="Unlocks a notebook entry to be displayed on the notebook UI.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="notebook_entry" class="TunableVariant" default="none" description="Type of unlock for notebook entries.">
                <TunableTuple name="create_entry_from_participant" class="Tunable_NotebookEntryFromParticipant" description="Creates a notebook entry from the tuned participant.">
                  <TunableEnum type="ParticipantTypeObject" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeObject" description="Participant on which we will get the noteboook entry information &#xA;from."/>
                  <Tunable type="notebook_entry" name="reference_notebook_entry" class="TunableReference" description="Reference to a notebook entry where we will get the core notebook&#xA;data (category, subcategory) but we will use the the object &#xA;reference to populate the rest of the data. " allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <TunableTuple name="create_entry_from_recipe" class="Tunable_NotebookEntryFromRecipe" description="Creates a notebook entry from a reference entry and a recipe reference&#xA;to get the detailed data.">
                  <Tunable type="recipe" name="recipe" class="TunableReference" description="The recipe to use to create the notebook entry.  This recipe&#xA;should have the use_ingredients tunable set so the notebook&#xA;system has data to populate the entry." allow_none="False" pack_safe="True"/>
                  <Tunable type="notebook_entry" name="reference_notebook_entry" class="TunableReference" description="Reference to a notebook entry where we will get the core notebook&#xA;data (category, subcategory).   " allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <TunableTuple name="create_new_entry" class="Tunable_NotebookEntryFromReference" description="Creates a notebook entry from a notebook tuning instance.">
                  <Tunable type="notebook_entry" name="notebook_entry" class="TunableReference" description="Create a new entry filling up all the fields for an entry." allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <Tunable name="none" class="TunableExistance"/>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="create_object" class="TunableObjectCreationOp" description="Loot operation to create an object.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="creation_data" class="TunableObjectCreationDataVariant" default="definition" description="Define the object to create.">
                <TunableTuple name="clone_object" class="Tunable_CloneObject" description="Specify an object to be cloned.">
                  <TunableVariant type="None" name="definition_override" class="OptionalTunable" default="disabled" description="Override to specify a different definition than that of the object&#xA;being cloned.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="object" name="enabled" class="TunableReference" description="The definition of the object that is created." allow_none="False"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="source_object" class="TunableVariant" default="slotted_to_participant" description="Where the object to be cloned can be found.">
                    <TunableTuple name="is_participant" class="Tunable_ParticipantObject" description="The object is a participant.">
                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="Used to clone a participant object."/>
                    </TunableTuple>
                    <TunableTuple name="slotted_to_participant" class="Tunable_SlottedObject" description="The object is one slotted on a participant.">
                      <TunableTuple name="slotted_to_participant" class="TunableTuple" description="Used to clone an object slotted to a participant.">
                        <TunableEnum type="ParticipantType" name="parent_object_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant object which will contain the specified&#xA;slot where the object to be cloned is slotted."/>
                        <Tunable type="slot_type" name="parent_slot_type" class="TunableReference" description="A particular slot type where the cloned object can be found.  The&#xA;first slot of this type found on the source_object will be used." allow_none="False"/>
                      </TunableTuple>
                    </TunableTuple>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="create_photo_object" class="Tunable_CreatePhotoObject" description="Create a photo object based on the participant target.">
                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="Used to create photo of a participant object."/>
                </TunableTuple>
                <TunableTuple name="definition" class="Tunable_ObjectDefinition" description="Specify an object definition.">
                  <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object that is created." allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <TunableTuple name="definition_tested" class="Tunable_ObjectDefinitionTested" description="Specify an object definition based on tests.">
                  <TunableList name="definitions" class="TunableList" description="A list of potential object definitions to use.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object to be created." allow_none="False" pack_safe="True"/>
                      <TunableTuple name="weight" class="TunableTunableMultiplier" description="The weight of this definition relative to other&#xA;definitions in this list.">
                        <Tunable type="float" name="base_value" class="Tunable" default="1" description="The basic value to return if no modifications are applied." tuning_state="NeedsTuning"/>
                        <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_value.">
                          <TunableTuple class="TunableTuple">
                            <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_value if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                            <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                    </TunableTuple>
                  </TunableList>
                  <Tunable type="object" name="fallback_definition" class="TunableReference" description="Should no test pass, use this definition." allow_none="True"/>
                </TunableTuple>
                <TunableTuple name="from_stored_object_info" class="Tunable_CreateObjectFromStoredObjectInfo" description="Create an object using info stored on the source participant.">
                  <TunableEnum type="ParticipantTypeSingleSim" name="stored_object_info_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingleSim" description="The Sim participant of this interaction which contains the stored&#xA;object info that is used to create this object."/>
                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object being stored. This will be used to retrieve the&#xA;stored object from the Stored Object Info Component of the target." invalid_entries="INVALID"/>
                </TunableTuple>
                <TunableTuple name="random_by_tags" class="Tunable_RandomFromTags" description="Specify a tag which will randomly choose an object that has been marked with that&#xA;tag and create it.">
                  <TunableList name="filter_tags" class="TunableTags" min="1" unique_entries="true">
                    <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="Define tags to try and create the object. Picks randomly from&#xA;objects with these tags." invalid_entries="INVALID" pack_safe="True"/>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="recipe" class="Tunable_RecipeDefinition" description="Specify a recipe. The final product's definition is used as a&#xA;definition.">
                  <Tunable type="recipe" name="recipe" class="TunableReference" description="The recipe to use to create the object." allow_none="False"/>
                  <Tunable type="bool" name="show_crafted_by_text" class="Tunable" default="True" description="Show crafted by text on the tooltip of item created by this recipe. "/>
                </TunableTuple>
              </TunableVariant>
              <Tunable type="bool" name="destroy_on_placement_failure" class="Tunable" default="False" description="If checked, the created object will be destroyed on placement failure.&#xA;If unchecked, the created object will be placed into an appropriate&#xA;inventory on placement failure if possible.  If THAT fails, object&#xA;will be destroyed."/>
              <TunableList name="initial_states" class="TunableList" description="A list of states to apply to the object as soon as it is created.">
                <TunableTuple class="TunableTuple" description="The state to apply and optional tests to decide if the state&#xA;should apply.">
                  <Tunable type="object_state" name="state" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                  <TunableVariant type="None" name="tests" class="OptionalTunable" default="disabled" description="If enabled, the state will only get set on the created&#xA;object if the tests pass. Note: These tests can not be&#xA;performed on the newly created object.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TdescFragTag name="enabled" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                  </TunableVariant>
                </TunableTuple>
              </TunableList>
              <TunableVariant type="None" name="location" class="TunableVariant" default="position" description="Where the object should be created.">
                <TunableTuple name="carry" class="TunableTuple" description="Carry the object. Note: This expects an animation in the&#xA;interaction to trigger the carry.">
                  <TunableVariant type="None" name="carry_track_override" class="OptionalTunable" default="disabled" description="If enabled, specify which carry track the Sim must use to carry the&#xA;created object.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="PostureTrackGroup" name="enabled" class="TunableEnumEntry" default="PostureTrack.RIGHT" static_entries="postures.PostureTrackGroup" description="Which hand to carry the object in."/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="inventory" class="TunableTuple" description="An inventory based off of the chosen Participant Type.">
                  <TunableEnum type="ParticipantType" name="location_target" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="&quot;The owner of the inventory the object will be created in.&quot;"/>
                  <Tunable type="bool" name="mark_object_as_stolen_from_career" class="Tunable" default="False" description="Marks the object as stolen from a career by the tuned location_target participant.&#xA;This should only be checked if this basic extra is on a CareerSuperInteraction."/>
                </TunableTuple>
                <TunableTuple name="position" class="Tunable_PlacementStrategyLocation" description="The object is placed somewhere on the ground/floor. This executes an FGL&#xA;search.">
                  <Tunable type="bool" name="allow_off_lot_placement" class="Tunable" default="False" description="If checked, objects will be allowed to be placed off-lot. If&#xA;unchecked, we will always attempt to place created objects on the&#xA;active lot."/>
                  <TunableVariant type="None" name="facing" class="OptionalTunable" default="disabled" description="If enabled, the final location will ensure that the placed object&#xA;faces a specific location.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableTuple">
                      <Tunable type="float" name="angle" class="TunableAngle" default="90.0" min="0.0" max="180.0" description="The angle that facing will trying to keep inside while test&#xA;FGL. The larger the number is, the more offset the facing&#xA;could be, but the chance will be higher to succeed in FGL." tuning_state="NeedsTuning"/>
                      <TunableVariant type="None" name="target" class="OptionalTunable" default="face_initial_location" description="The location to face.">
                        <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="Specify a participant that needs to be faced."/>
                        <Tunable name="face_initial_location" class="TunableExistance"/>
                      </TunableVariant>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="bool" name="ignore_bb_footprints" class="Tunable" default="True" description="Ignores the build buy object footprints when trying to find a&#xA;position for creating this object. This will allow objects to appear&#xA;on top of each other.&#xA;&#xA;e.g. Trash cans when tipped over want to place the trash right under&#xA;them so it looks like the pile came out from the object while it was&#xA;tipped."/>
                  <Tunable type="bool" name="in_same_room" class="Tunable" default="False" description="If checked, objects will be placed in the same block/room of the&#xA;initial location. If there is not enough space to put down the&#xA;object in the same block, the placement will fail."/>
                  <TunableVariant type="None" name="initial_location" class="TunableVariant" default="from_participant" description="The FGL search initial position is determined by this. If more than&#xA;one initial position is available, all are considered up to the&#xA;specified upper bound.">
                    <TunableTuple name="from_lot" class="Tunable_LocationFromLot" description="The location is the default lot location."/>
                    <TunableTuple name="from_participant" class="Tunable_ObjectsFromParticipant" description="The object is determined by a participant on the resolver.">
                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant that determines the object to be used for the&#xA;specified placement strategy."/>
                    </TunableTuple>
                    <TunableTuple name="from_tags" class="Tunable_ObjectsFromTags" description="The object is determined by a set of specified tags.">
                      <TunableList name="tags" class="TunableTags" unique_entries="true">
                        <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="For each tag, in order, gather objects that match that have that&#xA;tag. If the placement fails, consider another object, then consider&#xA;objects for the next tag." invalid_entries="INVALID" pack_safe="True"/>
                      </TunableList>
                    </TunableTuple>
                    <TunableTuple name="front_door_object" class="Tunable_FrontDoorObject" description="The front door."/>
                  </TunableVariant>
                  <TunableTuple name="initial_location_offset" class="TunableTuple">
                    <TunableTuple name="default_offset" class="TunableVector3" description="The default Vector3 offset from the location target's&#xA;position.">
                      <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                      <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                      <Tunable type="float" name="z" class="Tunable" default="0.0" description="z component" tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableVariant type="None" name="x_randomization_range" class="OptionalTunable" default="disabled" description="A random number in this range will be applied to the&#xA;default offset along the x axis.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableInterval" description="A random number in this range will be applied to the&#xA;default offset along the x axis.">
                        <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="upper_bound" class="TunableRange" default="0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="z_randomization_range" class="OptionalTunable" default="disabled" description="A random number in this range will be applied to the&#xA;default offset along the z axis.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableInterval" description="A random number in this range will be applied to the&#xA;default offset along the z axis.">
                        <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="upper_bound" class="TunableRange" default="0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableTuple>
                  <Tunable type="bool" name="stay_in_connected_connectivity_group" class="Tunable" default="True" description="If unchecked then the object will be allowed to be placed in&#xA;a connectivity group that is currently disconnected from&#xA;the starting location.&#xA;&#xA;If checked then the placement will fail if there is not a&#xA;position inside a connected connectivity group from the&#xA;starting position that can be used for placement."/>
                  <Tunable type="bool" name="stay_outside_placement" class="Tunable" default="False" description="If checked, objects will run their placement search only for&#xA;positions that are considered outside."/>
                </TunableTuple>
                <TunableTuple name="slot" class="Tunable_PlacementStrategySlot" description="The object is slotted somewhere.">
                  <TunableVariant type="None" name="parent" class="TunableVariant" default="from_participant" description="The object this object is going to be slotted into.">
                    <TunableTuple name="from_participant" class="Tunable_ObjectsFromParticipant" description="The object is determined by a participant on the resolver.">
                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant that determines the object to be used for the&#xA;specified placement strategy."/>
                    </TunableTuple>
                    <TunableTuple name="from_tags" class="Tunable_ObjectsFromTags" description="The object is determined by a set of specified tags.">
                      <TunableList name="tags" class="TunableTags" unique_entries="true">
                        <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="For each tag, in order, gather objects that match that have that&#xA;tag. If the placement fails, consider another object, then consider&#xA;objects for the next tag." invalid_entries="INVALID" pack_safe="True"/>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="parent_slot" class="TunableVariant" default="none" description="The slot on location_target where the object should go. This may be&#xA;either the exact name of a bone on the location_target or a slot&#xA;type, in which case the first empty slot of the specified type in&#xA;which the child object fits will be used.">
                    <Tunable type="str" name="by_name" class="Tunable" default="_ctnm_" description="The exact name of a slot on the location_target in which the&#xA;target object should go."/>
                    <Tunable type="slot_type" name="by_reference" class="TunableReference" description="A particular slot type in which the target object should go.&#xA;The first empty slot of this type found on the location_target&#xA;will be used." allow_none="False"/>
                    <Tunable name="none" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="bool" name="use_part_owner" class="Tunable" default="False" description="If enabled and target is a part, placement will use the part owner&#xA;instead of the part."/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantTypeSingleSim" name="owner_sim" class="TunableEnumEntry" default="ParticipantType.Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant Sim whose household should own the object. Leave this&#xA;as Invalid to not assign ownership."/>
              <Tunable type="int" name="quantity" class="TunableRange" default="1" min="1" max="10" description="The number of objects that will be created." tuning_state="NeedsTuning"/>
              <TunableVariant type="None" name="reserve_object" class="OptionalTunable" default="disabled" description="If this is enabled, the created object will be reserved for use by&#xA;the set Sim.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableEnum type="ParticipantTypeActorTargetSim" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeActorTargetSim"/>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableVariant type="None" name="temporary_tags" class="OptionalTunable" default="disabled" description="If enabled, these Tags are added to the created object and DO NOT&#xA;persist.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableList name="enabled" class="TunableSet" min="1" description="A set of temporary tags that are added to the created object.&#xA;These tags DO NOT persist." unique_entries="true">
                  <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A tag that is added to the created object. This tag DOES&#xA;NOT persist."/>
                </TunableList>
              </TunableVariant>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="create_puddles" class="TunableCreatePuddlesLootOp" description="This loot will create puddles based on a tuned set of chances.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="default_puddle_factory" class="TunablePuddleFactory" description="This set of chances will be used if the sim creating the puddle does&#xA;not match any of the traits in the trait_puddle_chances tuning list.">
                <Tunable type="int" name="large" class="TunableRange" default="0" min="0" max="None" description="Relative chance of large puddle." tuning_state="NeedsTuning"/>
                <TunableEnum type="PuddleLiquid" name="liquid" class="TunableEnumEntry" default="WATER" dynamic_entries="objects-puddles.PuddleLiquid._elements" static_entries="objects-puddles.PuddleLiquid" description="The liquid of the puddle that will be generated."/>
                <Tunable type="int" name="medium" class="TunableRange" default="0" min="0" max="None" description="Relative chance of medium puddle." tuning_state="NeedsTuning"/>
                <Tunable type="int" name="none" class="TunableRange" default="5" min="0" max="None" description="Relative chance of no puddle." tuning_state="NeedsTuning"/>
                <Tunable type="int" name="small" class="TunableRange" default="5" min="0" max="None" description="Relative chance of small puddle." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <Tunable type="float" name="max_distance" class="Tunable" default="2.5" description="Maximum distance from the source object a puddle can be spawned.&#xA;If no position is found within this distance no puddle will be &#xA;made." tuning_state="NeedsTuning"/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of the interaction whom the puddle&#xA;should be placed near."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="trait_based_puddle_factory" class="OptionalTunable" default="disabled" description="A particpant type may be set to choose a puddle factory&#xA;based on traits the participant has.&#xA;         &#xA;If disabled, the default puddle factory is used.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTuple">
                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant type whose traits are checked to determine&#xA;which Trait Puddle Factory to use."/>
                  <TunableList name="trait_puddle_factory" class="TunableList" description="Ordered list of puddle factories with associated trait.&#xA;Will use the first factory whose trait is on the subject.">
                    <TunableTuple class="TunableTuple">
                      <TunableTuple name="puddle_factory" class="TunablePuddleFactory" description="The chance of creating a puddle of various sizes.">
                        <Tunable type="int" name="large" class="TunableRange" default="0" min="0" max="None" description="Relative chance of large puddle." tuning_state="NeedsTuning"/>
                        <TunableEnum type="PuddleLiquid" name="liquid" class="TunableEnumEntry" default="WATER" dynamic_entries="objects-puddles.PuddleLiquid._elements" static_entries="objects-puddles.PuddleLiquid" description="The liquid of the puddle that will be generated."/>
                        <Tunable type="int" name="medium" class="TunableRange" default="0" min="0" max="None" description="Relative chance of medium puddle." tuning_state="NeedsTuning"/>
                        <Tunable type="int" name="none" class="TunableRange" default="5" min="0" max="None" description="Relative chance of no puddle." tuning_state="NeedsTuning"/>
                        <Tunable type="int" name="small" class="TunableRange" default="5" min="0" max="None" description="Relative chance of small puddle." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <Tunable type="trait" name="trait" class="TunableReference" allow_none="False"/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="create_situation" class="TunableCreateSituationLootOp">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="create_situation" class="TunableSituationStart" description="Start a Situation as part of this Interaction.">
                <TunableVariant type="None" name="actor_init_job" class="OptionalTunable" default="use_default_job" description="The Situation job actor would be assigned while join the situation.">
                  <Tunable type="situation_job" name="specify_job" class="TunableReference" allow_none="False"/>
                  <Tunable name="use_default_job" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="bool" name="invite_actor" class="Tunable" default="True" description="If checked, then the actor of this interaction will be invited&#xA;in the default job. This is the common case.&#xA;&#xA;If not checked, then the actor will not be invited. The Tell&#xA;A Ghost Story interaction spawning a Ghost walkby is an example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                <Tunable type="bool" name="invite_household_sims_on_active_lot" class="Tunable" default="False" description="If checked then all instanced sims on the active lot will be&#xA;invited. This is not a common case. An example of this is&#xA;leaving the hospital after having a baby, bringing both sims&#xA;home.&#xA;&#xA;If not checked, then no additional sims will be invited.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                <TunableList name="invite_participants" class="TunableMapping" mapping_key="participants_to_invite" mapping_value="invite_to_job" description="The map to invite certain participants into the situation as&#xA;specified job if assigned. Otherwise will invite them as&#xA;situation's default job.">
                  <TunableTuple class="TunableTuple">
                    <TunableVariant type="None" name="invite_to_job" class="OptionalTunable" default="use_default_job" description="A list of situation jobs that can be specified.  If a&#xA;single job is specified then all Sims will be given&#xA;that job.  Otherwise we will loop through all of the&#xA;Sims invited and give them jobs in list order.  The&#xA;list will begin to be repeated if we run out of jobs.&#xA;&#xA;NOTE: We cannot guarantee the order of the Sims being&#xA;passed in most of the time.  Use this if you want a&#xA;distribution of different jobs, but without a guarantee&#xA;that Sims will be assigned to each one.">
                      <TunableList name="specify_job" class="TunableList" description="A list of situation jobs that can be specified.  If a&#xA;single job is specified then all Sims will be given&#xA;that job.  Otherwise we will loop through all of the&#xA;Sims invited and give them jobs in list order.  The&#xA;list will begin to be repeated if we run out of jobs.&#xA;&#xA;NOTE: We cannot guarantee the order of the Sims being&#xA;passed in most of the time.  Use this if you want a&#xA;distribution of different jobs, but without a guarantee&#xA;that Sims will be assigned to each one.">
                        <Tunable type="situation_job" class="TunableReference" allow_none="False"/>
                      </TunableList>
                      <Tunable name="use_default_job" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableEnum type="ParticipantType" name="participants_to_invite" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant of who will join the situation."/>
                  </TunableTuple>
                </TunableList>
                <Tunable type="bool" name="invite_picked_sims" class="Tunable" default="True" description="If checked then any picked sims of this interaction will be&#xA;invited to the default job.  This is the common case.&#xA;&#xA;If not checked, then any picked sims will not be invited.  The&#xA;Tell A Ghost Story interaction spawning a Ghost walkby is an&#xA;example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                <Tunable type="bool" name="invite_target_sim" class="Tunable" default="True" description="If checked then the target sim of this interaction will be&#xA;invited to the default job.  This is the common case.&#xA;&#xA;If not checked, then the target sim will not be invited.  The&#xA;Tell A Ghost Story interaction spawning a Ghost walkby is an&#xA;example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                <TunableVariant type="None" name="linked_sim_participant" class="OptionalTunable" default="disabled" description="If enabled, this situation will be linked to the specified Sim.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType"/>
                </TunableVariant>
                <Tunable type="situation" name="situation" class="TunableReference" description="The Situation to start when this Interaction runs." allow_none="False"/>
                <TunableVariant type="None" name="situation_default_target" class="OptionalTunable" default="disabled" description="If enabled, the participant of the interaction will be set as&#xA;the situation target object.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant that will be set as the situation's default target"/>
                </TunableVariant>
                <TunableVariant type="None" name="situation_guest_info" class="OptionalTunable" default="disabled" description="By default, situation guest infos are created as an invite.&#xA;This overrrides that behavior.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="SituationGuestInfoFactory" description="Situation Guest Info tuning. Consult a GPE if you're at all unsure&#xA;what any of this does.">
                    <TunableEnum type="BouncerRequestPriority" name="bouncer_request_priority" class="TunableEnumEntry" default="EVENT_DEFAULT_JOB" static_entries="situations-bouncer-bouncer_types.BouncerRequestPriority" description="Bouncer Request Priority. Requests with higher priority will be&#xA;filled first. Conversely, lower priority requests will be pushed&#xA;out first upon hitting the sim cap."/>
                    <TunableEnum type="RequestSpawningOption" name="request_spawning_option" class="TunableEnumEntry" default="DONT_CARE" static_entries="situations-bouncer-bouncer_types.RequestSpawningOption" description="Spawning Option.&#xA;MUST_SPAWN: Choose from uninstantiated Sims.&#xA;CANNOT_SPAWN: Choose from instantiated Sims.&#xA;DONT_CARE: Choose from all Sims."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="target_init_job" class="OptionalTunable" default="use_default_job" description="The Situation job target would be assigned while join the situation.">
                  <Tunable type="situation_job" name="specify_job" class="TunableReference" allow_none="False"/>
                  <Tunable name="use_default_job" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="bool" name="user_facing" class="Tunable" default="True" description="If checked, then the situation will be user facing (have goals, &#xA;and scoring).&#xA;&#xA;If not checked, then situation will not be user facing.&#xA;&#xA;This setting does not override the user option to make all&#xA;situations non-scoring.&#xA;&#xA;Example: &#xA;    Date -&gt; Checked&#xA;    Invite To -&gt; Not Checked"/>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="custom_tooltip_transfer" class="TunableTransferCustomTooltip" description="Loot action to transfer a Custom Tooltip between participants. The Custom&#xA;Tooltip is taken from the Subject and applied to the Target.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="destroy_objects_from_inventory" class="TunableDestroyObjectsFromInventoryLootOp" description="Destroy every object in the target's inventory that passes the&#xA;tuned tests.">
              <TunableVariant type="None" name="award_value" class="OptionalTunable" default="disabled" description="If necessary, define how an amount corresponding to the objects'&#xA;value is given to Sims.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTuple">
                  <TunableEnum type="FundsSource" name="funds" class="TunableEnumEntry" default="HOUSEHOLD" static_entries="sims-funds.FundsSource" description="Where to award funds to.  This can go to household&#xA;funds by default, or to business funds."/>
                  <Tunable type="float" name="multiplier" class="TunableRange" default="1.0" min="0.0" max="None" description="Value multiplier for the award." tuning_state="NeedsTuning"/>
                  <TunableEnum type="ParticipantTypeSingleSim" name="recipient" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingleSim" description="Who to award funds to." invalid_entries="Invalid"/>
                  <TunableTuple name="tested_multipliers" class="TunableTunableMultiplier" description="Each multiplier that passes its test set will be applied to&#xA;each award payment.">
                    <Tunable type="float" name="base_value" class="Tunable" default="1" description="The basic value to return if no modifications are applied." tuning_state="NeedsTuning"/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_value.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_value if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                </TunableTuple>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="count" class="TunableVariant" default="all" description="The total number of objects to destroy. If multiple types of objects&#xA;match the criteria test, an arbitrary set of objects, no more than&#xA;the specified count, is destroyed.">
                <Tunable name="all" class="TunableExistance"/>
                <Tunable type="int" name="number" class="TunableRange" default="1" min="0" max="None" tuning_state="NeedsTuning"/>
              </TunableVariant>
              <TunableEnum type="DestroyObjectsFromInventorySource" name="object_source" class="TunableEnumEntry" default="ALL_STORAGE" static_entries="interactions-utils-loot_ops.DestroyObjectsFromInventorySource" description="The target's inventory storage types to search for objects to&#xA;destroy."/>
              <TdescFragTag name="object_tests" class="TunableTestSet" description="A list of tests to apply to all objects in the target inventory.&#xA;Every object that passes these tests will be destroyed."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="discover_clue" class="TunableDiscoverClueLootOp" description="An operation that gives the player a notification and a notebook entry&#xA;about a clue they have discovered.">
              <Tunable type="career" name="career_reference" class="TunableReference" description="A reference to the detective career that keeps track of what clues&#xA;to display to the player." allow_none="False" restrict="DetectiveCareer"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="action" name="fallback_actions" class="TunableReference" description="List of loot actions that will occur if there are no more clues to&#xA;be discovered. This can be used to hook up a notification, for&#xA;example." allow_none="True" restrict="LootActions,RandomWeightedLoot"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="dynamic_buff_loot" class="TunableDynamicBuffLootOp" description="This loot will give a random buff based on the weight get tuned inside.">
              <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                <Tunable name="disabled" class="TunableExistance"/>
                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
              </TunableVariant>
              <TunableList name="buffs" class="TunableMapping" mapping_key="key" mapping_value="value" description="            ">
                <TunableTuple class="TunableTuple">
                  <Tunable type="buff" name="key" class="TunableReference" description="Buff that will get this weight in the random." allow_none="False"/>
                  <Tunable type="float" name="value" class="Tunable" default="0" description="The weight value." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableList>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="" invalid_entries="Invalid,All,PickedItemId"/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="dynamic_skill_loot" class="TunableDynamicSkillLootOp" description="DynamicSkillLootOp is used to tune a skill gain. You get different &#xA;amounts of skill based on your current skill level.&#xA;The amount comes from the curve in the Skill Loot Data Override-&gt;Effectiveness.&#xA;&#xA;Super Interaction, Mixer Interaction, and Recipe can override specific&#xA;fields for DynamicSkillLootOp using a field called &quot;Skill Loot Data&quot;&#xA;&#xA;The Overrides are prioritized in this order:&#xA;1. Dynamic Skill Loot Tuning&#xA;2. Mixer Interaction - Skill Loot Data&#xA;3. Super Interaction - Skill Loot Data&#xA;4. Recipe            - Skill Loot Data&#xA;&#xA;Examples:&#xA;&#xA;1. The most common use of overrides is to use the same Dynamic Skill Loot on&#xA;multiple interactions, and then setting the stat in the Skill Loot Data of&#xA;the interaction. This lets you use the same loot for different skills.&#xA;   &#xA;2. Level Range lets you cap the min or max amount of skill gain. You get &#xA;a DynamicSkillLootOp for your fitness which is at level 2. We look up&#xA;level 2 in Skill/Skill Effectiveness Gain but it only has tuning level 5 to 8.&#xA;We then clamp 2 up to 5 and get the skill gain for level 5 and pay out that skill.&#xA;If your skill was level 9 you would have been clamped down to the skill gain at&#xA;level 8.&#xA;&#xA;3. If we setup tuning like this:&#xA;    Recipe -&gt; Super Interaction -&gt; Mixer Interaction -&gt; DynamicSkillLootOp&#xA;&#xA;With:&#xA;    DynamicSkillLootOp - Skill Loot Data Override ( Effectiveness STANDARD )&#xA;    Mixer Interaction - Skill Loot Data( Effectiveness Huge )&#xA;    Super Interaction - Skill Loot Data( Stat: Fitness )&#xA;    Recipe - Skill Loot Data( Stat: Cooking )&#xA;    &#xA;In this example you would gain: STANDARD Skill Gain for the Fitness Stat.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="skill_loot_data_override" class="TunableSkillLootData" description="This data will override loot data in the interaction. In&#xA;interaction, tuning field 'skill_loot_data' is used to determine&#xA;skill loot data.">
                <TunableEnum type="SkillEffectiveness" name="effectiveness" class="TunableEnumEntry" default="None" dynamic_entries="statistics-skill.SkillEffectiveness._elements" static_entries="statistics-skill.SkillEffectiveness" description="Enum to determine which curve to use when giving&#xA;points to sim." tuning_state="NeedsTuning"/>
                <TunableVariant type="None" name="level_range" class="OptionalTunable" default="disabled" description="Interval is used to clamp the sim's user facing&#xA;skill level to determine how many point to give. If&#xA;disabled, level passed to the dynamic skill loot&#xA;will always be the current user facing skill level&#xA;of sim. &#xA;Example: if sim is level 7 in fitness but&#xA;interaction skill level is only for 1 to 5 give the&#xA;dynamic skill amount as if sim is level 5.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableInterval" description="Interval is used to clamp the sim's user facing&#xA;skill level to determine how many point to give. If&#xA;disabled, level passed to the dynamic skill loot&#xA;will always be the current user facing skill level&#xA;of sim. &#xA;Example: if sim is level 7 in fitness but&#xA;interaction skill level is only for 1 to 5 give the&#xA;dynamic skill amount as if sim is level 5.">
                    <Tunable type="int" name="lower_bound" class="TunableRange" default="0" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="int" name="upper_bound" class="TunableRange" default="1" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableVariant>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="True" pack_safe="True" restrict="Skill"/>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="extinguish_nearby_fire" class="TunableExtinguishNearbyFireLootOp" description="Loot operation used to extinguish fires and sims near the subject">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="fire" class="TunableFireLootOp" description="Loot operation used to create fire at the position of the subject.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="fire_clean_scorch" class="TunableFloorFeatureRemoveOp" description="This loot will remove any instance of the tuned floor features within the&#xA;removal radius of the Sim.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="FloorFeatureType" name="floor_feature_type" class="TunableEnumEntry" default="BURNT" static_entries="build_buy.FloorFeatureType" description="The floor feature type that will be removed."/>
              <Tunable type="float" name="removal_radius" class="Tunable" default="2.5" description="The radius in the loot will remove floor features." tuning_state="NeedsTuning"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="fire_deactivate_sprinkler" class="TunableFireDeactivateSprinklerLootOp" description="Loot operation used to deactivate the lot's fire sprinkler system">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="fix_gender_preference" class="TunableGenderPreferenceOp" description="Loot that will influence the gender preference of the sims involved in the&#xA;interaction.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="int" name="gender_preference_statistic_decrease" class="Tunable" default="0" description="The value that will be added to the appropriate gender&#xA;preference statistic when this loot is applied. This should be&#xA;a negative number. The global gender preference tuning is a&#xA;module tunable GENDER_PREFERENCE." tuning_state="NeedsTuning"/>
              <Tunable type="int" name="gender_preference_statistic_increase" class="Tunable" default="0" description="The value that will be added to the appropriate gender&#xA;preference statistic when this loot is applied. The global&#xA;gender preference tuning is module tunable GENDER_PREFERENCE." tuning_state="NeedsTuning"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="game_over" class="TunableGameOver" description="Game component's game over loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="give_sickness" class="TunableGiveSicknessLootOp" description="Makes the subject sick with a given or random sickness.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="reset_diagnosis_progress" class="Tunable" default="True" description="If checked then reset the diagnosis progress, make all&#xA;exams available, and clear the list of treatments performed."/>
              <TunableVariant type="None" name="sickness" class="TunableVariant" default="random" description="Sickness to give to the subject.">
                <Tunable name="random" class="TunableExistance"/>
                <TunableTuple name="sickness_criteria" class="Tunable_SicknessMatchingCritera" description="Choose from available sicknesses using tags.">
                  <TunableVariant type="None" name="difficulty_range" class="OptionalTunable" default="disabled" description="Optionally define the difficulty rating range that is required&#xA;for the Sim's sickness.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableInterval" description="The difficulty rating range, this maps to 'difficulty_rating'&#xA;values in Sickness tuning.">
                      <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                      <Tunable type="float" name="upper_bound" class="TunableRange" default="10" min="None" max="10" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="tags" class="OptionalTunable" default="disabled" description="Optionally, only sicknesses that share any of the tags specified are considered. ">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableList name="enabled" class="TunableTags" unique_entries="true">
                      <TunableEnum type="Tag" class="TunableEnumWithFilter" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" dynamic_entries_prefix="Sickness" invalid_entries="INVALID" pack_safe="True"/>
                    </TunableList>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="specific_sickness" class="Tunable_GiveSpecificSickness" description="Give a specific sickness to the subject.">
                  <Tunable type="sickness" name="sickness" class="TunableReference" description="Sickness to give to the subject." allow_none="False" pack_safe="True" restrict="Sickness"/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="greeting" class="TunableGreetingLootOp" description="A loot operation that runs through the greetings tuning and attempts to&#xA;push a greeting between two participants.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantTypeSingleSim" name="greeting_target" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be targeted by the pushed interaction."/>
              <TunableEnum type="GreetingType" name="greeting_type" class="TunableEnumEntry" default="GREETING_GROUP" static_entries="interactions-social-greeting_socials-greetings.GreetingType" description="The type of greeting we want to push."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="hidden_inventory_transfer" class="TunableHiddenInventoryTransferLoot" description="Tuning that moves an object to and from the hidden inventory.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="transfer_type" class="TunableVariant" default="move_to_hidden_inventory" description="The type of hidden inventory transfer to perform.">
                <TunableTuple name="move_from_hidden_inventory" class="TunableMoveFromHiddenInventory" description="Transfer an object from the hidden inventory to the inventory."/>
                <TunableTuple name="move_to_hidden_inventory" class="TunableMoveToHiddenInventory" description="Transfer an object from the inventory to the hidden inventory."/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="increment_community_challenge_count" class="TunableIncrementCommunityChallengeCount" description="An operation to increment the count for the active community challenge.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="int" name="count" class="Tunable" default="1" description="The number to increment the community count by." tuning_state="NeedsTuning"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="interest_income" class="TunableHouseholdFundsInterestLootOp" description="This loot will deliver interest income to the current Household for their current funds,&#xA;based on the percentage tuned against total held. ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="int" name="interest_rate" class="Tunable" default="0" description="The percentage of interest to apply to current funds." tuning_state="NeedsTuning"/>
              <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="If enabled, this notification will display when this interest payment is made.&#xA;Token 0 is the Sim - i.e. {0.SimFirstName}&#xA;Token 1 is the interest payment amount - i.e. {1.Money}">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                  <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunablePlayAudio">
                      <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                      <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                      <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                      </TunableVariant>
                      <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                    <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                  </TunableList>
                  <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                  <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                  <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                  </TunableVariant>
                  <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                  <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                  </TunableVariant>
                  <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                  <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                    <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                    <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                      <TunableList name="variations" class="TunableList">
                        <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                      <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                        <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                          <Tunable name="active_holiday" class="TunableExistance"/>
                          <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                          <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                            <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                              <Tunable name="current_level_name" class="TunableExistance"/>
                              <Tunable name="current_level_salary" class="TunableExistance"/>
                              <Tunable name="next_level_name" class="TunableExistance"/>
                              <Tunable name="next_level_salary" class="TunableExistance"/>
                              <Tunable name="previous_level_name" class="TunableExistance"/>
                              <Tunable name="previous_level_salary" class="TunableExistance"/>
                            </TunableVariant>
                            <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                          </TunableTuple>
                          <Tunable name="current_trends" class="TunableExistance"/>
                          <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                            <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                          </TunableTuple>
                          <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                            <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                              <Tunable name="high_score" class="TunableExistance"/>
                              <Tunable name="high_score_sim" class="TunableExistance"/>
                            </TunableVariant>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                          </TunableTuple>
                          <Tunable name="interaction_cost" class="TunableExistance"/>
                          <Tunable name="interaction_payout" class="TunableExistance"/>
                          <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                          </TunableTuple>
                          <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                          </TunableTuple>
                          <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                            <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                          </TunableTuple>
                          <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                            <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                              <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                              </TunableTuple>
                              <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                          </TunableTuple>
                          <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                            <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                  </TunableVariant>
                  <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                    <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableList>
                  <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                  <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="inventory_loot" class="TunableInventoryLoot" description="Loot option for transfering an object from an owner Sim to a &#xA;target Sim.&#xA;&#xA;If objects are in the inventory it will try to do a transfer &#xA;from inventory-inventory.&#xA;If not it will try to mail the gift to other Sim&#xA;&#xA;e.g. Give gift interaction, you want to give an object from sim A &#xA;inventory to Sim B">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="subject" class="OptionalTunable" default="disabled" description="The participant type who has the inventory that the&#xA;object goes into during this loot.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant type who has the inventory that the&#xA;object goes into during this loot."/>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="CarriedObject" static_entries="interactions.ParticipantType" description="The participant type of the object which would get to&#xA;switch inventory in the loot"/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="know_other_sims_career" class="TunableKnowOtherSimCareerOp" description="An operation that sets career known on a relationship between two Sims.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="know_other_sims_statistics" class="TunableKnowOtherSimsStat" description="An operation that add a known stat to the relationship between&#xA;two Sims.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableList name="statistics" class="TunableSet" description="A list of all the Statistics that the Sim can learn from&#xA;this loot op." unique_entries="true">
                <Tunable type="statistic" class="TunableReference" description="A tunable reference to a statistic that might be learned&#xA;from this op." allow_none="False" pack_safe="True"/>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="know_other_sims_trait" class="TunableKnowOtherSimTraitOp" description="An operation that sets a known trait on a relationship between two Sims.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="Specify a notification that will be displayed for every subject if&#xA;information is learned about each individual target_subject. This&#xA;should probably be used only if you can ensure that target_subject&#xA;does not return multiple participants. The first two additional&#xA;tokens are the Sim and target Sim, respectively. A third token&#xA;containing a string with a bulleted list of trait names will be a&#xA;String token in here. If you are learning multiple traits, you&#xA;should probably use it. If you're learning a single trait, you can&#xA;get away with writing specific text that does not use this token.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableNotificationElement" description="Show a notification to a Sim's player.">
                  <Tunable type="bool" name="allow_autonomous" class="Tunable" default="True" description="If checked, then this notification will be displayed even if its&#xA;owning interaction was initiated by autonomy. If unchecked, then the&#xA;notification is suppressed if the interaction is autonomous."/>
                  <TunableVariant type="None" name="dialog" class="TunableTestedVariant" default="single">
                    <TunableVariant type="None" name="single" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                      <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                        <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunablePlayAudio">
                            <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                            <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                            <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                            </TunableVariant>
                            <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                          <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                        </TunableList>
                        <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                        <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                        <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                            <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                            <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                              <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                            </TunableTuple>
                            <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableVariant>
                        <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                        </TunableVariant>
                        <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                        <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                        </TunableVariant>
                        <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                        <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                            <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                            <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                              <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                            </TunableTuple>
                            <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableVariant>
                        <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                          <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                          <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                            <TunableList name="variations" class="TunableList">
                              <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                            <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                              <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                <Tunable name="active_holiday" class="TunableExistance"/>
                                <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                  <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                    <Tunable name="current_level_name" class="TunableExistance"/>
                                    <Tunable name="current_level_salary" class="TunableExistance"/>
                                    <Tunable name="next_level_name" class="TunableExistance"/>
                                    <Tunable name="next_level_salary" class="TunableExistance"/>
                                    <Tunable name="previous_level_name" class="TunableExistance"/>
                                    <Tunable name="previous_level_salary" class="TunableExistance"/>
                                  </TunableVariant>
                                  <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                </TunableTuple>
                                <Tunable name="current_trends" class="TunableExistance"/>
                                <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                  <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                </TunableTuple>
                                <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                  <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                    <Tunable name="high_score" class="TunableExistance"/>
                                    <Tunable name="high_score_sim" class="TunableExistance"/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                </TunableTuple>
                                <Tunable name="interaction_cost" class="TunableExistance"/>
                                <Tunable name="interaction_payout" class="TunableExistance"/>
                                <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                </TunableTuple>
                                <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                </TunableTuple>
                                <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                  <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                </TunableTuple>
                                <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                  <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                    <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                      <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                      <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                        <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                        <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                      </TunableVariant>
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                      <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableTuple>
                                <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                  <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                    <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                      <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                    </TunableTuple>
                                    <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                      <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                        <Tunable name="disabled" class="TunableExistance"/>
                                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                      </TunableVariant>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                    <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                      <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                      <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                        <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                        <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                      </TunableVariant>
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                      <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableTuple>
                                <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                </TunableTuple>
                                <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                  <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                        </TunableVariant>
                        <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                        </TunableVariant>
                        <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                          <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableList>
                        <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                        <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                      </TunableTuple>
                      <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                    </TunableVariant>
                    <TunableTuple name="tested" class="Tunable_TestedSelector">
                      <TunableList name="records" class="TunableList">
                        <TunableTuple class="TunableTuple">
                          <TunableVariant type="None" name="item" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                            <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                              <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunablePlayAudio">
                                  <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                                  <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                                  <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                                  </TunableVariant>
                                  <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                                <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                              </TunableList>
                              <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                              <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                              <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                  <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                      <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                  <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                    <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                  </TunableTuple>
                                  <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableVariant>
                              <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                              </TunableVariant>
                              <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                              <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                              </TunableVariant>
                              <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                              <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                  <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                      <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                  <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                    <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                  </TunableTuple>
                                  <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableVariant>
                              <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                                <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                                  <TunableList name="variations" class="TunableList">
                                    <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                  </TunableList>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                                  <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                    <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                      <Tunable name="active_holiday" class="TunableExistance"/>
                                      <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                      <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                        <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                          <Tunable name="current_level_name" class="TunableExistance"/>
                                          <Tunable name="current_level_salary" class="TunableExistance"/>
                                          <Tunable name="next_level_name" class="TunableExistance"/>
                                          <Tunable name="next_level_salary" class="TunableExistance"/>
                                          <Tunable name="previous_level_name" class="TunableExistance"/>
                                          <Tunable name="previous_level_salary" class="TunableExistance"/>
                                        </TunableVariant>
                                        <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                      </TunableTuple>
                                      <Tunable name="current_trends" class="TunableExistance"/>
                                      <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                        <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                        <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                          <Tunable name="high_score" class="TunableExistance"/>
                                          <Tunable name="high_score_sim" class="TunableExistance"/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                      </TunableTuple>
                                      <Tunable name="interaction_cost" class="TunableExistance"/>
                                      <Tunable name="interaction_payout" class="TunableExistance"/>
                                      <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                      </TunableTuple>
                                      <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                      </TunableTuple>
                                      <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                        <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                      </TunableTuple>
                                      <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                        <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                          <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                            <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                            <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                              <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                              <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                            </TunableVariant>
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                            <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableTuple>
                                      <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                        <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                          <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                            <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                          </TunableTuple>
                                          <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                            <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                              <Tunable name="disabled" class="TunableExistance"/>
                                              <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                            </TunableVariant>
                                          </TunableTuple>
                                        </TunableVariant>
                                        <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                          <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                            <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                            <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                              <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                              <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                            </TunableVariant>
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                            <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableTuple>
                                      <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                      </TunableTuple>
                                      <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                        <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                              </TunableVariant>
                              <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                              </TunableVariant>
                              <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                                <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableList>
                              <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                              <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                            </TunableTuple>
                            <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                          </TunableVariant>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="bool" name="limit_to_one_notification" class="Tunable" default="False" description="If checked, this notification will only be displayed for the first&#xA;recipient subject. This is useful to prevent duplicates of the&#xA;notification from showing up when sending a notification to&#xA;LotOnwers or other Participant Types that have multiple Sims."/>
                  <TunableTuple name="success_chance" class="TunableSuccessChance" description="The percentage chance that this action will be applied.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="timing" class="TunableVariant" default="at_end" description="Determines the exact timing of the behavior, either at the beginning&#xA;of an interaction, the end, or when an xevt occurs in an animation&#xA;played as part of the interaction.">
                    <TunableTuple name="at_beginning" class="TunableTuple" description="The behavior should occur at the very beginning of the&#xA;interaction.  It will not be tightly synchronized visually with&#xA;animation.  This isn't a very common use case and would most&#xA;likely be used in an immediate interaction or to change hidden&#xA;state that is used for bookkeeping rather than visual&#xA;appearance.">
                      <TunableVariant type="None" name="offset_time" class="OptionalTunable" default="disabled" description="If enabled, the interaction will wait this amount of time&#xA;after the beginning before running the element.&#xA;&#xA;Only use this if absolutely necessary. Better alternatives&#xA;include using xevts, time based conditional action with&#xA;loot ops, and using outcomes.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="2" min="None" max="None" description="The interaction will wait this amount of time after the beginning before running the element" tuning_state="NeedsTuning"/>
                      </TunableVariant>
                    </TunableTuple>
                    <TunableTuple name="at_end" class="TunableTuple" description="The behavior should occur at the end of the interaction.  It&#xA;will not be tightly synchronized visually with animation.  An&#xA;example might be an object that gets dirty every time a Sim uses&#xA;it (so using a commodity change is overkill) but no precise&#xA;synchronization with animation is desired, as might be the case&#xA;with vomiting in the toilet.">
                      <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                    </TunableTuple>
                    <TunableTuple name="on_xevt" class="TunableTuple" description="The behavior should occur synchronized visually with an xevt in&#xA;an animation played as part of the interaction.  If for some&#xA;reason such an event doesn't occur, the behavior will occur at&#xA;the end of the interaction.  This is by far the most common use&#xA;case, as when a Sim flushes a toilet and the water level should&#xA;change when the actual flush animation and effects fire.">
                      <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                      <Tunable type="int" name="xevt_id" class="Tunable" default="100" tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                </TunableTuple>
              </TunableVariant>
              <TunableVariant type="None" name="notification_no_more_traits" class="OptionalTunable" default="disabled" description="Specify a notification that will be displayed when a Sim knows&#xA;all traits of another target Sim.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableNotificationElement" description="Show a notification to a Sim's player.">
                  <Tunable type="bool" name="allow_autonomous" class="Tunable" default="True" description="If checked, then this notification will be displayed even if its&#xA;owning interaction was initiated by autonomy. If unchecked, then the&#xA;notification is suppressed if the interaction is autonomous."/>
                  <TunableVariant type="None" name="dialog" class="TunableTestedVariant" default="single">
                    <TunableVariant type="None" name="single" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                      <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                        <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunablePlayAudio">
                            <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                            <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                            <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                            </TunableVariant>
                            <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                          <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                        </TunableList>
                        <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                        <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                        <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                            <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                            <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                              <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                            </TunableTuple>
                            <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableVariant>
                        <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                        </TunableVariant>
                        <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                        <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                        </TunableVariant>
                        <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                        <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                            <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                              </TunableList>
                            </TunableTuple>
                            <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                            <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                              <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                            </TunableTuple>
                            <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                              <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableVariant>
                        <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                          <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                          <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                            <TunableList name="variations" class="TunableList">
                              <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                            <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                              <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                <Tunable name="active_holiday" class="TunableExistance"/>
                                <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                  <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                    <Tunable name="current_level_name" class="TunableExistance"/>
                                    <Tunable name="current_level_salary" class="TunableExistance"/>
                                    <Tunable name="next_level_name" class="TunableExistance"/>
                                    <Tunable name="next_level_salary" class="TunableExistance"/>
                                    <Tunable name="previous_level_name" class="TunableExistance"/>
                                    <Tunable name="previous_level_salary" class="TunableExistance"/>
                                  </TunableVariant>
                                  <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                </TunableTuple>
                                <Tunable name="current_trends" class="TunableExistance"/>
                                <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                  <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                </TunableTuple>
                                <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                  <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                    <Tunable name="high_score" class="TunableExistance"/>
                                    <Tunable name="high_score_sim" class="TunableExistance"/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                </TunableTuple>
                                <Tunable name="interaction_cost" class="TunableExistance"/>
                                <Tunable name="interaction_payout" class="TunableExistance"/>
                                <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                </TunableTuple>
                                <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                </TunableTuple>
                                <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                  <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                </TunableTuple>
                                <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                  <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                    <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                      <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                      <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                        <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                        <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                      </TunableVariant>
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                      <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableTuple>
                                <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                  <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                    <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                      <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                    </TunableTuple>
                                    <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                      <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                        <Tunable name="disabled" class="TunableExistance"/>
                                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                      </TunableVariant>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                    <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                      <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                      <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                        <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                        <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                      </TunableVariant>
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                    </TunableTuple>
                                    <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                      <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                      <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableTuple>
                                <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                </TunableTuple>
                                <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                  <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                        </TunableVariant>
                        <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                        </TunableVariant>
                        <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                          <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                            <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                              <Tunable name="disabled" class="TunableExistance"/>
                              <TunableTuple name="enabled" class="TunableTuple">
                                <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                  <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                    <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                      <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                    </TunableTuple>
                                    <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                      <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                      <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                    </TunableTuple>
                                    <Tunable name="none" class="TunableExistance"/>
                                    <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                    <TunableTuple name="string" class="TunableTuple" description="A string.">
                                      <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableList>
                                <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                              </TunableTuple>
                            </TunableVariant>
                            <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                            <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                          </TunableTuple>
                        </TunableList>
                        <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                        <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                      </TunableTuple>
                      <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                    </TunableVariant>
                    <TunableTuple name="tested" class="Tunable_TestedSelector">
                      <TunableList name="records" class="TunableList">
                        <TunableTuple class="TunableTuple">
                          <TunableVariant type="None" name="item" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                            <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                              <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunablePlayAudio">
                                  <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                                  <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                                  <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                                  </TunableVariant>
                                  <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                                <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                              </TunableList>
                              <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                              <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                              <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                  <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                      <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                  <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                    <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                  </TunableTuple>
                                  <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableVariant>
                              <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                              </TunableVariant>
                              <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                              <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                              </TunableVariant>
                              <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                              <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                  <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                      <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                    </TunableList>
                                  </TunableTuple>
                                  <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                  <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                    <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                  </TunableTuple>
                                  <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                    <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                      <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableVariant>
                              <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                                <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                                  <TunableList name="variations" class="TunableList">
                                    <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                  </TunableList>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                                  <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                    <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                      <Tunable name="active_holiday" class="TunableExistance"/>
                                      <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                      <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                        <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                          <Tunable name="current_level_name" class="TunableExistance"/>
                                          <Tunable name="current_level_salary" class="TunableExistance"/>
                                          <Tunable name="next_level_name" class="TunableExistance"/>
                                          <Tunable name="next_level_salary" class="TunableExistance"/>
                                          <Tunable name="previous_level_name" class="TunableExistance"/>
                                          <Tunable name="previous_level_salary" class="TunableExistance"/>
                                        </TunableVariant>
                                        <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                      </TunableTuple>
                                      <Tunable name="current_trends" class="TunableExistance"/>
                                      <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                        <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                        <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                          <Tunable name="high_score" class="TunableExistance"/>
                                          <Tunable name="high_score_sim" class="TunableExistance"/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                      </TunableTuple>
                                      <Tunable name="interaction_cost" class="TunableExistance"/>
                                      <Tunable name="interaction_payout" class="TunableExistance"/>
                                      <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                      </TunableTuple>
                                      <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                      </TunableTuple>
                                      <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                        <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                      </TunableTuple>
                                      <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                        <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                          <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                            <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                            <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                              <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                              <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                            </TunableVariant>
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                            <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableTuple>
                                      <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                        <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                          <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                            <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                          </TunableTuple>
                                          <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                            <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                              <Tunable name="disabled" class="TunableExistance"/>
                                              <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                            </TunableVariant>
                                          </TunableTuple>
                                        </TunableVariant>
                                        <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                          <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                            <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                            <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                              <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                              <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                            </TunableVariant>
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                          </TunableTuple>
                                          <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                            <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableTuple>
                                      <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                      </TunableTuple>
                                      <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                        <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                              </TunableVariant>
                              <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                              </TunableVariant>
                              <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                                <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                                  <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <TunableTuple name="enabled" class="TunableTuple">
                                      <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                        <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                          <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                            <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                          </TunableTuple>
                                          <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                            <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                            <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                          </TunableTuple>
                                          <Tunable name="none" class="TunableExistance"/>
                                          <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                          <TunableTuple name="string" class="TunableTuple" description="A string.">
                                            <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                          </TunableTuple>
                                        </TunableVariant>
                                      </TunableList>
                                      <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                    </TunableTuple>
                                  </TunableVariant>
                                  <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                                  <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                </TunableTuple>
                              </TunableList>
                              <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                              <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                            </TunableTuple>
                            <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                          </TunableVariant>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="bool" name="limit_to_one_notification" class="Tunable" default="False" description="If checked, this notification will only be displayed for the first&#xA;recipient subject. This is useful to prevent duplicates of the&#xA;notification from showing up when sending a notification to&#xA;LotOnwers or other Participant Types that have multiple Sims."/>
                  <TunableTuple name="success_chance" class="TunableSuccessChance" description="The percentage chance that this action will be applied.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="timing" class="TunableVariant" default="at_end" description="Determines the exact timing of the behavior, either at the beginning&#xA;of an interaction, the end, or when an xevt occurs in an animation&#xA;played as part of the interaction.">
                    <TunableTuple name="at_beginning" class="TunableTuple" description="The behavior should occur at the very beginning of the&#xA;interaction.  It will not be tightly synchronized visually with&#xA;animation.  This isn't a very common use case and would most&#xA;likely be used in an immediate interaction or to change hidden&#xA;state that is used for bookkeeping rather than visual&#xA;appearance.">
                      <TunableVariant type="None" name="offset_time" class="OptionalTunable" default="disabled" description="If enabled, the interaction will wait this amount of time&#xA;after the beginning before running the element.&#xA;&#xA;Only use this if absolutely necessary. Better alternatives&#xA;include using xevts, time based conditional action with&#xA;loot ops, and using outcomes.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="2" min="None" max="None" description="The interaction will wait this amount of time after the beginning before running the element" tuning_state="NeedsTuning"/>
                      </TunableVariant>
                    </TunableTuple>
                    <TunableTuple name="at_end" class="TunableTuple" description="The behavior should occur at the end of the interaction.  It&#xA;will not be tightly synchronized visually with animation.  An&#xA;example might be an object that gets dirty every time a Sim uses&#xA;it (so using a commodity change is overkill) but no precise&#xA;synchronization with animation is desired, as might be the case&#xA;with vomiting in the toilet.">
                      <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                    </TunableTuple>
                    <TunableTuple name="on_xevt" class="TunableTuple" description="The behavior should occur synchronized visually with an xevt in&#xA;an animation played as part of the interaction.  If for some&#xA;reason such an event doesn't occur, the behavior will occur at&#xA;the end of the interaction.  This is by far the most common use&#xA;case, as when a Sim flushes a toilet and the water level should&#xA;change when the actual flush animation and effects fire.">
                      <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                      <Tunable type="int" name="xevt_id" class="Tunable" default="100" tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="traits" class="TunableVariant" default="specified" description="The traits that the subject may learn about the target.">
                <TunableTuple name="all" class="TunableTuple" description="The subject Sim may learn all of the target's traits."/>
                <TunableTuple name="random" class="TunableTuple" description="Specify a random number of traits to learn.">
                  <Tunable type="int" name="count" class="TunableRange" default="1" min="1" max="None" description="The number of potential traits the subject may learn about&#xA;the target." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="specified" class="TunableTuple" description="Specify individual traits that can be learned.">
                  <TunableList name="potential_traits" class="TunableList" description="A list of traits that the subject may learn about the target.">
                    <Tunable type="trait" class="TunableReference" allow_none="False" restrict="Trait"/>
                  </TunableList>
                </TunableTuple>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="life_extension" class="TunableLifeExtensionLootOp" description="This loot will grant a life extension or add bonus days.">
              <Tunable type="int" name="bonus_days" class="TunableRange" default="1" min="0" max="None" description="Number of bonus days to be granted to the target's life." tuning_state="NeedsTuning"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="int" name="days_from_aging_progress" class="TunableRange" default="0" min="0" max="None" description="Number of days to restore to the target's aging progress in their&#xA;current category.&#xA;&#xA;If a target is already at the minimum value of their category's age&#xA;progress, this will not change their age." tuning_state="NeedsTuning"/>
              <Tunable type="bool" name="reset_aging_progress_in_category" class="Tunable" default="False" description="If checked, this loot op will also reset the target's aging&#xA;progress in their current age category."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="lock_door" class="TunableLockDoor" description="An operation that locks a door.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ClearLock" name="clear_existing_locks" class="TunableEnumEntry" default="CLEAR_ALL" static_entries="objects-components-portal_locking_enums.ClearLock" description="Which locks should be cleared before adding the new lock data."/>
              <TunableVariant type="None" name="lock_data" class="TunableVariant" default="lock_all_with_simid_exception">
                <TunableTuple name="lock_all_with_genus_exception" class="TunableLockAllWithGenusException" description="Lock all Sims except those that match the tuned genus.">
                  <TunableVariant type="None" name="ages" class="OptionalTunable" default="unspecified" description="The Sim must be one of the specified ages.">
                    <TunableList name="specified" class="TunableEnumSet" default="TEEN,YOUNGADULT,ADULT,ELDER" description="The Sim must be one of the specified ages." unique_entries="true">
                      <TunableEnum type="Age" class="TunableEnumEntry" default="ADULT" static_entries="sims-sim_info_types.Age"/>
                    </TunableList>
                    <Tunable name="unspecified" class="TunableExistance"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="gender" class="OptionalTunable" default="unspecified" description="The Sim must be of the specified gender.">
                    <TunableEnum type="Gender" name="specified" class="TunableEnumEntry" default="None" static_entries="sims-sim_info_types.Gender" description="The Sim must be of the specified gender."/>
                    <Tunable name="unspecified" class="TunableExistance"/>
                  </TunableVariant>
                  <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                  <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                  <TunableEnum type="MatchType" name="match_type" class="TunableEnumEntry" default="MATCH_ALL" static_entries="sims-sim_info_tests.MatchType" description="If MATCH_ALL is set, test will pass if Sim matches with all &#xA;enabled tuned genus.&#xA; &#xA;If MATCH_ANY is set, test will pass if Sim matches with one of the &#xA;enabled tuned genus."/>
                  <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                  <TunableVariant type="None" name="species" class="OptionalTunable" default="unspecified" description="The Sim must be one of the specified species.">
                    <TunableList name="specified" class="TunableEnumSet" description="The Sim must be one of the specified species." unique_entries="true">
                      <TunableEnum type="Species" class="TunableEnumEntry" default="HUMAN" static_entries="sims-sim_info_types.Species"/>
                    </TunableList>
                    <Tunable name="unspecified" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="lock_all_with_simid_exception" class="TunableLockAllWithSimIdExceptionData" description="The lock data will reject anyone who's not in the exception sim id list.">
                  <Tunable type="bool" name="except_actor" class="Tunable" default="False" description="If we want this lock data to have this actor as exception sim."/>
                  <Tunable type="bool" name="except_household" class="Tunable" default="False" description="If we want this lock data to have actor's household as exception sims."/>
                  <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                  <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                  <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                </TunableTuple>
                <TunableTuple name="lock_all_with_situation_job_exception" class="TunableLockAllWithSituationJobExceptionData">
                  <Tunable type="bool" name="except_business_employee" class="Tunable" default="False" description="If true, the business store employee will have exception to the door."/>
                  <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                  <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                  <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                  <TunableTuple name="situation_job_test" class="TunableSituationJobTest" description="The test to determine whether this sim can pass or not.">
                    <Tunable type="bool" name="negate" class="Tunable" default="False" description="If checked then the test result will be reversed, so it will&#xA;test to see if they are not in a job or not in role state&#xA;that has matching tags."/>
                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The subject of this situation job test."/>
                    <TunableList name="role_tags" class="TunableSet" description="The  participant must have a job that matches the role_tags or&#xA;have the situation_job." unique_entries="true">
                      <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" pack_safe="True"/>
                    </TunableList>
                    <TunableList name="situation_jobs" class="TunableSet" description="The participant must have this job in this list or a job that&#xA;matches the role_tags." unique_entries="true">
                      <Tunable type="situation_job" class="TunableReference" allow_none="False" pack_safe="True"/>
                    </TunableList>
                    <TunableVariant type="None" name="tooltip" class="OptionalTunable" default="disabled" description="Reason of failure.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="Reason of failure."/>
                    </TunableVariant>
                  </TunableTuple>
                </TunableTuple>
                <TunableTuple name="lock_ranked_statistic" class="TunableLockRankedStatisticData" description="The lock data represent ranked statistic test. Sim that can pass the the&#xA;ranked statistic test on the data can pass this lock.">
                  <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                  <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                  <TunableTuple name="rank_threshold" class="TunableThreshold" description="Sims that have ranked statistic's value inside the threshold are &#xA;allowed to traverse the portal.">
                    <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                    <Tunable type="int" name="value" class="TunableRange" default="1" min="0" max="None" description="The number that describes the threshold." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <Tunable type="statistic" name="ranked_stat" class="TunableReference" description="The ranked statistic we are operating on. Sims won't be allowed to&#xA;traverse if they don't have this statistic." allow_none="False" restrict="RankedStatistic"/>
                  <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                </TunableTuple>
              </TunableVariant>
              <Tunable type="bool" name="replace_same_lock_type" class="Tunable" default="True" description="If True, it will replace the same type of lock data in the locking&#xA;component, otherwise it will update the existing data."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The door to lock."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="looping_loot_ops" class="TunableLoopingLootOp" description="A loot that allows a tech designer to loop through a specified set of &#xA;participants via a participant type (for instance ObjectChildren) and apply&#xA;loots to each of those objects using existing loots.&#xA;&#xA;An example would be the Family Bulletin Board where a Sim that reads a note&#xA;left for them and gets a relationship boost/hit depending on what kind of note&#xA;it is. This loot allows the tech designer to loop through all the notes on&#xA;the board and test for a specific relationship between the note and the Sim&#xA;and award a relationship change between the actor and the person that wrote&#xA;the note (which is stored on the note as the owner).">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableList name="loots_to_apply" class="TunableSet" description="A list of loot action references to apply to each of the objects &#xA;specified by the subject participant type on this loop." unique_entries="true">
                <Tunable type="action" class="TunableReference" description="A reference to a loot to apply to any object returned by &#xA;the specified ParticipantType in Subject. To reference the new&#xA;object that is the current object in the loop use the&#xA;ParticipantType.OBJECT option." allow_none="False"/>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="make_pet_missing" class="TunableMakePetMissing" description="A loot action that makes pets go missing. ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="money_loot" class="TunableMoneyChange" description="Factory created by tuning to represent Simoleon loot payouts.    ">
              <TunableVariant type="None" name="amount" class="TunableLiteralOrRandomValue" default="literal" description="The amount of Simoleons awarded. The value will be rounded to the&#xA;closest integer. When two integers are equally close, rounding is done&#xA;towards the even one (e.g. 0.5 -&gt; 0, 1.5 -&gt; 2).">
                <TunableTuple name="literal" class="TunableIntervalLiteral" description="A literal value that is to be used as the lower &#xA;and upper bound of an interval. This allows both literal and &#xA;range interval tunings in the same TunableVariant without &#xA;having to manually set the lower and upper bounds to the same&#xA;value.">
                  <Tunable type="float" name="value" class="TunableRange" default="10" min="0" max="None" description="The upper and lower bounds." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="random_in_range" class="TunableInterval" description="A tunable interval between lower_bound and upper_bound.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="10" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="10" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="display_to_user" class="Tunable" default="False" description="If true, the amount will be displayed in the interaction name."/>
              <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                  <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                    <Tunable name="raw_value" class="TunableExistance"/>
                    <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableList>
                  </TunableVariant>
                  <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                </TunableTuple>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="motherplant_battle_change" class="TunableMotherplantBattleSituationStateChange" description="A loot that modifies the state of the motherplant battle situation.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="situation" name="motherplant_situation" class="TunableReference" description="The motherplant battle situation that we will be changing the&#xA;state of." allow_none="False"/>
              <TunableEnum type="MotherplantBattleStates" name="situation_state" class="TunableEnumEntry" default="BASIC" static_entries="situations-complex-mother_plant_battle_ops.MotherplantBattleStates" description="Situation state for the motherplant that we will set." invalid_entries="BASIC"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="name_reset" class="TunableNameResetLootOp" description="This loot will reset the custom name and description which been given to&#xA;the object. Object must have a NameComponent attached to it for this loot &#xA;operation to be valid.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="reset_description" class="Tunable" default="False" description="If checked, it will reset the custom description of the name &#xA;component."/>
              <Tunable type="bool" name="reset_name" class="Tunable" default="True" description="If checked, it will reset the custom name of the name component."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="narrative" class="TunableNarrativeLootOp" description="Loot operation that affects narratives.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="op_type" class="TunableVariant" default="trigger_event">
                <TunableTuple name="end_narrative" class="Tunable_EndNarrativeOp" description="End a narrative. Use for stand-alone narratives that don't transition&#xA;to another narrative via a narrative event.">
                  <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                </TunableTuple>
                <TunableTuple name="reset_completion" class="Tunable_ResetNarrativeCompletionOp" description="Resets the completion status of a narrative that has been completed.">
                  <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                </TunableTuple>
                <TunableTuple name="start_narrative" class="Tunable_StartNarrativeOp" description="Start a narrative. Use for stand-alone narratives that don't start&#xA;based off a narrative event. ">
                  <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                </TunableTuple>
                <TunableTuple name="trigger_event" class="Tunable_TriggerEventOp" description="Trigger a narrative event. This is the recommended and optimized way &#xA;to transition between narratives.">
                  <TunableEnum type="NarrativeEvent" name="event" class="TunableEnumEntry" default="INVALID" dynamic_entries="narrative-narrative_enums.NarrativeEvent._elements" static_entries="narrative-narrative_enums.NarrativeEvent" description="Event of interest." invalid_entries="INVALID"/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="new_crime" class="TunableNewCrimeLootOp" description="An operation that starts a new crime for the detective career.">
              <Tunable type="career" name="career_reference" class="TunableReference" description="A reference to the detective career that keeps track of what crime&#xA;is currently being tracked." allow_none="False" restrict="DetectiveCareer"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <Tunable name="none" class="TunableExistance"/>
            <TunableTuple name="normalize_stat" class="TunableNormalizeStatisticsOp" description="A loot operation that normalizes the statistics listed between values found on two subjects.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="float" name="normalize_percent" class="TunablePercent" default="100" min="0" max="100" description="In seeking the average value, this is the percent of movement toward the average value &#xA;the stat will move to achieve the new value. For example, if you have a Sim with 50 &#xA;fun, and a Sim with 100 fun, and want to normalize them exactly halfway to their &#xA;average of 75, tune this to 100%. A value of 50% would move one Sim to 67.5 and the other&#xA;to 77.5"/>
              <TunableList name="stats_to_normalize" class="TunableList" description="Stats to be affected by the normalization.">
                <Tunable type="statistic" class="TunableReference" allow_none="False" restrict="Commodity"/>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The Sim from which to transfer the listed stats from."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="notification_and_dialog" class="TunableDialogLootOp" description="An operation that displays a dialog.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="dialog" class="TunableVariant" default="notification" description="Type of dialog to show.">
                <TunableTuple name="aspiration_progress" class="TunableUiDialogAspirationProgress" description="Display a dialog that will show the Sim's progress towards one&#xA;or more aspirations.">
                  <TunableList name="aspirations" class="TunableList" description="A list of aspirations we are tracking to show progress for in the&#xA;dialog.">
                    <Tunable type="aspiration" class="TunableReference" description="An aspiration we want to show progress for.&#xA;&#xA;Currently, only Career Aspirations are supported." allow_none="False" restrict="AspirationCareer"/>
                  </TunableList>
                  <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunablePlayAudio">
                      <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                      <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                      <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                      </TunableVariant>
                      <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                    <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                  </TunableList>
                  <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                  <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                  </TunableVariant>
                  <Tunable type="bool" name="is_special_dialog" class="Tunable" default="False" description="If checked, UI will treat this as a special ok or ok/cancel dialog &#xA;and represent the ok or ok/cancel options in a special way. &#xA;They will use the text as a tooltip for ok or ok/cancel options &#xA;and use particular icons for the buttons."/>
                  <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                  <TunableVariant type="None" name="progress_description" class="OptionalTunable" default="disabled" description="If enabled, we will replace the description for the aspiration with&#xA;this text, which has tokens for the progress.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableTuple" description="Tuning for the description to show aspiration progress.">
                      <Tunable type="int" name="complete" class="TunableLocalizedString" default="0x0" description="The localized description for a completed aspiration.&#xA;Tokens:&#xA;0: Sim&#xA;1: # Progress Completed&#xA;2: # Goal&#xA;Example: &quot;Progress (1.Number/2.Number)&quot;"/>
                      <Tunable type="int" name="incomplete" class="TunableLocalizedString" default="0x0" description="The localized description for an incomplete aspiration.&#xA;Tokens:&#xA;0: Sim&#xA;1: # Progress Completed&#xA;2: # Goal&#xA;Example: &quot;Progress (1.Number/2.Number)&quot;"/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                    <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                    <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                      <TunableList name="variations" class="TunableList">
                        <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="int" name="text_ok" class="TunableLocalizedString" default="0xd977b872" description="The OK button text."/>
                  <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                      <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                        <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                          <Tunable name="active_holiday" class="TunableExistance"/>
                          <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                          <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                            <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                              <Tunable name="current_level_name" class="TunableExistance"/>
                              <Tunable name="current_level_salary" class="TunableExistance"/>
                              <Tunable name="next_level_name" class="TunableExistance"/>
                              <Tunable name="next_level_salary" class="TunableExistance"/>
                              <Tunable name="previous_level_name" class="TunableExistance"/>
                              <Tunable name="previous_level_salary" class="TunableExistance"/>
                            </TunableVariant>
                            <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                          </TunableTuple>
                          <Tunable name="current_trends" class="TunableExistance"/>
                          <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                            <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                          </TunableTuple>
                          <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                            <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                              <Tunable name="high_score" class="TunableExistance"/>
                              <Tunable name="high_score_sim" class="TunableExistance"/>
                            </TunableVariant>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                          </TunableTuple>
                          <Tunable name="interaction_cost" class="TunableExistance"/>
                          <Tunable name="interaction_payout" class="TunableExistance"/>
                          <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                          </TunableTuple>
                          <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                          </TunableTuple>
                          <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                            <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                          </TunableTuple>
                          <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                            <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                              <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                              </TunableTuple>
                              <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                          </TunableTuple>
                          <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                            <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                  </TunableVariant>
                  <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                    <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableList>
                  <Tunable type="bool" name="use_description_for_tooltip" class="Tunable" default="False" description="If enabled, we will use the aspiration description as the&#xA;tooltip."/>
                </TunableTuple>
                <TunableTuple name="dialog_ok" class="TunableUiDialogOk" description="Display a dialog with an okay button.">
                  <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunablePlayAudio">
                      <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                      <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                      <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                      </TunableVariant>
                      <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                    <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                  </TunableList>
                  <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                  <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                  </TunableVariant>
                  <Tunable type="bool" name="is_special_dialog" class="Tunable" default="False" description="If checked, UI will treat this as a special ok or ok/cancel dialog &#xA;and represent the ok or ok/cancel options in a special way. &#xA;They will use the text as a tooltip for ok or ok/cancel options &#xA;and use particular icons for the buttons."/>
                  <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                  <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                    <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                    <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                      <TunableList name="variations" class="TunableList">
                        <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="int" name="text_ok" class="TunableLocalizedString" default="0xd977b872" description="The OK button text."/>
                  <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                      <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                        <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                          <Tunable name="active_holiday" class="TunableExistance"/>
                          <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                          <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                            <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                              <Tunable name="current_level_name" class="TunableExistance"/>
                              <Tunable name="current_level_salary" class="TunableExistance"/>
                              <Tunable name="next_level_name" class="TunableExistance"/>
                              <Tunable name="next_level_salary" class="TunableExistance"/>
                              <Tunable name="previous_level_name" class="TunableExistance"/>
                              <Tunable name="previous_level_salary" class="TunableExistance"/>
                            </TunableVariant>
                            <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                          </TunableTuple>
                          <Tunable name="current_trends" class="TunableExistance"/>
                          <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                            <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                          </TunableTuple>
                          <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                            <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                              <Tunable name="high_score" class="TunableExistance"/>
                              <Tunable name="high_score_sim" class="TunableExistance"/>
                            </TunableVariant>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                          </TunableTuple>
                          <Tunable name="interaction_cost" class="TunableExistance"/>
                          <Tunable name="interaction_payout" class="TunableExistance"/>
                          <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                          </TunableTuple>
                          <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                          </TunableTuple>
                          <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                            <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                          </TunableTuple>
                          <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                            <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                              <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                              </TunableTuple>
                              <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                          </TunableTuple>
                          <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                            <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                  </TunableVariant>
                  <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                    <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="notification" class="TunableUiDialogNotification" description="This text will display in a notification pop up when completed.">
                  <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunablePlayAudio">
                      <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                      <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                      <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                      </TunableVariant>
                      <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                    <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                  </TunableList>
                  <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                  <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                  <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                  </TunableVariant>
                  <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                  <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                  </TunableVariant>
                  <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                  <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                      <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                          <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                      <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                        <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                      </TunableTuple>
                      <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                        <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                          <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableVariant>
                  <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                    <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                    <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                      <TunableList name="variations" class="TunableList">
                        <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                      <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                        <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                          <Tunable name="active_holiday" class="TunableExistance"/>
                          <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                          <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                            <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                              <Tunable name="current_level_name" class="TunableExistance"/>
                              <Tunable name="current_level_salary" class="TunableExistance"/>
                              <Tunable name="next_level_name" class="TunableExistance"/>
                              <Tunable name="next_level_salary" class="TunableExistance"/>
                              <Tunable name="previous_level_name" class="TunableExistance"/>
                              <Tunable name="previous_level_salary" class="TunableExistance"/>
                            </TunableVariant>
                            <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                          </TunableTuple>
                          <Tunable name="current_trends" class="TunableExistance"/>
                          <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                            <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                          </TunableTuple>
                          <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                            <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                              <Tunable name="high_score" class="TunableExistance"/>
                              <Tunable name="high_score_sim" class="TunableExistance"/>
                            </TunableVariant>
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                          </TunableTuple>
                          <Tunable name="interaction_cost" class="TunableExistance"/>
                          <Tunable name="interaction_payout" class="TunableExistance"/>
                          <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                            <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                          </TunableTuple>
                          <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                          </TunableTuple>
                          <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                            <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                          </TunableTuple>
                          <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                            <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                              <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                              </TunableTuple>
                              <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                </TunableVariant>
                              </TunableTuple>
                            </TunableVariant>
                            <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                              <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                  <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                  <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                              </TunableTuple>
                              <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                              </TunableTuple>
                              <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableTuple>
                          <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                          </TunableTuple>
                          <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                            <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                            <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableList>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                  </TunableVariant>
                  <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                    <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                      <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableTuple">
                          <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                            <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                              <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                              </TunableTuple>
                              <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                              <Tunable name="none" class="TunableExistance"/>
                              <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                              <TunableTuple name="string" class="TunableTuple" description="A string.">
                                <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                          <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                        </TunableTuple>
                      </TunableVariant>
                      <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                      <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                    </TunableTuple>
                  </TunableList>
                  <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                  <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="object_relationship" class="TunableObjectRelationshipLootOp" description="This loot will modify the relationship between an object and a Sim.&#xA;The target object must have an ObjectRelationshipComponent attached&#xA;to it for this loot operation to be valid.">
              <Tunable type="bool" name="add_if_nonexistant" class="Tunable" default="True" description="If checked, this relationship will be added if it doesn't currently&#xA;exist.  If unchecked, it will not be added if it doesn't currently&#xA;exist."/>
              <Tunable type="int" name="amount_to_add" class="Tunable" default="0" description="The amount tuned here will be added to the relationship between the&#xA;tuned object and Sim." tuning_state="NeedsTuning"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="remove_relationship" class="Tunable" default="False" description="If checked, the relationship between the tuned object and Sim will&#xA;be remove if it currently exists."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The object whose relationship to modify."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="object_rewards" class="TunableObjectRewardsOperation" description="Loot operation to give multiple objects to a sim as a reward from an &#xA;interaction.&#xA;All objects may have its own weight to calculate which should be created">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="force_family_inventory" class="Tunable" default="False" description="If Enabled, the rewards object(s) will be put in the family &#xA;inventory no matter what.  If not enabled, the object will try to&#xA;be added to the sim inventory, if that is not possible it will be&#xA;added to the family inventory as an automatic fallback."/>
              <Tunable type="bool" name="make_sim_owner" class="Tunable" default="False" description="If enabled, the actor of the loot will be set as the owner of the&#xA;object"/>
              <Tunable type="bool" name="needs_compositing" class="Tunable" default="False" description="If enabled, the item will be created then have an image composited&#xA;before it appears in inventory."/>
              <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="If enabled, a notification will be displayed when this object reward&#xA;is granted to a Sim.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableVariant type="None" name="enabled" class="TunableNotificationSnippet" default="literal" description="The notification to display when this object reward is granted&#xA;to the Sim. There is one additional token provided: a string&#xA;representing a bulleted list of all individual rewards granted.&#xA; (This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.)">
                  <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                    <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                    </TunableVariant>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                    <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                  </TunableTuple>
                  <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                </TunableVariant>
              </TunableVariant>
              <TunableTuple name="object_rewards" class="TunableObjectRewardsTuning" description="Object rewards when running the loot.  Rewards objects will be created&#xA;and sent to the tuned inventory.">
                <Tunable type="int" name="quantity" class="TunableRange" default="10" min="0" max="None" description="Quantity of objects to create when loot action gets triggered.&#xA;The result of this loot will do a quantity number of random checks&#xA;to see which reward objects it will give.&#xA;e.g. quantity 2 will do 2 random checks using the weights tuned &#xA;to see which items it will give each time." tuning_state="NeedsTuning"/>
                <TunableList name="reward_objects" class="TunableList" min="1" description="List of pair of object reference-weight for the random calculation&#xA;e.g. Pair1[3,obj1] Pair2[7,obj2] means obj1 has a 30% chance of &#xA;being picked and obj2 has 70% chance of being picked">
                  <TunableTuple class="TunableTuple">
                    <TunableVariant type="None" name="quantity" class="OptionalTunable" default="one_of_each" description="If this group of reward objects is chosen, this is the&#xA;number of rewards (chosen randomly) to give from this list.&#xA;If this is set to &quot;One of Each&quot; then the player will get one&#xA;of everything in the list.">
                      <Tunable name="one_of_each" class="TunableExistance"/>
                      <Tunable type="int" name="specific_amount" class="TunableRange" default="1" min="1" max="None" description="The number of random objects to give from this list.&#xA;This does mean the same object could be given multiple&#xA;times. This can also be tuned to a value higher than the&#xA;number of objects in the list." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableList name="reward" class="TunableList" min="1" description="List of objects to reward.  When the random check picks &#xA;this value from the weight calculation it will give all&#xA;the items tuned on this list.">
                      <TunableVariant type="None" class="TunableVariant" default="specify_definition">
                        <TunableTuple name="specify_definition" class="TunableObjectCreator" description="Object reference of the type of game object needed.">
                          <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object to be created." allow_none="False" pack_safe="True"/>
                        </TunableTuple>
                        <TunableTuple name="specify_recipe" class="TunableRecipeCreator" description="Recipe to be created.">
                          <Tunable type="recipe" name="recipe" class="TunableReference" description="Recipe to produce an object with." allow_none="False"/>
                          <TunableList name="weighted_quality" class="TunableList" description="A list of weighted quality in which the object will be created.&#xA;&#xA;If empty, it will apply a default quality.">
                            <TunableTuple class="TunableTuple" description="A possible level of quality for this item that will be generated.&#xA;This will be randomly chosen based off weight against other items in the list.">
                              <Tunable type="object_state" name="quality" class="TunableReference" allow_none="False" restrict="CommodityBasedObjectStateValue"/>
                              <Tunable type="int" name="weight" class="TunableRange" default="1" min="1" max="None" tuning_state="NeedsTuning"/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableList>
                    <TunableList name="states_on_reward_object" class="TunableList" description="List of states to set on the object reward after it has &#xA;been created.">
                      <Tunable type="object_state" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                    </TunableList>
                    <Tunable type="int" name="weight" class="TunableRange" default="1" min="0" max="None" description="Weight that object will have on the probability calculation &#xA;of which objects will be created." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="place_in_mailbox" class="Tunable" default="False" description="If Enabled, the rewards object(s) will be put in the mailbox if&#xA;the active lot is the sims home lot"/>
              <TunableVariant type="None" name="store_sim_info_on_reward" class="OptionalTunable" default="disabled" description="If enabled, a sim info will be stored on the reward object. This &#xA;is mostly used for the cow plant life essence, which will store the&#xA;sim info of the sim from which the life essence was drained.&#xA;&#xA;Ex: For cow plant's milk life essence, we want to transfer the dead&#xA;sim's sim info from the cow plant to the created essence drink.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTuple" description="            &#xA;                ">
                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of this interaction which has a &#xA;StoredSimInfoComponent. The stored sim info will be transferred&#xA;to the created rewards and will then be removed from the source."/>
                  <Tunable type="bool" name="transfer_from_stored_sim_info" class="Tunable" default="True" description="If checked then the sim info that will be stored on the &#xA;reward is going to be transfered from the participants&#xA;StoredSimInfoComponent. The stored sim info will be transferred&#xA;to the created rewards and will then be removed from the source.&#xA;&#xA;If not checked then the participant sim info will be &#xA;stored directly onto the object, instead of transfered."/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="oneshot_broadcaster" class="TunableBroadcasterOneShotLootOp" description="Triggers a one-shot broadcaster effect.  This MUST be an immediate&#xA;broadcaster and tuned as an 'On Enter' broadcaster.">
              <TunableTuple name="broadcaster_request" class="TunableBroadcasterRequest" description="The broadcaster request to run.">
                <TunableList name="broadcaster_types" class="TunableTestedList" description="A list of broadcasters to request.">
                  <TunableTuple class="TunableTuple" description="An entry in this tested list.">
                    <Tunable type="broadcaster" name="item" class="TunableReference" description="The broadcasters to request." allow_none="False" pack_safe="True"/>
                    <Tunable type="bool" name="stop_processing" class="Tunable" default="False" description="If checked, no other element from this list is considered if&#xA;this element passes its associated test."/>
                    <TdescFragTag name="test" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="post_missing_pet_alert" class="TunablePostMissingPetAlert" description="A loot action to post an alert about a missing pet. ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="reaction" class="TunableReactionLootOp" description="An operation to play Reaction animations.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="mixer_reaction" class="OptionalTunable" default="disabled" description="A mixer interaction to push on the subject. This will be attached&#xA;to the posture's SI so it must meet the constraints of the posture&#xA;or else it will not run. This interaction should primarily be used&#xA;to animate the Sim. Mixers are useful for reactions because we can&#xA;inject them into staging SIs.&#xA;&#xA;If an SI Reaction is tuned in addition to this mixer, then the&#xA;mixer will act as a fallback to the SI.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableReactionMixer" description="&quot;&#xA;A reaction mixer that is pushed when this loot op runs. It will&#xA;only run if an SI reaction is not tuned, fails to run, or does&#xA;not run in a timely manner.">
                  <Tunable type="interaction" name="affordance" class="TunableReference" description="The affordance to push on the subject." allow_none="False" pack_safe="True" restrict="MixerInteraction"/>
                  <TunableVariant type="None" name="affordance_target" class="OptionalTunable" default="disabled" description="If enabled, the pushed interaction will target a specified&#xA;participant.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeReaction" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeReaction" description="The participant to be targeted by the pushed interaction."/>
                  </TunableVariant>
                  <TunableVariant type="None" name="super_affordance_override" class="OptionalTunable" default="disabled" description="If enabled, this super affordance will be the SI for the reaction&#xA;mixer. If disabled, we use the posture's SI. &#xA;&#xA;Note: This should only be tuned if we are trying to push a&#xA;SocialMixerInteraction as a reaction mixer. In that case you want&#xA;to push its SocialSuperInteraction.&#xA;&#xA;Furthermore, if the pusher of this reaction is a Social interaction&#xA;whose SI matches the override type, we'll reuse that SI as the&#xA;mixer's SI.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="interaction" name="enabled" class="TunableReference" description="The super affordance to use for this reaction mixer." allow_none="False" pack_safe="True" restrict="SocialSuperInteraction"/>
                  </TunableVariant>
                </TunableTuple>
              </TunableVariant>
              <TunableVariant type="None" name="si_reaction" class="OptionalTunable" default="disabled" description="A Super Interaction that is pushed on the Subject when this&#xA;loot op is applied. If the SI cannot displace other&#xA;interactions in the queue and a mixer reaction is tuned, then&#xA;the mixer will get pushed.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableReactionSi" description="A Super Interaction that is pushed on the Subject when this&#xA;loot op is applied.">
                  <Tunable type="interaction" name="affordance" class="TunableReference" description="The affordance to push on the subject." allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
                  <TunableEnum type="Priority" name="affordance_priority" class="TunableEnumEntry" default="Low" static_entries="interactions-priority.Priority" description="The priority at which the specified affordance is to be pushed.&#xA;&#xA;IMPORTANT: This will cancel any incompatible interactions the Sim&#xA;is currently running if they are at a lower priority. Autonomous&#xA;interactions are pushed at Low priority."/>
                  <TunableVariant type="None" name="affordance_run_priority" class="OptionalTunable" default="disabled" description="If enabled, specify the priority at which the affordance runs. This&#xA;may be different than 'affordance_priority'. For example. you might&#xA;want an affordance to push at high priority such that it cancels&#xA;existing interactions, but it runs at a lower priority such that it&#xA;can be more easily canceled.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="Priority" name="enabled" class="TunableEnumEntry" default="Low" static_entries="interactions-priority.Priority" description="The run priority for the specified affordance."/>
                  </TunableVariant>
                  <TunableVariant type="None" name="affordance_target" class="OptionalTunable" default="enabled" description="If enabled, the pushed interaction will target a specified&#xA;participant.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeReaction" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeReaction" description="The participant to be targeted by the pushed interaction."/>
                  </TunableVariant>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="refresh_whims" class="TunableRefreshWhimsLootOp" description="Loot operation that refreshes all of the non-locked whims on a sim.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="relationship_bits_lock" class="TunableUnlockRelationshipBitLock" description="Loot to unlock a relationship bit.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="relationship_lock" name="relationship_lock" class="TunableReference" description="The type of relationship lock to change." allow_none="False"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantTypeSim" name="target" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSim" description="The target of this loot operation."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="relationship_bits_loot" class="TunableRelationshipBitChange" description="A list of relationship bit operations to perform">
              <TunableList name="bit_operations" class="TunableList" description="List of operations to perform.">
                <TunableTuple class="TunableTuple" description="Tuple describing the operation to perform.">
                  <Tunable type="relbit" name="bit" class="TunableReference" description="The bit to be manipulated." allow_none="False"/>
                  <TunableEnum type="RelationshipBitOperationType" name="operation" class="TunableEnumEntry" default="INVALID" static_entries="relationships-relationship_bit_change.RelationshipBitOperationType" description="The operation to perform." invalid_entries="INVALID"/>
                  <TunableEnum type="ParticipantType" name="recipients" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="The Sim(s) to apply the bit operation to." invalid_entries="Invalid"/>
                  <TunableEnum type="ParticipantType" name="targets" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="The target Sim(s) for each bit interaction." invalid_entries="Invalid"/>
                </TunableTuple>
              </TunableList>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="release_table" class="TunableReleaseRestaurantTable" description="A loot that allows a sim to release a restaurant table they currently have&#xA;claimed.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="remove_notebook_entry" class="TunableRemoveNotebookEntry" description="An operation that clears the notebook data out the specified entries.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="removal_type" class="OptionalTunable" default="all_entries" description="Option to select if we want to remove by subcategory (like remove&#xA;all clues) or by a specific entry.">
                <Tunable name="all_entries" class="TunableExistance"/>
                <TunableList name="remove_by_reference" class="TunableList" description="List of entries to be removed.">
                  <Tunable type="notebook_entry" class="TunableReference" description="The entry that will be removed from the player's notebook." allow_none="False" pack_safe="True"/>
                </TunableList>
              </TunableVariant>
              <TunableEnum type="NotebookSubCategories" name="subcategory_id" class="TunableEnumEntry" default="INVALID" dynamic_entries="ui-notebook_tuning.NotebookSubCategories._elements" static_entries="ui-notebook_tuning.NotebookSubCategories" description="Subcategory type." invalid_entries="INVALID"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="remove_object_info" class="TunableRemoveObjectInfoLootOp" description="Remove the StoredObjectInfoComponent, if it exists.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to remove from the Stored Object Info Component." invalid_entries="INVALID"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="remove_sickness" class="TunableRemoveSicknessLootOp" description="Removes a sickness from the subject.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="remove_stored_sim_info" class="TunableRemoveSimInfoLootOp" description="Loot action to remove the StoredSimInfoComponent, if it exists.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="reset_aspiration" class="TunableResetAspiration" description="Operation to reset an aspiration on a Sim.">
              <Tunable type="aspiration" name="aspiration" class="TunableReference" description="The aspiration that we want to reset." allow_none="False"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="reset_game" class="TunableResetGame" description="Game component's reset game loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim. Only resets&#xA;score. Leave it to tuning to reset state of target (presumably on xevent).">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="reset_high_score" class="TunableResetHighScore" description="Game component's reset high score loot operation. Note that the subject is &#xA;almost always object since the game component is not on the Sim. Only resets &#xA;high score. Leave it to tuning to reset state of target (presumably on xevent).">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="restaurant_expedite_order" class="TunableRestaurantExpediteGroupOrder" description="A loot that will insert the subjects group order to the front of the chefs&#xA;list of food to create.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="reward" class="TunableRewardOperation" description="Loot operation to give a reward to a Sim or Household.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="reward" name="reward" class="TunableReference" description="The reward given to the subject of the loot operation." allow_none="False"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="schedule_drama_node" class="TunableScheduleDramaNodeLoot" description="A loot operation for scheduling drama nodes.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="drama_node" name="drama_node" class="TunableReference" description="The drama node to schedule." allow_none="False"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <Tunable type="action" name="scheduled_delivery" class="TunableReference" allow_none="False" restrict="ScheduledDeliveryLoot"/>
            <TunableTuple name="set_club_gathering_vibe" class="TunableSetClubGatheringVibe">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableEnum type="ClubGatheringVibe" name="vibe" class="TunableEnumEntry" default="NO_VIBE" dynamic_entries="clubs-club_enums.ClubGatheringVibe._elements" static_entries="clubs-club_enums.ClubGatheringVibe" description="The vibe to set the gathering to."/>
            </TunableTuple>
            <TunableTuple name="set_primary_aspiration_track" class="TunableSetPrimaryAspirationTrack" description="An operation to set the primary aspiration track.">
              <Tunable type="aspiration_track" name="aspiration_track" class="TunableReference" description="The Aspiration Track to set as primary" allow_none="False"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="setup_game" class="TunableSetupGame" description="Game component's setup game loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim.    ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="skill_effectiveness" class="TunableSkillEffectivenessLoot">
              <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="SkillEffectiveness" name="effectiveness" class="TunableEnumEntry" default="STANDARD" dynamic_entries="statistics-skill.SkillEffectiveness._elements" static_entries="statistics-skill.SkillEffectiveness" description="Enum to determine which curve to use when giving points to sim." tuning_state="NeedsTuning"/>
              <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
              <Tunable type="int" name="level" class="Tunable" default="0" description="x-point on skill effectiveness curve." tuning_state="NeedsTuning"/>
              <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                <Tunable name="no_max" class="TunableExistance"/>
                <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                  <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                  <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableVariant>
              <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                  <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                    <TunableTuple class="TunableVector2" description="Point on a Curve">
                      <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                      <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableList>
                  <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
              <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
              <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                  <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                    <Tunable name="raw_value" class="TunableExistance"/>
                    <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableList>
                  </TunableVariant>
                  <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                </TunableTuple>
              </TunableList>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="slot_objects" class="TunableSlotObjects" description="Operation to slot an object into another.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableVariant type="None" name="slot_strategy" class="SlotStrategyVariant" default="slot_type_strategy" description="The slot strategy we want to use to place objects from the transfer&#xA;source into slots on the target.">
                <TunableTuple name="auto_slotting" class="TunableSlotStrategyAutoSlot" description="Strategy to place the transfer objects uniquely in various slots on the&#xA;target, possibly distributing them across different slot types.">
                  <Tunable type="bool" name="evenly_distribute_slot_types" class="Tunable" default="True" description="If enabled, we will attempt to go down the slot types list&#xA;one at a time and pull a unique object, then repeat the&#xA;list until the desired number of objects has been slotted,&#xA;we run out of objects, or we run out of slots."/>
                  <Tunable type="int" name="max_number_of_objects" class="TunableRange" default="15" min="1" max="20" description="The number of objects we would like to slot into the target.&#xA;Obviously the number of valid objects available and the number of&#xA;free slots must accommodate this interval. However, it will fail&#xA;silently if we run out of either. This is essentially a firemeter&#xA;on how many objects we care to try and slot." tuning_state="NeedsTuning"/>
                  <TunableVariant type="None" name="objects_to_slot" class="SelectObjectVariant" default="object_participant" description="The selection for objects to be slotted into the slot target.">
                    <TunableTuple name="inventory_objects" class="TunableSelectInventoryObjects" description="Pulls all possible objects from the inventory participant which will fit&#xA;into the slots tuned in the slot strategy.">
                      <TunableEnum type="ParticipantTypeSingle" name="inventory_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant with the inventory we want to pull objects from."/>
                      <TdescFragTag name="object_tests" class="TunableTestSet" description="Tests whether or not an object in the inventory should be&#xA;transferred to a target slot or not.&#xA;&#xA;If this is being tuned in an interaction, the object in question&#xA;will be the Picked Item participant. This is so that we can keep&#xA;the resolver in case we want to test the actor or target as well.&#xA;&#xA;In other cases, the participant will be Actor, and the slot target&#xA;will be Object."/>
                    </TunableTuple>
                    <TunableTuple name="object_participant" class="TunableSelectSourceParticipant" description="A participant of the interaction to slot into the target's slot type.">
                      <TunableEnum type="ParticipantType" name="transfer_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="A participant to be slotted."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableEnum type="ParticipantTypeSingle" name="slot_target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The participant we want to slot objects into."/>
                  <TunableList name="slot_types" class="TunableList" description="The slot types we want to fill. Order denotes priority, as we will grab unique objects that fill those slots." unique_entries="true">
                    <Tunable type="slot_type" class="TunableReference" description="Slot type to place the transfered objects into the participant&#xA;target. Obviously the slot type must be available on the target&#xA;object and the source must support it." allow_none="False"/>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="slot_type_strategy" class="TunableSlotStrategyTargetSlotType" description="Strategy to place the transfer objects in a particular slot type on the&#xA;target.">
                  <Tunable type="int" name="max_number_of_objects" class="TunableRange" default="15" min="1" max="20" description="The number of objects we would like to slot into the target.&#xA;Obviously the number of valid objects available and the number of&#xA;free slots must accommodate this interval. However, it will fail&#xA;silently if we run out of either. This is essentially a firemeter&#xA;on how many objects we care to try and slot." tuning_state="NeedsTuning"/>
                  <TunableVariant type="None" name="objects_to_slot" class="SelectObjectVariant" default="object_participant" description="The selection for objects to be slotted into the slot target.">
                    <TunableTuple name="inventory_objects" class="TunableSelectInventoryObjects" description="Pulls all possible objects from the inventory participant which will fit&#xA;into the slots tuned in the slot strategy.">
                      <TunableEnum type="ParticipantTypeSingle" name="inventory_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant with the inventory we want to pull objects from."/>
                      <TdescFragTag name="object_tests" class="TunableTestSet" description="Tests whether or not an object in the inventory should be&#xA;transferred to a target slot or not.&#xA;&#xA;If this is being tuned in an interaction, the object in question&#xA;will be the Picked Item participant. This is so that we can keep&#xA;the resolver in case we want to test the actor or target as well.&#xA;&#xA;In other cases, the participant will be Actor, and the slot target&#xA;will be Object."/>
                    </TunableTuple>
                    <TunableTuple name="object_participant" class="TunableSelectSourceParticipant" description="A participant of the interaction to slot into the target's slot type.">
                      <TunableEnum type="ParticipantType" name="transfer_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="A participant to be slotted."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableEnum type="ParticipantTypeSingle" name="slot_target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The participant we want to slot objects into."/>
                  <Tunable type="slot_type" name="target_slot_type" class="TunableReference" description="Slot type to place the transfered objects into the participant&#xA;target. Obviously the slot type must be available on the target&#xA;object and the source must support it." allow_none="False"/>
                </TunableTuple>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="squad_loot" class="TunableSquadLootOp" description="Add or remove Sims from another Sims squad.">
              <TunableVariant type="None" name="action" class="TunableVariant" default="add_to" description="The choice of whether or not to add or remove the target from the&#xA;actors squad.">
                <Tunable name="add_to" class="TunableExistance"/>
                <Tunable name="remove_from" class="TunableExistance"/>
              </TunableVariant>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_sim" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim that is being added to/removed from the subjects squad."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="state_change" class="TunableStateChangeLootOp" description="This loot will change the state of the subject.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="object_state" name="state_value" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
              <TunableVariant type="None" name="subject" class="TunableVariant" default="participant" description="The subject of this loot.">
                <TunableEnum type="Tag" name="all_objects_with_tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="All objects with this tag." invalid_entries="INVALID"/>
                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="&quot;&#xA;The participant type for the subject of this loot." invalid_entries="Invalid"/>
              </TunableVariant>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableVariant type="None" name="statistics" class="TunableStatisticChange" default="none" description="A variant of statistic operations.">
              <Tunable name="none" class="TunableExistance"/>
              <TunableTuple name="object_relationship_change" class="TunableStatisticAddObjectRelationship" description="Add to the object relationship score statistic for this Super Interaction.">
                <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                </TunableVariant>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                </TunableList>
                <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="ObjectRelationshipTrack"/>
                <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableTuple>
              <TunableTuple name="random_relationship_set" class="TunableRandomSimStatisticAddRelationship" description="Adds the relationship statistic score about an amount to a &#xA;random sim selected out of all the known sims for the Actor.">
                <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="create_sim_if_no_results" class="OptionalTunable" default="disabled" description="If enabled, will result in a new Sim Info being created to meet&#xA;the conditions of the supplied Sim Template.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="sim_filter" name="enabled" class="TunableReference" description="A reference to a Sim Filter to use to create a Sim.&#xA;                &#xA;This does not guarantee that the created Sim will pass&#xA;tests_on_random_sim. However the resulting sim will be used as&#xA;a valid result." allow_none="False" restrict="TunableSimFilter"/>
                </TunableVariant>
                <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                </TunableVariant>
                <TunableVariant type="None" name="loot_applied_notification" class="OptionalTunable" default="disabled" description="If enable the notification will be displayed passing the subject&#xA;and the random sim as tokens.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableUiDialogNotification" description="Notification that will be shown when the loot is applied.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                    <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                    </TunableVariant>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                    <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="number_of_random_sims" class="OptionalTunable" default="disabled" description="If enabled allows you to specify the number of Sims to choose to&#xA;add the relationship with.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="int" name="enabled" class="TunableRange" default="1" min="1" max="None" description="The number of Sims to choose to add relationship with from&#xA;the list of valid choices." tuning_state="NeedsTuning"/>
                </TunableVariant>
                <TunableVariant type="None" name="store_single_result_on_interaction" class="OptionalTunable" default="disabled" description="If enabled will place the result into the SavedActor specified on&#xA;the interaction.&#xA;&#xA;This will only work if the value of number_or_random_sims is 1.&#xA;This will overwrite whatever else is currently set in the&#xA;SavedActor space chosen.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantTypeSavedActor" name="enabled" class="TunableEnumEntry" default="SavedActor1" static_entries="interactions.ParticipantTypeSavedActor" description="            &#xA;                "/>
                </TunableVariant>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TdescFragTag name="tests_on_random_sim" class="TunableTestSet" description="Tests that will be run to filer the Sims where we will pick the&#xA;random sim to apply this statistic change."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableVariant type="None" name="who" class="TunableVariant" default="known_sims_only" description="Which Sims are valid choices before running tests.&#xA;If set to known_sims_only then it will only choose between Sims &#xA;that the subject sim already knows.&#xA;&#xA;IF set to all_sims then it will choose between all of the sims, &#xA;including those that the Sim hasn't met.">
                  <Tunable name="all_sims" class="TunableExistance"/>
                  <Tunable name="known_sims_only" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="relationship_change" class="TunableStatisticAddRelationship" description="Adds to the relationship score statistic for this Super Interaction">
                <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                </TunableVariant>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                </TunableList>
                <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableTuple>
              <TunableTuple name="relationship_set" class="TunableStatisticSetRelationship" description="Sets the relationship score statistic to a specific value.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                </TunableVariant>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                </TunableList>
                <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <Tunable type="float" name="value" class="Tunable" default="0" description="The value to set the relationship to." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableTuple name="statistic_add" class="TunableStatisticAddOp" description="Attempt to add the specified statistic.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_change" class="TunableStatisticChangeOp" description="Modify the value of a statistic.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
                <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                  <Tunable name="no_max" class="TunableExistance"/>
                  <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                    <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                    <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                    <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                  <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                    <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                      <Tunable name="raw_value" class="TunableExistance"/>
                      <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                        <TunableTuple class="TunableVector2" description="Point on a Curve">
                          <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableList>
                    </TunableVariant>
                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                  </TunableTuple>
                </TunableList>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_change_by_category" class="TunableChangeStatisticByCategory" description="Change value of  all statistics of a specific category.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="change" class="TunableVariant" default="none">
                  <Tunable name="none" class="TunableExistance"/>
                  <TunableTuple name="percent_change" class="TunablePercentChangeAmountFactory">
                    <Tunable type="float" name="percent_change_amount" class="TunablePercent" default="-50" min="-100" max="100" description="Percent of current value of statistic should amount&#xA;be changed.  If you want to decrease the amount by&#xA;50% enter -50% into the tuning field."/>
                  </TunableTuple>
                  <TunableTuple name="stat_change" class="TunableChangeAmountFactory">
                    <Tunable type="float" name="change_amout" class="Tunable" default="0" description="Amount of change to be applied to statistics that match category." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_remove" class="TunableStatisticRemoveOp" description="Attempt to remove the specified statistic.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_remove_by_category" class="TunableRemoveStatisticByCategory" description="Remove all statistics of a specific category.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_set" class="TunableStatisticSetOp" description="Set a statistic to the provided value.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="int" name="value" class="Tunable" default="None" description="The new statistic value." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableTuple name="statistic_set_in_range" class="TunableStatisticSetRangeOp" description="Set a statistic to a random value in the tuned range.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableTuple name="value_range" class="TunableInterval" description="The upper and lower bound of the range.">
                  <Tunable type="int" name="lower_bound" class="TunableRange" default="1" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="int" name="upper_bound" class="TunableRange" default="2" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
              </TunableTuple>
              <TunableTuple name="statistic_set_max" class="TunableStatisticSetMaxOp" description="Set a statistic to its maximum value.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_set_min" class="TunableStatisticSetMinOp" description="Set a statistic to its minimum value.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="statistic_set_rank" class="TunableStatisticSetRankOp" description="Set a Ranked Statistic to a specific rank level.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True" restrict="RankedStatistic"/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="int" name="value" class="Tunable" default="None" description="The new rank value." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableTuple name="statistic_transfer" class="TunableStatisticTransferOp" description="Transfer a statistic value from one target to another.">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                <TunableEnum type="ParticipantType" name="statistic_donor" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The owner of the statistic we are transferring the value from."/>
                <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                </TunableList>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableEnum type="TransferType" name="transfer_type" class="TunableEnumEntry" default="ADDITIVE" static_entries="statistics-statistic_ops.TransferType" description="Type of statistic transfer to use."/>
                <TunableVariant type="None" name="transfer_type_average_advanced" class="OptionalTunable" default="disabled" description="If enabled, the average calculation will be the sum of multiplying&#xA;the stat value and stat quantity then dividing with total quantity.&#xA;T  = Transferred Stat value&#xA;S  = Stat value&#xA;QT = Quantity Transferred Stat value&#xA;QS = Quantity Stat value&#xA;Result = ((T * QT) + (S * QS)) / (QT + QS)&#xA;&#xA;If disabled, the result will calculate Mean of 2 stat values.&#xA;Result = (T + S) / 2">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTuple" description="Statistic quantities for both subject and donor.">
                    <Tunable type="statistic" name="quantity_stat" class="TunableReference" description="Statistic quantity subject which will be applied to the&#xA;average calculation." allow_none="False"/>
                    <Tunable type="statistic" name="quantity_transferred_stat" class="TunableReference" description="Statistic quantity donor which will be applied to the&#xA;average calculation." allow_none="False"/>
                  </TunableTuple>
                </TunableVariant>
                <Tunable type="statistic" name="transferred_stat" class="TunableReference" description="The statistic whose value to transfer." allow_none="False"/>
              </TunableTuple>
            </TunableVariant>
            <TunableTuple name="store_object_info" class="TunableStoreObjectInfoLootOp" description="Store data in a StoredObjectInfoComponent. That component is then added to&#xA;the target, which allows it to be retrieved later.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableList name="states_to_store" class="TunableSet" description="A list of states to be stored, if the source object has that state." unique_entries="true">
                <Tunable type="object_state" class="TunableReference" description="A state to store." allow_none="False" restrict="ObjectState"/>
              </TunableList>
              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object being stored. This will be used to retrieve the&#xA;stored object from the Stored Object Info Component of the target." invalid_entries="INVALID"/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="store_sim_info" class="TunableStoreSimInfoLootOp" description="Loot action to store target participant sim info in StoredSimInfoComponent &#xA;of subject.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="stored_sim_info_transfer" class="TunableTransferStoredSimInfo" description="Loot action to transfer the Stored Sim Info between participants. The Stored&#xA;Sim Info is taken from the Subject and applied to the Target.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="clear_stored_sim_on_subject" class="Tunable" default="False" description="If set to False, the Stored Sim will remain on the subject object. If&#xA;set to True, the Store Sim will be removed from the subject object."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="summon_npc" class="TunableSummonNPC" description="An Operation to summon NPC on the venue">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="NPCSummoningPurpose" name="summoning_purpose" class="TunableEnumEntry" default="DEFAULT" dynamic_entries="venues-venue_constants.NPCSummoningPurpose._elements" static_entries="venues-venue_constants.NPCSummoningPurpose" description="The purpose that is used to summon the NPC to the lot.  Defined&#xA;in venue tuning."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="take_turn" class="TunableTakeTurn" description="Factory created by tuning to represent a turn change loot operation.    ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="team_score" class="TunableTeamScore" description="Factory created by tuning to represent a team score change loot operation.    ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="team_score_points" class="TunableTeamScorePoints" description="Factory created by tuning to represent a team score change loot operation&#xA;that awards a specific number of points.    ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="score_increase" class="TunableInterval" description="An interval specifying the minimum and maximum score increases&#xA;from this loot. A random value in this interval will be&#xA;generated each time this loot is given.">
                <Tunable type="int" name="lower_bound" class="TunableRange" default="35" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                <Tunable type="int" name="upper_bound" class="TunableRange" default="50" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableVariant type="None" name="score_increase_from_stat" class="OptionalTunable" default="disabled" description="If enabled, the score will be increased by this statistic value&#xA;instead of by 'Score Increase' interval value.">
                <Tunable name="disabled" class="TunableExistance"/>
                <Tunable type="statistic" name="enabled" class="TunableReference" description="The stat we are operating on." allow_none="False"/>
              </TunableVariant>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="topic_loot" class="TunableTopicUpdate" description="Factory created by tuning to represent topic update.    ">
              <Tunable type="bool" name="add" class="Tunable" default="True" description="Topic will be added to recipient. if unchecked topic will be&#xA;removed from recipient."/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableVariant type="None" name="target_participant_type" class="OptionalTunable" default="disabled" description="Participant(s) that subject will apply operations on.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              </TunableVariant>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="topic" name="topic" class="TunableReference" description="The topic we are updating." allow_none="False" restrict="Topic"/>
            </TunableTuple>
            <TunableTuple name="trait_add" class="TunableAddTraitLootOp" description="This loot will add the specified trait.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="trait" name="trait" class="TunableReference" description="The trait to be added." allow_none="False"/>
            </TunableTuple>
            <TunableTuple name="trait_remove" class="TunableRemoveTraitLootOp" description="This loot will remove the specified trait">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="trait" class="TunableVariant" default="specific_trait" description="Type of trait removal to perform.">
                <TunableTuple name="random_personality_trait" class="Tunable_RemoveRandomPersonalityTrait" description="Remove a random personality trait.">
                  <TunableList name="traits_to_not_consider" class="TunableList" description="Personality traits that should not be considered for removal. Leave&#xA;blank to consider all personality traits.">
                    <Tunable type="trait" class="TunableReference" description="A personality trait that should not be removed." allow_none="False" pack_safe="True"/>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="specific_trait" class="Tunable_RemoveSpecificTrait" description="Remove the specified trait.">
                  <Tunable type="trait" name="specific_trait" class="TunableReference" description="The trait to be removed." allow_none="False" pack_safe="True"/>
                </TunableTuple>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="transfer_name_loot" class="TunableTransferNameLootOp" description="Loot to transfer the custom name and custom description between objects.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="clear_subject_description" class="Tunable" default="False" description="If False, the subject's description will not be cleared. If True, then&#xA;the subject's description will be cleared. This will only happen if&#xA;transfer description is set to True."/>
              <Tunable type="bool" name="clear_subject_name" class="Tunable" default="False" description="If False, the subject's name will not be cleared. If True, then&#xA;the subject's name will be cleared. This will only happen if&#xA;transfer name is set to True. "/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="bool" name="transfer_description" class="Tunable" default="True" description="If checked, it will transfer the custom description of the name &#xA;component from the subject to the target."/>
              <Tunable type="bool" name="transfer_name" class="Tunable" default="True" description="If checked, it will transfer the custom name of the name component&#xA;from the subject to the target."/>
            </TunableTuple>
            <TunableTuple name="transfer_ownership" class="TunableTransferOwnershipLootOp" description="This loot will give ownership of the tuned object to the tuned sim&#xA;or to the tuned sim's household.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="bool" name="give_sim_ownership" class="Tunable" default="False" description="If True, the sim will be the owner of this object, and the sim's &#xA;household will be the owning household. If False, the sim's &#xA;household will own the object and the sim owner will be cleared if&#xA;the household_id assigned is new."/>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of the interaction whom the ownership will be &#xA;tested on."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="travel_to_target_sim" class="TunableTravelToTargetSim" description="An Operation to travel the actor sim to the target sim's lot.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="unlock_door" class="TunableUnlockDoor" description="An operation to unlock a door.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The door to unlock."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="unlock_type" class="OptionalTunable" default="unlock_every_type" description="The type of the lock we want to remove, by default should be everything.">
                <TunableEnum type="LockType" name="enabled" class="TunableEnumEntry" default="LOCK_ALL_WITH_SIMID_EXCEPTION" static_entries="objects-components-portal_locking_enums.LockType"/>
                <Tunable name="unlock_every_type" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="unlock_hidden_aspiration_track" class="TunableUnlockHiddenAspirationTrack" description="An operation to unlock a hidden aspiration track.">
              <Tunable type="aspiration_track" name="aspiration_track" class="TunableReference" description="The Hidden Aspiration Track to unlock so that is can be selected during gameplay." allow_none="False"/>
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="unlock_item" class="TunableUnlockLootOp" description="This loot will give Sim an unlock item like recipe etc. ">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="unlock_item" class="TunableUnlockVariant" default="none" description="The unlock item that will give to the Sim.">
                <Tunable name="none" class="TunableExistance"/>
                <Tunable type="recipe" name="unlock_recipe" class="TunableReference" allow_none="False" pack_safe="True"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="vfx" class="TunablePlayVisualEffectLootOp" description="Loot operation to play vfx.">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableTuple name="vfx" class="TunablePlayEffect" description="The effect to play.">
                <Tunable type="str" name="effect_name" class="Tunable" default="" description="The name of the effect to play."/>
                <TunableVariant type="None" name="joint_name" class="OptionalTunable" default="Slot" description="Specify if the visual effect is attached to a slot and, if so, which&#xA;slot.">
                  <Tunable name="Current_Position" class="TunableExistance"/>
                  <Tunable type="str" name="Slot" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is attached to."/>
                </TunableVariant>
              </TunableTuple>
              <TunableVariant type="None" name="vfx_target" class="OptionalTunable" default="disabled" description="If enabled, the visual effect is set to target a specific joint on&#xA;another object or Sim.">
                <Tunable name="disabled" class="TunableExistance"/>
                <TunableTuple name="enabled" class="TunableTuple">
                  <Tunable type="str" name="joint_name" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is targeted to."/>
                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant this visual effect targets."/>
                </TunableTuple>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="weather_set_override_forecast" class="TunableWeatherSetOverrideForecastLootOp" description="Set the override forecast">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <TunableVariant type="None" name="weather_forecast" class="OptionalTunable" default="reset_to_default" description="The forecast to use as override.">
                <Tunable type="snippet" name="enabled" class="TunableReference" description="A reference to a WeatherSeasonalForecasts tuning snippet." allow_none="False" restrict="WeatherSeasonalForecasts"/>
                <Tunable name="reset_to_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="weather_set_season" class="TunableWeatherSetSeasonLootOp" description="Interpolate to the specified season over the specified time">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <Tunable type="float" name="interpolation_time" class="TunableSimMinute" default="20" min="None" max="None" description="The time over which the interpolation to the new season should&#xA;occur." tuning_state="NeedsTuning"/>
              <TunableEnum type="SeasonType" name="season" class="TunableEnumEntry" default="WINTER" static_entries="seasons-seasons_enums.SeasonType" description="The target season."/>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
            </TunableTuple>
            <TunableTuple name="weather_start_event" class="TunableWeatherStartEventLootOp" description="Start the specified weather event for the specified duration">
              <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                    <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                  </TunableTuple>
                </TunableList>
              </TunableTuple>
              <TunableTuple name="duration" class="TunableInterval" description="How long the event should last, in hours.">
                <Tunable type="float" name="lower_bound" class="TunableRange" default="1.0" min="1.0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                <Tunable type="float" name="upper_bound" class="TunableRange" default="2.0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
              <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                <Tunable name="no_text" class="TunableExistance"/>
                <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                <Tunable name="use_default" class="TunableExistance"/>
              </TunableVariant>
              <Tunable type="weather_event" name="weather_event" class="TunableReference" description="The weather event to start." allow_none="False" restrict="WeatherEvent"/>
            </TunableTuple>
          </TunableVariant>
        </TunableList>
      </TunableTuple>
    </TunableList>
    <TunableList name="add_to_random_loot_actions" description="A list of RandomWeightedLoot references and LootActionVariant/weights to add" class="TunableList">
      <TunableTuple>
        <Tunable name="random_weighted_loot_ref" type="action" class="TunableReference" description="Reference to a RandomWeightedLoot tuning instance" pack_safe="True" restrict="RandomWeightedLoot"/>
        <TunableList name="random_loot_actions_to_add" description="List of weighted loot actions that can be run." class="TunableList">
          <TunableTuple class="TunableTuple" description="Weighted actions that will be randomly selected when&#xA;the loot is executed.  The loots will be tested&#xA;before running to guarantee the random action is valid.">
            <TunableVariant name="action" type="None" class="LootActionVariant" default="none">
              <Tunable type="action" name="actions" class="TunableReference" description="Apply a set of loot operations." allow_none="False" pack_safe="True" restrict="LootActions,RandomWeightedLoot"/>
              <TunableTuple name="add_relic_combo" class="TunableAddRelicCombo" description="A loot that adds a specified relic combo to a Sim's relic tracker.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="RelicComboId" name="relic_combo_id" class="TunableEnumEntry" default="INVALID" dynamic_entries="relics-relic_tuning.RelicComboId._elements" static_entries="relics-relic_tuning.RelicComboId" description="The relic combo ID to add to the Sim's Relic Tracker." invalid_entries="INVALID"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="apply_tags_to_object" class="TunableApplyTagsToObject" description="A construct that sets object tags">
                <TunableList name="apply_persisted_tags" class="TunableTags" unique_entries="true">
                  <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A set of persisted category tags to apply to the finished product." invalid_entries="INVALID" pack_safe="True"/>
                </TunableList>
                <TunableList name="apply_unpersisted_tags" class="TunableTags" unique_entries="true">
                  <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A set of unpersisted category tags to apply to the finished product." invalid_entries="INVALID" pack_safe="True"/>
                </TunableList>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="award_perk" class="TunableAwardPerkLoot" description="This loot will give the specified perk to the sim.">
                <TunableVariant type="None" name="award_strategy" class="TunableVariant" default="unlock">
                  <TunableTuple name="progress" class="Tunable_PerkProgressStrategy" description="Gives progress towards awarding the perk.  The perk must have a progression&#xA;statistic for this loot to work.">
                    <Tunable type="float" name="progress" class="Tunable" default="0" description="This is the amount of progress to give towards awarding the perk" tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="unlock" class="Tunable_UnlockPerkStrategy" description="Unlocks the perk.">
                    <Tunable type="bool" name="unlock_for_free" class="Tunable" default="True" description="When checked the perk can be awarded even if the Sim you are&#xA;awarding it to cannot afford the perk.&#xA;&#xA;When unchecked this loot will attempt to charge the Sim for perk&#xA;and if the Sim cannot afford the perk will fail to award the perk.&#xA;This failure will happen silently as it is a totally normal flow&#xA;for this loot."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="notification_on_successful_unlock" class="OptionalTunable" default="disabled" description="If enabled, a notification that displays when the perk is&#xA;successfully awarded.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableVariant type="None" name="enabled" class="TunableNotificationSnippet" default="literal" description="This is the notification that shows when the perk is successfully&#xA;unlocked.&#xA; (This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.)">
                    <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                      <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunablePlayAudio">
                          <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                          <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                          <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                          </TunableVariant>
                          <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                        <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                      </TunableList>
                      <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                      <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                      <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                      </TunableVariant>
                      <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                      <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                      </TunableVariant>
                      <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                      <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                        <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                          <TunableList name="variations" class="TunableList">
                            <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                          <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                            <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                              <Tunable name="active_holiday" class="TunableExistance"/>
                              <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                              <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                  <Tunable name="current_level_name" class="TunableExistance"/>
                                  <Tunable name="current_level_salary" class="TunableExistance"/>
                                  <Tunable name="next_level_name" class="TunableExistance"/>
                                  <Tunable name="next_level_salary" class="TunableExistance"/>
                                  <Tunable name="previous_level_name" class="TunableExistance"/>
                                  <Tunable name="previous_level_salary" class="TunableExistance"/>
                                </TunableVariant>
                                <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                              </TunableTuple>
                              <Tunable name="current_trends" class="TunableExistance"/>
                              <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                              </TunableTuple>
                              <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                  <Tunable name="high_score" class="TunableExistance"/>
                                  <Tunable name="high_score_sim" class="TunableExistance"/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                              </TunableTuple>
                              <Tunable name="interaction_cost" class="TunableExistance"/>
                              <Tunable name="interaction_payout" class="TunableExistance"/>
                              <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                              </TunableTuple>
                              <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                              </TunableTuple>
                              <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                              </TunableTuple>
                              <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                  <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                    <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                  </TunableTuple>
                                  <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                    <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                    </TunableVariant>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                              </TunableTuple>
                              <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                      </TunableVariant>
                      <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                      </TunableVariant>
                      <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                        <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableList>
                      <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                      <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                    </TunableTuple>
                    <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                  </TunableVariant>
                </TunableVariant>
                <Tunable type="bucks_perk" name="perk" class="TunableReference" description="The perk to give the Sim. " allow_none="False"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="award_whim_bucks" class="TunableAwardWhimBucksLootOp" description="This loot will give the specified number of whim bucks to the sim. ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="int" name="whim_bucks" class="TunableRange" default="1" min="1" max="None" description="The number of whim bucks to give." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableTuple name="breakthrough_moment" class="TunableBreakThroughLootOperation" description="An operation that shows a breakthrough headline on target Sim.">
                <Tunable type="statistic" name="breakthrough_commodity" class="TunableReference" description="The commodity that tracks the breakthrough progress." allow_none="False"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="float" name="time" class="TunableRealSecond" default="5" min="None" max="None" description="The amount of time, in real seconds, to show headline effect." tuning_state="NeedsTuning"/>
              </TunableTuple>
              <TunableTuple name="bucks_loot" class="TunableBucksLoot" description="A loot operation granting a tuned amount of a specific type of Bucks.">
                <Tunable type="int" name="amount" class="Tunable" default="10" description="The amount of Bucks to award." tuning_state="NeedsTuning"/>
                <TunableEnum type="BucksType" name="bucks_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="bucks-bucks_enums.BucksType._elements" static_entries="bucks-bucks_enums.BucksType" description="The type of Bucks to grant."/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="force_refund" class="Tunable" default="False" description="If enabled then if the total amount of bucks would be reduced to&#xA;a negative value, the bucks tracker will try to get back to zero&#xA;by refunding perks to make up the difference."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="buff" class="TunableBuffOp" description="Factory created by tuning to represent buff loot.">
                <TunableTuple name="buff" class="TunablePackSafeBuffReference">
                  <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
                  </TunableVariant>
                  <Tunable type="buff" name="buff_type" class="TunableReference" description="Buff that will get added to sim." allow_none="False" pack_safe="True"/>
                </TunableTuple>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="buff_removal" class="TunableBuffRemovalOp" description="This loot will remove buffs from a Sim.">
                <TunableList name="buff_tags_to_remove" class="TunableTags" unique_entries="true">
                  <TunableEnum type="Tag" class="TunableEnumWithFilter" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="If 'remove_all_buffs' is not checked, buffs with any tag in this list&#xA;will be removed from the subject. If 'remove_all_buffs' is checked, this&#xA;list will be ignored." dynamic_entries_prefix="buff" invalid_entries="INVALID" pack_safe="True"/>
                </TunableList>
                <TunableList name="buffs_to_ignore" class="TunableList" description="If 'remove_all_buffs' is checked, no buffs included in this list will&#xA;be removed.  If 'remove_all_buffs' is unchecked, this list will be&#xA;ignored.">
                  <Tunable type="buff" class="TunableReference" description="Buff to be removed." allow_none="False"/>
                </TunableList>
                <TunableList name="buffs_to_remove" class="TunableList" description="If 'remove_all_buffs' is not checked, this is the list of buffs that&#xA;will be removed from the subject.  If 'remove_all_buffs' is checked,&#xA;this list will be ignored.">
                  <Tunable type="buff" class="TunableReference" description="Buff to be removed." allow_none="False" pack_safe="True"/>
                </TunableList>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="remove_all_visible_buffs" class="Tunable" default="False" description="If checked, all visible buffs on the Sim, excluding those specified in&#xA;the 'buffs_to_ignore' list will be removed.  If unchecked, buff removal&#xA;will be handled by the 'buffs_to_remove' list."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="buff_transfer" class="TunableBuffTransferOp" description="Loot action to facilitate transfer of buffs (or mood buffs). The buffs&#xA;are applied to the tuned Subject Sim.">
                <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="mood_types" class="OptionalTunable" default="disabled" description="If enabled, only transfer buffs with associated moods in this list.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableList name="enabled" class="TunableList" description="If enabled, only transfer buffs with associated moods in this list.">
                    <Tunable type="mood" class="TunableReference" allow_none="False"/>
                  </TunableList>
                </TunableVariant>
                <Tunable type="bool" name="moods_only" class="Tunable" default="True" description="Checking this box will limit the operations to only the buffs with&#xA;an associated mood."/>
                <TunableVariant type="None" name="polarity" class="OptionalTunable" default="disabled" description="If enabled, only transfer buffs that match the selected polarity.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="BuffPolarity" name="enabled" class="TunableEnumEntry" default="NEUTRAL" static_entries="buffs.BuffPolarity" description="If enabled, only transfer buffs that match the selected polarity."/>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="Buffs are transferred from this Sim to the Subject."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="business_modify_customer_flow" class="TunableModifyCustomerFlow" description="A loot that either sets a business as ready to receive customers or as not&#xA;ready to receive customers. In the later case it means customers will stop &#xA;showing up at all.">
                <Tunable type="bool" name="allow_customers" class="Tunable" default="True" description="If checked then set the current business, if there is one active,&#xA;to allow for customers to arrive.&#xA;&#xA;If unchecked then set the current business, if there is one active,&#xA;to disallow customers from arriving."/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="butler_state_change" class="TunableButlerSituationStateChange" description="A loot that either enables or disables the butler situation state.">
                <Tunable type="situation" name="butler_situation" class="TunableReference" description="The Situation who's state will change." allow_none="False" pack_safe="True"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="operation" class="TunableVariant" default="enable" description="Enable or disable operation for tuned tone.">
                  <Tunable name="disable" class="TunableExistance"/>
                  <Tunable name="enable" class="TunableExistance"/>
                </TunableVariant>
                <TunableEnum type="ButlerSituationStates" name="situation_state" class="TunableEnumEntry" default="DEFAULT" static_entries="situations-service_npcs-butler-butler_loot_ops.ButlerSituationStates" description="Situation state for the butler that should be enabled or disabled&#xA;depending on the operation." invalid_entries="DEFAULT"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="cancel_scheduled_drama_node" class="TunableCancelScheduledDramaNodeLoot" description="A loot operation for canceling scheduled drama nodes. Any drama node with&#xA;in the tuned set with the specified recipient and sender will be canceled.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableList name="drama_nodes" class="TunableSet" description="            " unique_entries="true">
                  <Tunable type="drama_node" class="TunableReference" allow_none="False"/>
                </TunableList>
                <TunableEnum type="ParticipantType" name="receiver" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The recipient of the drama node."/>
                <TunableVariant type="None" name="sender" class="OptionalTunable" default="disabled" description="The sender of the drama node. Can be left unspecified if there is&#xA;no sender.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                </TunableVariant>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="career_level" class="TunableCareerLevelOp" description="Factory for promoting/demoting a sim in a career.">
                <Tunable type="career" name="career" class="TunableReference" description="The career upon which we'll be promoting/demoting the Sim.&#xA;If the Sim doesn't have this career or there's a reason the career&#xA;can't be promoted/demoted, nothing will happen." allow_none="False"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="CareerLevelOps" name="operation" class="TunableEnumEntry" default="PROMOTE" static_entries="careers-career_ops.CareerLevelOps" description="The operation to perform on the career."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="career_loot" class="TunableCareerLootOp" description="Factory for career loot op.">
                <TunableVariant type="None" name="career" class="TunableVariant" default="career_reference" description="The career to apply loot to.">
                  <TunableTuple name="all_careers" class="TunableTuple" description="Apply the operation to all of the Sim's careers."/>
                  <TunableTuple name="career_reference" class="TunableTuple" description="Reference to the career.">
                    <Tunable type="career" name="reference" class="TunableReference" allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                  <TunableTuple name="participant_type" class="TunableTuple" description="The id of the career upon which the op will be applied to. Sim&#xA;Participant must have the career. Typically should be PickedItemId&#xA;if this loot is being applied by the continuation of a&#xA;CareerPickerSuperInteraction.">
                    <TunableList name="participant" class="TunableEnumFlags" default="PickedItemId" unique_entries="true">
                      <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                    </TunableList>
                  </TunableTuple>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableList name="operations" class="TunableList" description="A list of career loot ops.">
                  <TunableVariant type="None" class="TunableVariant" default="performance" description="What the Sim will get with this op.">
                    <TunableTuple name="demote" class="TunableTuple" description="Promote the Sim on the career.">
                      <Tunable type="int" name="levels_to_demote" class="TunableRange" default="1" min="1" max="None" description="The number of levels to demote the Sim." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="fine" class="TunableTuple" description="A tuned amount of money, as a multiple of the current&#xA;career's simoleons per hour, the Sim will have removed&#xA;from their funds.  If the Sim does not have funds to cover&#xA;the fine, their account will be depleted.">
                      <Tunable type="float" name="hour_multiplier" class="Tunable" default="0" description="The multiplier on the career's simoleons per hour." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="fire" class="TunableTuple" description="Fire the Sim from the career.">
                      <Tunable type="bool" name="clear_history" class="Tunable" default="False" description="If checked, clear out the work history so when the Sim&#xA;gets the same career they start over."/>
                    </TunableTuple>
                    <TunableTuple name="join" class="TunableTuple" description="Have the specified Sim join the career.">
                      <TunableVariant type="None" name="level_to_join" class="OptionalTunable" default="disabled" description="If enabled, this is the level at which the Sim will &#xA;join the career.  Otherwise, the Sim will start at &#xA;level 1 or a higher level if they were previously in&#xA;this career.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="int" name="enabled" class="TunableRange" default="1" min="1" max="None" tuning_state="NeedsTuning"/>
                      </TunableVariant>
                      <Tunable type="bool" name="show_confirmation_dialog" class="Tunable" default="False" description="If checked and Sim is in other careers or is retired, &#xA;prompt the player to confirm joining the new career. &#xA;&#xA;If accepted, Sim will automatically quit other careers &#xA;and unretire. If canceled, nothing happens and new &#xA;career isn't added."/>
                    </TunableTuple>
                    <TunableTuple name="money" class="TunableTuple" description="A tuned amount of money, as a multiple of the current&#xA;career's simoleons per hour, for the Sim to get.">
                      <Tunable type="float" name="hour_multiplier" class="Tunable" default="0" description="The multiplier on the career's simoleons per hour." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="performance" class="TunableTuple" description="The tuned amount will be applied to the relevant career's&#xA;performance statistic.">
                      <Tunable type="float" name="amount" class="Tunable" default="0" description="The amount to apply to the career's performance statistic.&#xA;Can be negative." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="promote" class="TunableTuple" description="Promote the Sim on the career.">
                      <Tunable type="int" name="levels_to_promote" class="TunableRange" default="1" min="1" max="None" description="The number of levels to promote the Sim." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="pto" class="TunableTuple" description="The amount to apply to the career's pto statistic.&#xA;Can be negative.">
                      <Tunable type="float" name="amount" class="Tunable" default="0" description="The amount to apply to the career's performance statistic.&#xA;Can be negative." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="quit" class="TunableTuple" description="Have the specified Sim quit their career. "/>
                    <TunableTuple name="retire" class="TunableTuple" description="Retire the Sim from the career. The career will provide a&#xA;daily pension until death. All other careers will be quit."/>
                    <TunableTuple name="take_day_off" class="TunableTuple" description="Take off the next work period.  If you want it to consume PTO&#xA;then you must also use a pto operation.">
                      <TunableEnum type="CareerTimeOffReason" name="reason" class="TunableEnumEntry" default="NO_TIME_OFF" dynamic_entries="careers-career_ops.CareerTimeOffReason._elements" static_entries="careers-career_ops.CareerTimeOffReason" description="The reason for taking day off."/>
                    </TunableTuple>
                  </TunableVariant>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="claim_seat" class="TunableClaimRestaurantSeat" description="A loot that allows a sim to claim a seat at a restaurant.&#xA;&#xA;This works for seats that are unclaimed and also seats that are&#xA;claimed by someone else. If the seat is already claimed by the&#xA;subject then nothing happens.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="claim_table" class="TunableClaimRestaurantTable" description="A loot that allows a sim to claim a restaurant table. This works for&#xA;an individual Sim or any group that the specified Sim is part of.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="create_notebook_entry" class="TunableNotebookEntryLootOp" description="Unlocks a notebook entry to be displayed on the notebook UI.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="notebook_entry" class="TunableVariant" default="none" description="Type of unlock for notebook entries.">
                  <TunableTuple name="create_entry_from_participant" class="Tunable_NotebookEntryFromParticipant" description="Creates a notebook entry from the tuned participant.">
                    <TunableEnum type="ParticipantTypeObject" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeObject" description="Participant on which we will get the noteboook entry information &#xA;from."/>
                    <Tunable type="notebook_entry" name="reference_notebook_entry" class="TunableReference" description="Reference to a notebook entry where we will get the core notebook&#xA;data (category, subcategory) but we will use the the object &#xA;reference to populate the rest of the data. " allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                  <TunableTuple name="create_entry_from_recipe" class="Tunable_NotebookEntryFromRecipe" description="Creates a notebook entry from a reference entry and a recipe reference&#xA;to get the detailed data.">
                    <Tunable type="recipe" name="recipe" class="TunableReference" description="The recipe to use to create the notebook entry.  This recipe&#xA;should have the use_ingredients tunable set so the notebook&#xA;system has data to populate the entry." allow_none="False" pack_safe="True"/>
                    <Tunable type="notebook_entry" name="reference_notebook_entry" class="TunableReference" description="Reference to a notebook entry where we will get the core notebook&#xA;data (category, subcategory).   " allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                  <TunableTuple name="create_new_entry" class="Tunable_NotebookEntryFromReference" description="Creates a notebook entry from a notebook tuning instance.">
                    <Tunable type="notebook_entry" name="notebook_entry" class="TunableReference" description="Create a new entry filling up all the fields for an entry." allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                  <Tunable name="none" class="TunableExistance"/>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="create_object" class="TunableObjectCreationOp" description="Loot operation to create an object.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="creation_data" class="TunableObjectCreationDataVariant" default="definition" description="Define the object to create.">
                  <TunableTuple name="clone_object" class="Tunable_CloneObject" description="Specify an object to be cloned.">
                    <TunableVariant type="None" name="definition_override" class="OptionalTunable" default="disabled" description="Override to specify a different definition than that of the object&#xA;being cloned.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="object" name="enabled" class="TunableReference" description="The definition of the object that is created." allow_none="False"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="source_object" class="TunableVariant" default="slotted_to_participant" description="Where the object to be cloned can be found.">
                      <TunableTuple name="is_participant" class="Tunable_ParticipantObject" description="The object is a participant.">
                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="Used to clone a participant object."/>
                      </TunableTuple>
                      <TunableTuple name="slotted_to_participant" class="Tunable_SlottedObject" description="The object is one slotted on a participant.">
                        <TunableTuple name="slotted_to_participant" class="TunableTuple" description="Used to clone an object slotted to a participant.">
                          <TunableEnum type="ParticipantType" name="parent_object_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant object which will contain the specified&#xA;slot where the object to be cloned is slotted."/>
                          <Tunable type="slot_type" name="parent_slot_type" class="TunableReference" description="A particular slot type where the cloned object can be found.  The&#xA;first slot of this type found on the source_object will be used." allow_none="False"/>
                        </TunableTuple>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="create_photo_object" class="Tunable_CreatePhotoObject" description="Create a photo object based on the participant target.">
                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="Used to create photo of a participant object."/>
                  </TunableTuple>
                  <TunableTuple name="definition" class="Tunable_ObjectDefinition" description="Specify an object definition.">
                    <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object that is created." allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                  <TunableTuple name="definition_tested" class="Tunable_ObjectDefinitionTested" description="Specify an object definition based on tests.">
                    <TunableList name="definitions" class="TunableList" description="A list of potential object definitions to use.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object to be created." allow_none="False" pack_safe="True"/>
                        <TunableTuple name="weight" class="TunableTunableMultiplier" description="The weight of this definition relative to other&#xA;definitions in this list.">
                          <Tunable type="float" name="base_value" class="Tunable" default="1" description="The basic value to return if no modifications are applied." tuning_state="NeedsTuning"/>
                          <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_value.">
                            <TunableTuple class="TunableTuple">
                              <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_value if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                              <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                            </TunableTuple>
                          </TunableList>
                        </TunableTuple>
                      </TunableTuple>
                    </TunableList>
                    <Tunable type="object" name="fallback_definition" class="TunableReference" description="Should no test pass, use this definition." allow_none="True"/>
                  </TunableTuple>
                  <TunableTuple name="from_stored_object_info" class="Tunable_CreateObjectFromStoredObjectInfo" description="Create an object using info stored on the source participant.">
                    <TunableEnum type="ParticipantTypeSingleSim" name="stored_object_info_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingleSim" description="The Sim participant of this interaction which contains the stored&#xA;object info that is used to create this object."/>
                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object being stored. This will be used to retrieve the&#xA;stored object from the Stored Object Info Component of the target." invalid_entries="INVALID"/>
                  </TunableTuple>
                  <TunableTuple name="random_by_tags" class="Tunable_RandomFromTags" description="Specify a tag which will randomly choose an object that has been marked with that&#xA;tag and create it.">
                    <TunableList name="filter_tags" class="TunableTags" min="1" unique_entries="true">
                      <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="Define tags to try and create the object. Picks randomly from&#xA;objects with these tags." invalid_entries="INVALID" pack_safe="True"/>
                    </TunableList>
                  </TunableTuple>
                  <TunableTuple name="recipe" class="Tunable_RecipeDefinition" description="Specify a recipe. The final product's definition is used as a&#xA;definition.">
                    <Tunable type="recipe" name="recipe" class="TunableReference" description="The recipe to use to create the object." allow_none="False"/>
                    <Tunable type="bool" name="show_crafted_by_text" class="Tunable" default="True" description="Show crafted by text on the tooltip of item created by this recipe. "/>
                  </TunableTuple>
                </TunableVariant>
                <Tunable type="bool" name="destroy_on_placement_failure" class="Tunable" default="False" description="If checked, the created object will be destroyed on placement failure.&#xA;If unchecked, the created object will be placed into an appropriate&#xA;inventory on placement failure if possible.  If THAT fails, object&#xA;will be destroyed."/>
                <TunableList name="initial_states" class="TunableList" description="A list of states to apply to the object as soon as it is created.">
                  <TunableTuple class="TunableTuple" description="The state to apply and optional tests to decide if the state&#xA;should apply.">
                    <Tunable type="object_state" name="state" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                    <TunableVariant type="None" name="tests" class="OptionalTunable" default="disabled" description="If enabled, the state will only get set on the created&#xA;object if the tests pass. Note: These tests can not be&#xA;performed on the newly created object.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TdescFragTag name="enabled" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                    </TunableVariant>
                  </TunableTuple>
                </TunableList>
                <TunableVariant type="None" name="location" class="TunableVariant" default="position" description="Where the object should be created.">
                  <TunableTuple name="carry" class="TunableTuple" description="Carry the object. Note: This expects an animation in the&#xA;interaction to trigger the carry.">
                    <TunableVariant type="None" name="carry_track_override" class="OptionalTunable" default="disabled" description="If enabled, specify which carry track the Sim must use to carry the&#xA;created object.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="PostureTrackGroup" name="enabled" class="TunableEnumEntry" default="PostureTrack.RIGHT" static_entries="postures.PostureTrackGroup" description="Which hand to carry the object in."/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="inventory" class="TunableTuple" description="An inventory based off of the chosen Participant Type.">
                    <TunableEnum type="ParticipantType" name="location_target" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="&quot;The owner of the inventory the object will be created in.&quot;"/>
                    <Tunable type="bool" name="mark_object_as_stolen_from_career" class="Tunable" default="False" description="Marks the object as stolen from a career by the tuned location_target participant.&#xA;This should only be checked if this basic extra is on a CareerSuperInteraction."/>
                  </TunableTuple>
                  <TunableTuple name="position" class="Tunable_PlacementStrategyLocation" description="The object is placed somewhere on the ground/floor. This executes an FGL&#xA;search.">
                    <Tunable type="bool" name="allow_off_lot_placement" class="Tunable" default="False" description="If checked, objects will be allowed to be placed off-lot. If&#xA;unchecked, we will always attempt to place created objects on the&#xA;active lot."/>
                    <TunableVariant type="None" name="facing" class="OptionalTunable" default="disabled" description="If enabled, the final location will ensure that the placed object&#xA;faces a specific location.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableTuple">
                        <Tunable type="float" name="angle" class="TunableAngle" default="90.0" min="0.0" max="180.0" description="The angle that facing will trying to keep inside while test&#xA;FGL. The larger the number is, the more offset the facing&#xA;could be, but the chance will be higher to succeed in FGL." tuning_state="NeedsTuning"/>
                        <TunableVariant type="None" name="target" class="OptionalTunable" default="face_initial_location" description="The location to face.">
                          <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="Specify a participant that needs to be faced."/>
                          <Tunable name="face_initial_location" class="TunableExistance"/>
                        </TunableVariant>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="bool" name="ignore_bb_footprints" class="Tunable" default="True" description="Ignores the build buy object footprints when trying to find a&#xA;position for creating this object. This will allow objects to appear&#xA;on top of each other.&#xA;&#xA;e.g. Trash cans when tipped over want to place the trash right under&#xA;them so it looks like the pile came out from the object while it was&#xA;tipped."/>
                    <Tunable type="bool" name="in_same_room" class="Tunable" default="False" description="If checked, objects will be placed in the same block/room of the&#xA;initial location. If there is not enough space to put down the&#xA;object in the same block, the placement will fail."/>
                    <TunableVariant type="None" name="initial_location" class="TunableVariant" default="from_participant" description="The FGL search initial position is determined by this. If more than&#xA;one initial position is available, all are considered up to the&#xA;specified upper bound.">
                      <TunableTuple name="from_lot" class="Tunable_LocationFromLot" description="The location is the default lot location."/>
                      <TunableTuple name="from_participant" class="Tunable_ObjectsFromParticipant" description="The object is determined by a participant on the resolver.">
                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant that determines the object to be used for the&#xA;specified placement strategy."/>
                      </TunableTuple>
                      <TunableTuple name="from_tags" class="Tunable_ObjectsFromTags" description="The object is determined by a set of specified tags.">
                        <TunableList name="tags" class="TunableTags" unique_entries="true">
                          <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="For each tag, in order, gather objects that match that have that&#xA;tag. If the placement fails, consider another object, then consider&#xA;objects for the next tag." invalid_entries="INVALID" pack_safe="True"/>
                        </TunableList>
                      </TunableTuple>
                      <TunableTuple name="front_door_object" class="Tunable_FrontDoorObject" description="The front door."/>
                    </TunableVariant>
                    <TunableTuple name="initial_location_offset" class="TunableTuple">
                      <TunableTuple name="default_offset" class="TunableVector3" description="The default Vector3 offset from the location target's&#xA;position.">
                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="z" class="Tunable" default="0.0" description="z component" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                      <TunableVariant type="None" name="x_randomization_range" class="OptionalTunable" default="disabled" description="A random number in this range will be applied to the&#xA;default offset along the x axis.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableInterval" description="A random number in this range will be applied to the&#xA;default offset along the x axis.">
                          <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="upper_bound" class="TunableRange" default="0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="z_randomization_range" class="OptionalTunable" default="disabled" description="A random number in this range will be applied to the&#xA;default offset along the z axis.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableInterval" description="A random number in this range will be applied to the&#xA;default offset along the z axis.">
                          <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="upper_bound" class="TunableRange" default="0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableTuple>
                    <Tunable type="bool" name="stay_in_connected_connectivity_group" class="Tunable" default="True" description="If unchecked then the object will be allowed to be placed in&#xA;a connectivity group that is currently disconnected from&#xA;the starting location.&#xA;&#xA;If checked then the placement will fail if there is not a&#xA;position inside a connected connectivity group from the&#xA;starting position that can be used for placement."/>
                    <Tunable type="bool" name="stay_outside_placement" class="Tunable" default="False" description="If checked, objects will run their placement search only for&#xA;positions that are considered outside."/>
                  </TunableTuple>
                  <TunableTuple name="slot" class="Tunable_PlacementStrategySlot" description="The object is slotted somewhere.">
                    <TunableVariant type="None" name="parent" class="TunableVariant" default="from_participant" description="The object this object is going to be slotted into.">
                      <TunableTuple name="from_participant" class="Tunable_ObjectsFromParticipant" description="The object is determined by a participant on the resolver.">
                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant that determines the object to be used for the&#xA;specified placement strategy."/>
                      </TunableTuple>
                      <TunableTuple name="from_tags" class="Tunable_ObjectsFromTags" description="The object is determined by a set of specified tags.">
                        <TunableList name="tags" class="TunableTags" unique_entries="true">
                          <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="For each tag, in order, gather objects that match that have that&#xA;tag. If the placement fails, consider another object, then consider&#xA;objects for the next tag." invalid_entries="INVALID" pack_safe="True"/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="parent_slot" class="TunableVariant" default="none" description="The slot on location_target where the object should go. This may be&#xA;either the exact name of a bone on the location_target or a slot&#xA;type, in which case the first empty slot of the specified type in&#xA;which the child object fits will be used.">
                      <Tunable type="str" name="by_name" class="Tunable" default="_ctnm_" description="The exact name of a slot on the location_target in which the&#xA;target object should go."/>
                      <Tunable type="slot_type" name="by_reference" class="TunableReference" description="A particular slot type in which the target object should go.&#xA;The first empty slot of this type found on the location_target&#xA;will be used." allow_none="False"/>
                      <Tunable name="none" class="TunableExistance"/>
                    </TunableVariant>
                    <Tunable type="bool" name="use_part_owner" class="Tunable" default="False" description="If enabled and target is a part, placement will use the part owner&#xA;instead of the part."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantTypeSingleSim" name="owner_sim" class="TunableEnumEntry" default="ParticipantType.Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant Sim whose household should own the object. Leave this&#xA;as Invalid to not assign ownership."/>
                <Tunable type="int" name="quantity" class="TunableRange" default="1" min="1" max="10" description="The number of objects that will be created." tuning_state="NeedsTuning"/>
                <TunableVariant type="None" name="reserve_object" class="OptionalTunable" default="disabled" description="If this is enabled, the created object will be reserved for use by&#xA;the set Sim.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantTypeActorTargetSim" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeActorTargetSim"/>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableVariant type="None" name="temporary_tags" class="OptionalTunable" default="disabled" description="If enabled, these Tags are added to the created object and DO NOT&#xA;persist.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableList name="enabled" class="TunableSet" min="1" description="A set of temporary tags that are added to the created object.&#xA;These tags DO NOT persist." unique_entries="true">
                    <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="A tag that is added to the created object. This tag DOES&#xA;NOT persist."/>
                  </TunableList>
                </TunableVariant>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="create_puddles" class="TunableCreatePuddlesLootOp" description="This loot will create puddles based on a tuned set of chances.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="default_puddle_factory" class="TunablePuddleFactory" description="This set of chances will be used if the sim creating the puddle does&#xA;not match any of the traits in the trait_puddle_chances tuning list.">
                  <Tunable type="int" name="large" class="TunableRange" default="0" min="0" max="None" description="Relative chance of large puddle." tuning_state="NeedsTuning"/>
                  <TunableEnum type="PuddleLiquid" name="liquid" class="TunableEnumEntry" default="WATER" dynamic_entries="objects-puddles.PuddleLiquid._elements" static_entries="objects-puddles.PuddleLiquid" description="The liquid of the puddle that will be generated."/>
                  <Tunable type="int" name="medium" class="TunableRange" default="0" min="0" max="None" description="Relative chance of medium puddle." tuning_state="NeedsTuning"/>
                  <Tunable type="int" name="none" class="TunableRange" default="5" min="0" max="None" description="Relative chance of no puddle." tuning_state="NeedsTuning"/>
                  <Tunable type="int" name="small" class="TunableRange" default="5" min="0" max="None" description="Relative chance of small puddle." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <Tunable type="float" name="max_distance" class="Tunable" default="2.5" description="Maximum distance from the source object a puddle can be spawned.&#xA;If no position is found within this distance no puddle will be &#xA;made." tuning_state="NeedsTuning"/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of the interaction whom the puddle&#xA;should be placed near."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="trait_based_puddle_factory" class="OptionalTunable" default="disabled" description="A particpant type may be set to choose a puddle factory&#xA;based on traits the participant has.&#xA;         &#xA;If disabled, the default puddle factory is used.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTuple">
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant type whose traits are checked to determine&#xA;which Trait Puddle Factory to use."/>
                    <TunableList name="trait_puddle_factory" class="TunableList" description="Ordered list of puddle factories with associated trait.&#xA;Will use the first factory whose trait is on the subject.">
                      <TunableTuple class="TunableTuple">
                        <TunableTuple name="puddle_factory" class="TunablePuddleFactory" description="The chance of creating a puddle of various sizes.">
                          <Tunable type="int" name="large" class="TunableRange" default="0" min="0" max="None" description="Relative chance of large puddle." tuning_state="NeedsTuning"/>
                          <TunableEnum type="PuddleLiquid" name="liquid" class="TunableEnumEntry" default="WATER" dynamic_entries="objects-puddles.PuddleLiquid._elements" static_entries="objects-puddles.PuddleLiquid" description="The liquid of the puddle that will be generated."/>
                          <Tunable type="int" name="medium" class="TunableRange" default="0" min="0" max="None" description="Relative chance of medium puddle." tuning_state="NeedsTuning"/>
                          <Tunable type="int" name="none" class="TunableRange" default="5" min="0" max="None" description="Relative chance of no puddle." tuning_state="NeedsTuning"/>
                          <Tunable type="int" name="small" class="TunableRange" default="5" min="0" max="None" description="Relative chance of small puddle." tuning_state="NeedsTuning"/>
                        </TunableTuple>
                        <Tunable type="trait" name="trait" class="TunableReference" allow_none="False"/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="create_situation" class="TunableCreateSituationLootOp">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="create_situation" class="TunableSituationStart" description="Start a Situation as part of this Interaction.">
                  <TunableVariant type="None" name="actor_init_job" class="OptionalTunable" default="use_default_job" description="The Situation job actor would be assigned while join the situation.">
                    <Tunable type="situation_job" name="specify_job" class="TunableReference" allow_none="False"/>
                    <Tunable name="use_default_job" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="bool" name="invite_actor" class="Tunable" default="True" description="If checked, then the actor of this interaction will be invited&#xA;in the default job. This is the common case.&#xA;&#xA;If not checked, then the actor will not be invited. The Tell&#xA;A Ghost Story interaction spawning a Ghost walkby is an example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                  <Tunable type="bool" name="invite_household_sims_on_active_lot" class="Tunable" default="False" description="If checked then all instanced sims on the active lot will be&#xA;invited. This is not a common case. An example of this is&#xA;leaving the hospital after having a baby, bringing both sims&#xA;home.&#xA;&#xA;If not checked, then no additional sims will be invited.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                  <TunableList name="invite_participants" class="TunableMapping" mapping_key="participants_to_invite" mapping_value="invite_to_job" description="The map to invite certain participants into the situation as&#xA;specified job if assigned. Otherwise will invite them as&#xA;situation's default job.">
                    <TunableTuple class="TunableTuple">
                      <TunableVariant type="None" name="invite_to_job" class="OptionalTunable" default="use_default_job" description="A list of situation jobs that can be specified.  If a&#xA;single job is specified then all Sims will be given&#xA;that job.  Otherwise we will loop through all of the&#xA;Sims invited and give them jobs in list order.  The&#xA;list will begin to be repeated if we run out of jobs.&#xA;&#xA;NOTE: We cannot guarantee the order of the Sims being&#xA;passed in most of the time.  Use this if you want a&#xA;distribution of different jobs, but without a guarantee&#xA;that Sims will be assigned to each one.">
                        <TunableList name="specify_job" class="TunableList" description="A list of situation jobs that can be specified.  If a&#xA;single job is specified then all Sims will be given&#xA;that job.  Otherwise we will loop through all of the&#xA;Sims invited and give them jobs in list order.  The&#xA;list will begin to be repeated if we run out of jobs.&#xA;&#xA;NOTE: We cannot guarantee the order of the Sims being&#xA;passed in most of the time.  Use this if you want a&#xA;distribution of different jobs, but without a guarantee&#xA;that Sims will be assigned to each one.">
                          <Tunable type="situation_job" class="TunableReference" allow_none="False"/>
                        </TunableList>
                        <Tunable name="use_default_job" class="TunableExistance"/>
                      </TunableVariant>
                      <TunableEnum type="ParticipantType" name="participants_to_invite" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant of who will join the situation."/>
                    </TunableTuple>
                  </TunableList>
                  <Tunable type="bool" name="invite_picked_sims" class="Tunable" default="True" description="If checked then any picked sims of this interaction will be&#xA;invited to the default job.  This is the common case.&#xA;&#xA;If not checked, then any picked sims will not be invited.  The&#xA;Tell A Ghost Story interaction spawning a Ghost walkby is an&#xA;example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                  <Tunable type="bool" name="invite_target_sim" class="Tunable" default="True" description="If checked then the target sim of this interaction will be&#xA;invited to the default job.  This is the common case.&#xA;&#xA;If not checked, then the target sim will not be invited.  The&#xA;Tell A Ghost Story interaction spawning a Ghost walkby is an&#xA;example.&#xA;&#xA;If your situation takes care of all the sims that should be in&#xA;the default job itself (such as auto-invite) it will probably&#xA;not work if this is checked."/>
                  <TunableVariant type="None" name="linked_sim_participant" class="OptionalTunable" default="disabled" description="If enabled, this situation will be linked to the specified Sim.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType"/>
                  </TunableVariant>
                  <Tunable type="situation" name="situation" class="TunableReference" description="The Situation to start when this Interaction runs." allow_none="False"/>
                  <TunableVariant type="None" name="situation_default_target" class="OptionalTunable" default="disabled" description="If enabled, the participant of the interaction will be set as&#xA;the situation target object.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant that will be set as the situation's default target"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="situation_guest_info" class="OptionalTunable" default="disabled" description="By default, situation guest infos are created as an invite.&#xA;This overrrides that behavior.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="SituationGuestInfoFactory" description="Situation Guest Info tuning. Consult a GPE if you're at all unsure&#xA;what any of this does.">
                      <TunableEnum type="BouncerRequestPriority" name="bouncer_request_priority" class="TunableEnumEntry" default="EVENT_DEFAULT_JOB" static_entries="situations-bouncer-bouncer_types.BouncerRequestPriority" description="Bouncer Request Priority. Requests with higher priority will be&#xA;filled first. Conversely, lower priority requests will be pushed&#xA;out first upon hitting the sim cap."/>
                      <TunableEnum type="RequestSpawningOption" name="request_spawning_option" class="TunableEnumEntry" default="DONT_CARE" static_entries="situations-bouncer-bouncer_types.RequestSpawningOption" description="Spawning Option.&#xA;MUST_SPAWN: Choose from uninstantiated Sims.&#xA;CANNOT_SPAWN: Choose from instantiated Sims.&#xA;DONT_CARE: Choose from all Sims."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="target_init_job" class="OptionalTunable" default="use_default_job" description="The Situation job target would be assigned while join the situation.">
                    <Tunable type="situation_job" name="specify_job" class="TunableReference" allow_none="False"/>
                    <Tunable name="use_default_job" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="bool" name="user_facing" class="Tunable" default="True" description="If checked, then the situation will be user facing (have goals, &#xA;and scoring).&#xA;&#xA;If not checked, then situation will not be user facing.&#xA;&#xA;This setting does not override the user option to make all&#xA;situations non-scoring.&#xA;&#xA;Example: &#xA;    Date -&gt; Checked&#xA;    Invite To -&gt; Not Checked"/>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="custom_tooltip_transfer" class="TunableTransferCustomTooltip" description="Loot action to transfer a Custom Tooltip between participants. The Custom&#xA;Tooltip is taken from the Subject and applied to the Target.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="destroy_objects_from_inventory" class="TunableDestroyObjectsFromInventoryLootOp" description="Destroy every object in the target's inventory that passes the&#xA;tuned tests.">
                <TunableVariant type="None" name="award_value" class="OptionalTunable" default="disabled" description="If necessary, define how an amount corresponding to the objects'&#xA;value is given to Sims.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTuple">
                    <TunableEnum type="FundsSource" name="funds" class="TunableEnumEntry" default="HOUSEHOLD" static_entries="sims-funds.FundsSource" description="Where to award funds to.  This can go to household&#xA;funds by default, or to business funds."/>
                    <Tunable type="float" name="multiplier" class="TunableRange" default="1.0" min="0.0" max="None" description="Value multiplier for the award." tuning_state="NeedsTuning"/>
                    <TunableEnum type="ParticipantTypeSingleSim" name="recipient" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingleSim" description="Who to award funds to." invalid_entries="Invalid"/>
                    <TunableTuple name="tested_multipliers" class="TunableTunableMultiplier" description="Each multiplier that passes its test set will be applied to&#xA;each award payment.">
                      <Tunable type="float" name="base_value" class="Tunable" default="1" description="The basic value to return if no modifications are applied." tuning_state="NeedsTuning"/>
                      <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_value.">
                        <TunableTuple class="TunableTuple">
                          <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_value if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                  </TunableTuple>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="count" class="TunableVariant" default="all" description="The total number of objects to destroy. If multiple types of objects&#xA;match the criteria test, an arbitrary set of objects, no more than&#xA;the specified count, is destroyed.">
                  <Tunable name="all" class="TunableExistance"/>
                  <Tunable type="int" name="number" class="TunableRange" default="1" min="0" max="None" tuning_state="NeedsTuning"/>
                </TunableVariant>
                <TunableEnum type="DestroyObjectsFromInventorySource" name="object_source" class="TunableEnumEntry" default="ALL_STORAGE" static_entries="interactions-utils-loot_ops.DestroyObjectsFromInventorySource" description="The target's inventory storage types to search for objects to&#xA;destroy."/>
                <TdescFragTag name="object_tests" class="TunableTestSet" description="A list of tests to apply to all objects in the target inventory.&#xA;Every object that passes these tests will be destroyed."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="discover_clue" class="TunableDiscoverClueLootOp" description="An operation that gives the player a notification and a notebook entry&#xA;about a clue they have discovered.">
                <Tunable type="career" name="career_reference" class="TunableReference" description="A reference to the detective career that keeps track of what clues&#xA;to display to the player." allow_none="False" restrict="DetectiveCareer"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="action" name="fallback_actions" class="TunableReference" description="List of loot actions that will occur if there are no more clues to&#xA;be discovered. This can be used to hook up a notification, for&#xA;example." allow_none="True" restrict="LootActions,RandomWeightedLoot"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="dynamic_buff_loot" class="TunableDynamicBuffLootOp" description="This loot will give a random buff based on the weight get tuned inside.">
                <TunableVariant type="None" name="buff_reason" class="OptionalTunable" default="disabled" description="If set, specify a reason why the buff was added.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The reason the buff was added. This will be displayed in the&#xA;buff tooltip."/>
                </TunableVariant>
                <TunableList name="buffs" class="TunableMapping" mapping_key="key" mapping_value="value" description="            ">
                  <TunableTuple class="TunableTuple">
                    <Tunable type="buff" name="key" class="TunableReference" description="Buff that will get this weight in the random." allow_none="False"/>
                    <Tunable type="float" name="value" class="Tunable" default="0" description="The weight value." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableList>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="" invalid_entries="Invalid,All,PickedItemId"/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="dynamic_skill_loot" class="TunableDynamicSkillLootOp" description="DynamicSkillLootOp is used to tune a skill gain. You get different &#xA;amounts of skill based on your current skill level.&#xA;The amount comes from the curve in the Skill Loot Data Override-&gt;Effectiveness.&#xA;&#xA;Super Interaction, Mixer Interaction, and Recipe can override specific&#xA;fields for DynamicSkillLootOp using a field called &quot;Skill Loot Data&quot;&#xA;&#xA;The Overrides are prioritized in this order:&#xA;1. Dynamic Skill Loot Tuning&#xA;2. Mixer Interaction - Skill Loot Data&#xA;3. Super Interaction - Skill Loot Data&#xA;4. Recipe            - Skill Loot Data&#xA;&#xA;Examples:&#xA;&#xA;1. The most common use of overrides is to use the same Dynamic Skill Loot on&#xA;multiple interactions, and then setting the stat in the Skill Loot Data of&#xA;the interaction. This lets you use the same loot for different skills.&#xA;   &#xA;2. Level Range lets you cap the min or max amount of skill gain. You get &#xA;a DynamicSkillLootOp for your fitness which is at level 2. We look up&#xA;level 2 in Skill/Skill Effectiveness Gain but it only has tuning level 5 to 8.&#xA;We then clamp 2 up to 5 and get the skill gain for level 5 and pay out that skill.&#xA;If your skill was level 9 you would have been clamped down to the skill gain at&#xA;level 8.&#xA;&#xA;3. If we setup tuning like this:&#xA;    Recipe -&gt; Super Interaction -&gt; Mixer Interaction -&gt; DynamicSkillLootOp&#xA;&#xA;With:&#xA;    DynamicSkillLootOp - Skill Loot Data Override ( Effectiveness STANDARD )&#xA;    Mixer Interaction - Skill Loot Data( Effectiveness Huge )&#xA;    Super Interaction - Skill Loot Data( Stat: Fitness )&#xA;    Recipe - Skill Loot Data( Stat: Cooking )&#xA;    &#xA;In this example you would gain: STANDARD Skill Gain for the Fitness Stat.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="skill_loot_data_override" class="TunableSkillLootData" description="This data will override loot data in the interaction. In&#xA;interaction, tuning field 'skill_loot_data' is used to determine&#xA;skill loot data.">
                  <TunableEnum type="SkillEffectiveness" name="effectiveness" class="TunableEnumEntry" default="None" dynamic_entries="statistics-skill.SkillEffectiveness._elements" static_entries="statistics-skill.SkillEffectiveness" description="Enum to determine which curve to use when giving&#xA;points to sim." tuning_state="NeedsTuning"/>
                  <TunableVariant type="None" name="level_range" class="OptionalTunable" default="disabled" description="Interval is used to clamp the sim's user facing&#xA;skill level to determine how many point to give. If&#xA;disabled, level passed to the dynamic skill loot&#xA;will always be the current user facing skill level&#xA;of sim. &#xA;Example: if sim is level 7 in fitness but&#xA;interaction skill level is only for 1 to 5 give the&#xA;dynamic skill amount as if sim is level 5.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableInterval" description="Interval is used to clamp the sim's user facing&#xA;skill level to determine how many point to give. If&#xA;disabled, level passed to the dynamic skill loot&#xA;will always be the current user facing skill level&#xA;of sim. &#xA;Example: if sim is level 7 in fitness but&#xA;interaction skill level is only for 1 to 5 give the&#xA;dynamic skill amount as if sim is level 5.">
                      <Tunable type="int" name="lower_bound" class="TunableRange" default="0" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                      <Tunable type="int" name="upper_bound" class="TunableRange" default="1" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="True" pack_safe="True" restrict="Skill"/>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="extinguish_nearby_fire" class="TunableExtinguishNearbyFireLootOp" description="Loot operation used to extinguish fires and sims near the subject">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="fire" class="TunableFireLootOp" description="Loot operation used to create fire at the position of the subject.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="fire_clean_scorch" class="TunableFloorFeatureRemoveOp" description="This loot will remove any instance of the tuned floor features within the&#xA;removal radius of the Sim.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="FloorFeatureType" name="floor_feature_type" class="TunableEnumEntry" default="BURNT" static_entries="build_buy.FloorFeatureType" description="The floor feature type that will be removed."/>
                <Tunable type="float" name="removal_radius" class="Tunable" default="2.5" description="The radius in the loot will remove floor features." tuning_state="NeedsTuning"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="fire_deactivate_sprinkler" class="TunableFireDeactivateSprinklerLootOp" description="Loot operation used to deactivate the lot's fire sprinkler system">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="fix_gender_preference" class="TunableGenderPreferenceOp" description="Loot that will influence the gender preference of the sims involved in the&#xA;interaction.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="int" name="gender_preference_statistic_decrease" class="Tunable" default="0" description="The value that will be added to the appropriate gender&#xA;preference statistic when this loot is applied. This should be&#xA;a negative number. The global gender preference tuning is a&#xA;module tunable GENDER_PREFERENCE." tuning_state="NeedsTuning"/>
                <Tunable type="int" name="gender_preference_statistic_increase" class="Tunable" default="0" description="The value that will be added to the appropriate gender&#xA;preference statistic when this loot is applied. The global&#xA;gender preference tuning is module tunable GENDER_PREFERENCE." tuning_state="NeedsTuning"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="game_over" class="TunableGameOver" description="Game component's game over loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="give_sickness" class="TunableGiveSicknessLootOp" description="Makes the subject sick with a given or random sickness.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="reset_diagnosis_progress" class="Tunable" default="True" description="If checked then reset the diagnosis progress, make all&#xA;exams available, and clear the list of treatments performed."/>
                <TunableVariant type="None" name="sickness" class="TunableVariant" default="random" description="Sickness to give to the subject.">
                  <Tunable name="random" class="TunableExistance"/>
                  <TunableTuple name="sickness_criteria" class="Tunable_SicknessMatchingCritera" description="Choose from available sicknesses using tags.">
                    <TunableVariant type="None" name="difficulty_range" class="OptionalTunable" default="disabled" description="Optionally define the difficulty rating range that is required&#xA;for the Sim's sickness.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableInterval" description="The difficulty rating range, this maps to 'difficulty_rating'&#xA;values in Sickness tuning.">
                        <Tunable type="float" name="lower_bound" class="TunableRange" default="0" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="upper_bound" class="TunableRange" default="10" min="None" max="10" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="tags" class="OptionalTunable" default="disabled" description="Optionally, only sicknesses that share any of the tags specified are considered. ">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableList name="enabled" class="TunableTags" unique_entries="true">
                        <TunableEnum type="Tag" class="TunableEnumWithFilter" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" dynamic_entries_prefix="Sickness" invalid_entries="INVALID" pack_safe="True"/>
                      </TunableList>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="specific_sickness" class="Tunable_GiveSpecificSickness" description="Give a specific sickness to the subject.">
                    <Tunable type="sickness" name="sickness" class="TunableReference" description="Sickness to give to the subject." allow_none="False" pack_safe="True" restrict="Sickness"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="greeting" class="TunableGreetingLootOp" description="A loot operation that runs through the greetings tuning and attempts to&#xA;push a greeting between two participants.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantTypeSingleSim" name="greeting_target" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be targeted by the pushed interaction."/>
                <TunableEnum type="GreetingType" name="greeting_type" class="TunableEnumEntry" default="GREETING_GROUP" static_entries="interactions-social-greeting_socials-greetings.GreetingType" description="The type of greeting we want to push."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="hidden_inventory_transfer" class="TunableHiddenInventoryTransferLoot" description="Tuning that moves an object to and from the hidden inventory.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="transfer_type" class="TunableVariant" default="move_to_hidden_inventory" description="The type of hidden inventory transfer to perform.">
                  <TunableTuple name="move_from_hidden_inventory" class="TunableMoveFromHiddenInventory" description="Transfer an object from the hidden inventory to the inventory."/>
                  <TunableTuple name="move_to_hidden_inventory" class="TunableMoveToHiddenInventory" description="Transfer an object from the inventory to the hidden inventory."/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="increment_community_challenge_count" class="TunableIncrementCommunityChallengeCount" description="An operation to increment the count for the active community challenge.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="int" name="count" class="Tunable" default="1" description="The number to increment the community count by." tuning_state="NeedsTuning"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="interest_income" class="TunableHouseholdFundsInterestLootOp" description="This loot will deliver interest income to the current Household for their current funds,&#xA;based on the percentage tuned against total held. ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="int" name="interest_rate" class="Tunable" default="0" description="The percentage of interest to apply to current funds." tuning_state="NeedsTuning"/>
                <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="If enabled, this notification will display when this interest payment is made.&#xA;Token 0 is the Sim - i.e. {0.SimFirstName}&#xA;Token 1 is the interest payment amount - i.e. {1.Money}">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                    <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                    </TunableVariant>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                    <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="inventory_loot" class="TunableInventoryLoot" description="Loot option for transfering an object from an owner Sim to a &#xA;target Sim.&#xA;&#xA;If objects are in the inventory it will try to do a transfer &#xA;from inventory-inventory.&#xA;If not it will try to mail the gift to other Sim&#xA;&#xA;e.g. Give gift interaction, you want to give an object from sim A &#xA;inventory to Sim B">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="subject" class="OptionalTunable" default="disabled" description="The participant type who has the inventory that the&#xA;object goes into during this loot.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant type who has the inventory that the&#xA;object goes into during this loot."/>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="CarriedObject" static_entries="interactions.ParticipantType" description="The participant type of the object which would get to&#xA;switch inventory in the loot"/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="know_other_sims_career" class="TunableKnowOtherSimCareerOp" description="An operation that sets career known on a relationship between two Sims.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="know_other_sims_statistics" class="TunableKnowOtherSimsStat" description="An operation that add a known stat to the relationship between&#xA;two Sims.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableList name="statistics" class="TunableSet" description="A list of all the Statistics that the Sim can learn from&#xA;this loot op." unique_entries="true">
                  <Tunable type="statistic" class="TunableReference" description="A tunable reference to a statistic that might be learned&#xA;from this op." allow_none="False" pack_safe="True"/>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="know_other_sims_trait" class="TunableKnowOtherSimTraitOp" description="An operation that sets a known trait on a relationship between two Sims.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="Specify a notification that will be displayed for every subject if&#xA;information is learned about each individual target_subject. This&#xA;should probably be used only if you can ensure that target_subject&#xA;does not return multiple participants. The first two additional&#xA;tokens are the Sim and target Sim, respectively. A third token&#xA;containing a string with a bulleted list of trait names will be a&#xA;String token in here. If you are learning multiple traits, you&#xA;should probably use it. If you're learning a single trait, you can&#xA;get away with writing specific text that does not use this token.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableNotificationElement" description="Show a notification to a Sim's player.">
                    <Tunable type="bool" name="allow_autonomous" class="Tunable" default="True" description="If checked, then this notification will be displayed even if its&#xA;owning interaction was initiated by autonomy. If unchecked, then the&#xA;notification is suppressed if the interaction is autonomous."/>
                    <TunableVariant type="None" name="dialog" class="TunableTestedVariant" default="single">
                      <TunableVariant type="None" name="single" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                        <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                          <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunablePlayAudio">
                              <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                              <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                              <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                              </TunableVariant>
                              <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                            <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                          </TunableList>
                          <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                          <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                          <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                              <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                              <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                              </TunableTuple>
                              <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableVariant>
                          <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                          </TunableVariant>
                          <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                          <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                          </TunableVariant>
                          <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                          <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                              <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                              <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                              </TunableTuple>
                              <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableVariant>
                          <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                            <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                            <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                              <TunableList name="variations" class="TunableList">
                                <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                              <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                  <Tunable name="active_holiday" class="TunableExistance"/>
                                  <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                  <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                    <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                      <Tunable name="current_level_name" class="TunableExistance"/>
                                      <Tunable name="current_level_salary" class="TunableExistance"/>
                                      <Tunable name="next_level_name" class="TunableExistance"/>
                                      <Tunable name="next_level_salary" class="TunableExistance"/>
                                      <Tunable name="previous_level_name" class="TunableExistance"/>
                                      <Tunable name="previous_level_salary" class="TunableExistance"/>
                                    </TunableVariant>
                                    <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                  </TunableTuple>
                                  <Tunable name="current_trends" class="TunableExistance"/>
                                  <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                    <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                    <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                      <Tunable name="high_score" class="TunableExistance"/>
                                      <Tunable name="high_score_sim" class="TunableExistance"/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                  </TunableTuple>
                                  <Tunable name="interaction_cost" class="TunableExistance"/>
                                  <Tunable name="interaction_payout" class="TunableExistance"/>
                                  <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                  </TunableTuple>
                                  <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                  </TunableTuple>
                                  <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                    <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                  </TunableTuple>
                                  <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                    <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                      <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                        <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                        <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                          <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                          <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                        <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableTuple>
                                  <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                    <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                      <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                        <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                      </TunableTuple>
                                      <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                        <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                          <Tunable name="disabled" class="TunableExistance"/>
                                          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                        </TunableVariant>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                      <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                        <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                        <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                          <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                          <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                        <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableTuple>
                                  <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                  </TunableTuple>
                                  <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                          </TunableVariant>
                          <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                          </TunableVariant>
                          <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                            <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableList>
                          <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                          <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                        </TunableTuple>
                        <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                      </TunableVariant>
                      <TunableTuple name="tested" class="Tunable_TestedSelector">
                        <TunableList name="records" class="TunableList">
                          <TunableTuple class="TunableTuple">
                            <TunableVariant type="None" name="item" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                              <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                                <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunablePlayAudio">
                                    <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                                    <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                                    <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                                    </TunableVariant>
                                    <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                                  <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                                </TunableList>
                                <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                                <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                                <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                    <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                        <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                    <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                      <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                    </TunableTuple>
                                    <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableVariant>
                                <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                                </TunableVariant>
                                <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                                <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                                </TunableVariant>
                                <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                                <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                    <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                        <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                    <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                      <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                    </TunableTuple>
                                    <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableVariant>
                                <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                                  <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                  <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                                    <TunableList name="variations" class="TunableList">
                                      <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                                    <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                      <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                        <Tunable name="active_holiday" class="TunableExistance"/>
                                        <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                        <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                          <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                            <Tunable name="current_level_name" class="TunableExistance"/>
                                            <Tunable name="current_level_salary" class="TunableExistance"/>
                                            <Tunable name="next_level_name" class="TunableExistance"/>
                                            <Tunable name="next_level_salary" class="TunableExistance"/>
                                            <Tunable name="previous_level_name" class="TunableExistance"/>
                                            <Tunable name="previous_level_salary" class="TunableExistance"/>
                                          </TunableVariant>
                                          <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                        </TunableTuple>
                                        <Tunable name="current_trends" class="TunableExistance"/>
                                        <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                          <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                        </TunableTuple>
                                        <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                          <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                            <Tunable name="high_score" class="TunableExistance"/>
                                            <Tunable name="high_score_sim" class="TunableExistance"/>
                                          </TunableVariant>
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                        </TunableTuple>
                                        <Tunable name="interaction_cost" class="TunableExistance"/>
                                        <Tunable name="interaction_payout" class="TunableExistance"/>
                                        <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                          <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                        </TunableTuple>
                                        <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                        </TunableTuple>
                                        <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                          <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                        </TunableTuple>
                                        <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                          <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                            <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                              <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                              <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                                <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                                <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                              </TunableVariant>
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableTuple>
                                        <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                          <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                            <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                              <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                            </TunableTuple>
                                            <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                              <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                                <Tunable name="disabled" class="TunableExistance"/>
                                                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                              </TunableVariant>
                                            </TunableTuple>
                                          </TunableVariant>
                                          <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                            <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                              <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                              <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                                <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                                <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                              </TunableVariant>
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableTuple>
                                        <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                        </TunableTuple>
                                        <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                          <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                        </TunableTuple>
                                      </TunableVariant>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                                </TunableVariant>
                                <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                                </TunableVariant>
                                <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                                  <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableList>
                                <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                                <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                              </TunableTuple>
                              <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                            </TunableVariant>
                            <TdescFragTag name="tests" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="bool" name="limit_to_one_notification" class="Tunable" default="False" description="If checked, this notification will only be displayed for the first&#xA;recipient subject. This is useful to prevent duplicates of the&#xA;notification from showing up when sending a notification to&#xA;LotOnwers or other Participant Types that have multiple Sims."/>
                    <TunableTuple name="success_chance" class="TunableSuccessChance" description="The percentage chance that this action will be applied.">
                      <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                      <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                        <TunableTuple class="TunableTuple">
                          <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                    <TunableVariant type="None" name="timing" class="TunableVariant" default="at_end" description="Determines the exact timing of the behavior, either at the beginning&#xA;of an interaction, the end, or when an xevt occurs in an animation&#xA;played as part of the interaction.">
                      <TunableTuple name="at_beginning" class="TunableTuple" description="The behavior should occur at the very beginning of the&#xA;interaction.  It will not be tightly synchronized visually with&#xA;animation.  This isn't a very common use case and would most&#xA;likely be used in an immediate interaction or to change hidden&#xA;state that is used for bookkeeping rather than visual&#xA;appearance.">
                        <TunableVariant type="None" name="offset_time" class="OptionalTunable" default="disabled" description="If enabled, the interaction will wait this amount of time&#xA;after the beginning before running the element.&#xA;&#xA;Only use this if absolutely necessary. Better alternatives&#xA;include using xevts, time based conditional action with&#xA;loot ops, and using outcomes.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="float" name="enabled" class="TunableSimMinute" default="2" min="None" max="None" description="The interaction will wait this amount of time after the beginning before running the element" tuning_state="NeedsTuning"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="at_end" class="TunableTuple" description="The behavior should occur at the end of the interaction.  It&#xA;will not be tightly synchronized visually with animation.  An&#xA;example might be an object that gets dirty every time a Sim uses&#xA;it (so using a commodity change is overkill) but no precise&#xA;synchronization with animation is desired, as might be the case&#xA;with vomiting in the toilet.">
                        <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                      </TunableTuple>
                      <TunableTuple name="on_xevt" class="TunableTuple" description="The behavior should occur synchronized visually with an xevt in&#xA;an animation played as part of the interaction.  If for some&#xA;reason such an event doesn't occur, the behavior will occur at&#xA;the end of the interaction.  This is by far the most common use&#xA;case, as when a Sim flushes a toilet and the water level should&#xA;change when the actual flush animation and effects fire.">
                        <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                        <Tunable type="int" name="xevt_id" class="Tunable" default="100" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="notification_no_more_traits" class="OptionalTunable" default="disabled" description="Specify a notification that will be displayed when a Sim knows&#xA;all traits of another target Sim.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableNotificationElement" description="Show a notification to a Sim's player.">
                    <Tunable type="bool" name="allow_autonomous" class="Tunable" default="True" description="If checked, then this notification will be displayed even if its&#xA;owning interaction was initiated by autonomy. If unchecked, then the&#xA;notification is suppressed if the interaction is autonomous."/>
                    <TunableVariant type="None" name="dialog" class="TunableTestedVariant" default="single">
                      <TunableVariant type="None" name="single" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                        <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                          <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunablePlayAudio">
                              <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                              <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                              <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                              </TunableVariant>
                              <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                            <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                          </TunableList>
                          <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                          <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                          <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                              <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                              <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                              </TunableTuple>
                              <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableVariant>
                          <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                          </TunableVariant>
                          <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                          <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                          </TunableVariant>
                          <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                          <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                              <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                  <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                </TunableList>
                              </TunableTuple>
                              <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                              <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                              </TunableTuple>
                              <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                  <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                </TunableList>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableVariant>
                          <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                            <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                            <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                              <TunableList name="variations" class="TunableList">
                                <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                              <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                  <Tunable name="active_holiday" class="TunableExistance"/>
                                  <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                  <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                    <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                      <Tunable name="current_level_name" class="TunableExistance"/>
                                      <Tunable name="current_level_salary" class="TunableExistance"/>
                                      <Tunable name="next_level_name" class="TunableExistance"/>
                                      <Tunable name="next_level_salary" class="TunableExistance"/>
                                      <Tunable name="previous_level_name" class="TunableExistance"/>
                                      <Tunable name="previous_level_salary" class="TunableExistance"/>
                                    </TunableVariant>
                                    <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                  </TunableTuple>
                                  <Tunable name="current_trends" class="TunableExistance"/>
                                  <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                    <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                    <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                      <Tunable name="high_score" class="TunableExistance"/>
                                      <Tunable name="high_score_sim" class="TunableExistance"/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                  </TunableTuple>
                                  <Tunable name="interaction_cost" class="TunableExistance"/>
                                  <Tunable name="interaction_payout" class="TunableExistance"/>
                                  <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                  </TunableTuple>
                                  <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                  </TunableTuple>
                                  <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                    <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                  </TunableTuple>
                                  <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                    <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                      <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                        <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                        <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                          <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                          <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                        <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableTuple>
                                  <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                    <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                      <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                        <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                      </TunableTuple>
                                      <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                        <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                          <Tunable name="disabled" class="TunableExistance"/>
                                          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                        </TunableVariant>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                      <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                        <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                        <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                          <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                          <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                        </TunableVariant>
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                        <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                      </TunableTuple>
                                      <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                        <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                        <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableTuple>
                                  <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                  </TunableTuple>
                                  <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                          </TunableVariant>
                          <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                          </TunableVariant>
                          <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                            <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                              <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                <Tunable name="disabled" class="TunableExistance"/>
                                <TunableTuple name="enabled" class="TunableTuple">
                                  <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                    <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                      <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                        <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                      </TunableTuple>
                                      <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                        <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                        <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                      </TunableTuple>
                                      <Tunable name="none" class="TunableExistance"/>
                                      <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                      <TunableTuple name="string" class="TunableTuple" description="A string.">
                                        <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                      </TunableTuple>
                                    </TunableVariant>
                                  </TunableList>
                                  <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                </TunableTuple>
                              </TunableVariant>
                              <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                              <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                            </TunableTuple>
                          </TunableList>
                          <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                          <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                        </TunableTuple>
                        <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                      </TunableVariant>
                      <TunableTuple name="tested" class="Tunable_TestedSelector">
                        <TunableList name="records" class="TunableList">
                          <TunableTuple class="TunableTuple">
                            <TunableVariant type="None" name="item" class="TunableNotificationSnippet" default="literal" description="This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.">
                              <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                                <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunablePlayAudio">
                                    <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                                    <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                                    <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                                    </TunableVariant>
                                    <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                                  <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                                </TunableList>
                                <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                                <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                                <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                    <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                        <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                    <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                      <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                    </TunableTuple>
                                    <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableVariant>
                                <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                                </TunableVariant>
                                <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                                <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                                </TunableVariant>
                                <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                                <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                                    <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                                        <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                                      </TunableList>
                                    </TunableTuple>
                                    <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                                    <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                                      <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                                    </TunableTuple>
                                    <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                                      <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                                        <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                                      </TunableList>
                                    </TunableTuple>
                                  </TunableVariant>
                                </TunableVariant>
                                <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                                  <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                  <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                                    <TunableList name="variations" class="TunableList">
                                      <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                                    <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                                      <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                                        <Tunable name="active_holiday" class="TunableExistance"/>
                                        <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                                        <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                          <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                            <Tunable name="current_level_name" class="TunableExistance"/>
                                            <Tunable name="current_level_salary" class="TunableExistance"/>
                                            <Tunable name="next_level_name" class="TunableExistance"/>
                                            <Tunable name="next_level_salary" class="TunableExistance"/>
                                            <Tunable name="previous_level_name" class="TunableExistance"/>
                                            <Tunable name="previous_level_salary" class="TunableExistance"/>
                                          </TunableVariant>
                                          <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                                        </TunableTuple>
                                        <Tunable name="current_trends" class="TunableExistance"/>
                                        <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                          <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                                        </TunableTuple>
                                        <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                          <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                            <Tunable name="high_score" class="TunableExistance"/>
                                            <Tunable name="high_score_sim" class="TunableExistance"/>
                                          </TunableVariant>
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                                        </TunableTuple>
                                        <Tunable name="interaction_cost" class="TunableExistance"/>
                                        <Tunable name="interaction_payout" class="TunableExistance"/>
                                        <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                          <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                                        </TunableTuple>
                                        <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                                        </TunableTuple>
                                        <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                          <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                                        </TunableTuple>
                                        <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                          <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                            <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                              <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                              <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                                <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                                <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                              </TunableVariant>
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableTuple>
                                        <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                          <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                            <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                              <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                            </TunableTuple>
                                            <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                              <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                                <Tunable name="disabled" class="TunableExistance"/>
                                                <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                              </TunableVariant>
                                            </TunableTuple>
                                          </TunableVariant>
                                          <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                            <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                              <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                              <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                                <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                                <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                              </TunableVariant>
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                            </TunableTuple>
                                            <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                              <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableTuple>
                                        <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                                        </TunableTuple>
                                        <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                          <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                          <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                                        </TunableTuple>
                                      </TunableVariant>
                                    </TunableList>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                                </TunableVariant>
                                <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                                  <Tunable name="disabled" class="TunableExistance"/>
                                  <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                                </TunableVariant>
                                <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                                  <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                                    <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <TunableTuple name="enabled" class="TunableTuple">
                                        <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                          <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                            <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                              <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                            </TunableTuple>
                                            <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                              <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                              <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                            </TunableTuple>
                                            <Tunable name="none" class="TunableExistance"/>
                                            <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                            <TunableTuple name="string" class="TunableTuple" description="A string.">
                                              <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                            </TunableTuple>
                                          </TunableVariant>
                                        </TunableList>
                                        <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                                      </TunableTuple>
                                    </TunableVariant>
                                    <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                                    <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                                  </TunableTuple>
                                </TunableList>
                                <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                                <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                              </TunableTuple>
                              <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                            </TunableVariant>
                            <TdescFragTag name="tests" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                          </TunableTuple>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="bool" name="limit_to_one_notification" class="Tunable" default="False" description="If checked, this notification will only be displayed for the first&#xA;recipient subject. This is useful to prevent duplicates of the&#xA;notification from showing up when sending a notification to&#xA;LotOnwers or other Participant Types that have multiple Sims."/>
                    <TunableTuple name="success_chance" class="TunableSuccessChance" description="The percentage chance that this action will be applied.">
                      <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                      <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                        <TunableTuple class="TunableTuple">
                          <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                          <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                        </TunableTuple>
                      </TunableList>
                    </TunableTuple>
                    <TunableVariant type="None" name="timing" class="TunableVariant" default="at_end" description="Determines the exact timing of the behavior, either at the beginning&#xA;of an interaction, the end, or when an xevt occurs in an animation&#xA;played as part of the interaction.">
                      <TunableTuple name="at_beginning" class="TunableTuple" description="The behavior should occur at the very beginning of the&#xA;interaction.  It will not be tightly synchronized visually with&#xA;animation.  This isn't a very common use case and would most&#xA;likely be used in an immediate interaction or to change hidden&#xA;state that is used for bookkeeping rather than visual&#xA;appearance.">
                        <TunableVariant type="None" name="offset_time" class="OptionalTunable" default="disabled" description="If enabled, the interaction will wait this amount of time&#xA;after the beginning before running the element.&#xA;&#xA;Only use this if absolutely necessary. Better alternatives&#xA;include using xevts, time based conditional action with&#xA;loot ops, and using outcomes.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="float" name="enabled" class="TunableSimMinute" default="2" min="None" max="None" description="The interaction will wait this amount of time after the beginning before running the element" tuning_state="NeedsTuning"/>
                        </TunableVariant>
                      </TunableTuple>
                      <TunableTuple name="at_end" class="TunableTuple" description="The behavior should occur at the end of the interaction.  It&#xA;will not be tightly synchronized visually with animation.  An&#xA;example might be an object that gets dirty every time a Sim uses&#xA;it (so using a commodity change is overkill) but no precise&#xA;synchronization with animation is desired, as might be the case&#xA;with vomiting in the toilet.">
                        <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                      </TunableTuple>
                      <TunableTuple name="on_xevt" class="TunableTuple" description="The behavior should occur synchronized visually with an xevt in&#xA;an animation played as part of the interaction.  If for some&#xA;reason such an event doesn't occur, the behavior will occur at&#xA;the end of the interaction.  This is by far the most common use&#xA;case, as when a Sim flushes a toilet and the water level should&#xA;change when the actual flush animation and effects fire.">
                        <TunableEnum type="CleanupType" name="criticality" class="TunableEnumEntry" default="OnCancel" static_entries="element_utils.CleanupType"/>
                        <Tunable type="int" name="xevt_id" class="Tunable" default="100" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableVariant>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim or Sims whose information the subject Sim is learning."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="traits" class="TunableVariant" default="specified" description="The traits that the subject may learn about the target.">
                  <TunableTuple name="all" class="TunableTuple" description="The subject Sim may learn all of the target's traits."/>
                  <TunableTuple name="random" class="TunableTuple" description="Specify a random number of traits to learn.">
                    <Tunable type="int" name="count" class="TunableRange" default="1" min="1" max="None" description="The number of potential traits the subject may learn about&#xA;the target." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="specified" class="TunableTuple" description="Specify individual traits that can be learned.">
                    <TunableList name="potential_traits" class="TunableList" description="A list of traits that the subject may learn about the target.">
                      <Tunable type="trait" class="TunableReference" allow_none="False" restrict="Trait"/>
                    </TunableList>
                  </TunableTuple>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="life_extension" class="TunableLifeExtensionLootOp" description="This loot will grant a life extension or add bonus days.">
                <Tunable type="int" name="bonus_days" class="TunableRange" default="1" min="0" max="None" description="Number of bonus days to be granted to the target's life." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="int" name="days_from_aging_progress" class="TunableRange" default="0" min="0" max="None" description="Number of days to restore to the target's aging progress in their&#xA;current category.&#xA;&#xA;If a target is already at the minimum value of their category's age&#xA;progress, this will not change their age." tuning_state="NeedsTuning"/>
                <Tunable type="bool" name="reset_aging_progress_in_category" class="Tunable" default="False" description="If checked, this loot op will also reset the target's aging&#xA;progress in their current age category."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="lock_door" class="TunableLockDoor" description="An operation that locks a door.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ClearLock" name="clear_existing_locks" class="TunableEnumEntry" default="CLEAR_ALL" static_entries="objects-components-portal_locking_enums.ClearLock" description="Which locks should be cleared before adding the new lock data."/>
                <TunableVariant type="None" name="lock_data" class="TunableVariant" default="lock_all_with_simid_exception">
                  <TunableTuple name="lock_all_with_genus_exception" class="TunableLockAllWithGenusException" description="Lock all Sims except those that match the tuned genus.">
                    <TunableVariant type="None" name="ages" class="OptionalTunable" default="unspecified" description="The Sim must be one of the specified ages.">
                      <TunableList name="specified" class="TunableEnumSet" default="TEEN,YOUNGADULT,ADULT,ELDER" description="The Sim must be one of the specified ages." unique_entries="true">
                        <TunableEnum type="Age" class="TunableEnumEntry" default="ADULT" static_entries="sims-sim_info_types.Age"/>
                      </TunableList>
                      <Tunable name="unspecified" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="gender" class="OptionalTunable" default="unspecified" description="The Sim must be of the specified gender.">
                      <TunableEnum type="Gender" name="specified" class="TunableEnumEntry" default="None" static_entries="sims-sim_info_types.Gender" description="The Sim must be of the specified gender."/>
                      <Tunable name="unspecified" class="TunableExistance"/>
                    </TunableVariant>
                    <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                    <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                    <TunableEnum type="MatchType" name="match_type" class="TunableEnumEntry" default="MATCH_ALL" static_entries="sims-sim_info_tests.MatchType" description="If MATCH_ALL is set, test will pass if Sim matches with all &#xA;enabled tuned genus.&#xA; &#xA;If MATCH_ANY is set, test will pass if Sim matches with one of the &#xA;enabled tuned genus."/>
                    <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                    <TunableVariant type="None" name="species" class="OptionalTunable" default="unspecified" description="The Sim must be one of the specified species.">
                      <TunableList name="specified" class="TunableEnumSet" description="The Sim must be one of the specified species." unique_entries="true">
                        <TunableEnum type="Species" class="TunableEnumEntry" default="HUMAN" static_entries="sims-sim_info_types.Species"/>
                      </TunableList>
                      <Tunable name="unspecified" class="TunableExistance"/>
                    </TunableVariant>
                  </TunableTuple>
                  <TunableTuple name="lock_all_with_simid_exception" class="TunableLockAllWithSimIdExceptionData" description="The lock data will reject anyone who's not in the exception sim id list.">
                    <Tunable type="bool" name="except_actor" class="Tunable" default="False" description="If we want this lock data to have this actor as exception sim."/>
                    <Tunable type="bool" name="except_household" class="Tunable" default="False" description="If we want this lock data to have actor's household as exception sims."/>
                    <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                    <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                    <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                  </TunableTuple>
                  <TunableTuple name="lock_all_with_situation_job_exception" class="TunableLockAllWithSituationJobExceptionData">
                    <Tunable type="bool" name="except_business_employee" class="Tunable" default="False" description="If true, the business store employee will have exception to the door."/>
                    <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                    <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                    <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                    <TunableTuple name="situation_job_test" class="TunableSituationJobTest" description="The test to determine whether this sim can pass or not.">
                      <Tunable type="bool" name="negate" class="Tunable" default="False" description="If checked then the test result will be reversed, so it will&#xA;test to see if they are not in a job or not in role state&#xA;that has matching tags."/>
                      <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The subject of this situation job test."/>
                      <TunableList name="role_tags" class="TunableSet" description="The  participant must have a job that matches the role_tags or&#xA;have the situation_job." unique_entries="true">
                        <TunableEnum type="Tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" pack_safe="True"/>
                      </TunableList>
                      <TunableList name="situation_jobs" class="TunableSet" description="The participant must have this job in this list or a job that&#xA;matches the role_tags." unique_entries="true">
                        <Tunable type="situation_job" class="TunableReference" allow_none="False" pack_safe="True"/>
                      </TunableList>
                      <TunableVariant type="None" name="tooltip" class="OptionalTunable" default="disabled" description="Reason of failure.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="Reason of failure."/>
                      </TunableVariant>
                    </TunableTuple>
                  </TunableTuple>
                  <TunableTuple name="lock_ranked_statistic" class="TunableLockRankedStatisticData" description="The lock data represent ranked statistic test. Sim that can pass the the&#xA;ranked statistic test on the data can pass this lock.">
                    <TunableEnum type="LockPriority" name="lock_priority" class="TunableEnumEntry" default="SYSTEM_LOCK" static_entries="objects-components-portal_locking_enums.LockPriority" description="The priority of this lock data. Used in comparison between multiple&#xA;lock datas on the lock component test."/>
                    <TunableEnum type="LockSide" name="lock_sides" class="TunableEnumEntry" default="LOCK_BOTH" static_entries="objects-components-portal_locking_enums.LockSide" description="Which side or both this lock data will lock."/>
                    <TunableTuple name="rank_threshold" class="TunableThreshold" description="Sims that have ranked statistic's value inside the threshold are &#xA;allowed to traverse the portal.">
                      <TunableEnum type="Operator" name="comparison" class="TunableOperator" default="GREATER_OR_EQUAL" static_entries="sims4-math.Operator" description="The comparison to perform against the value."/>
                      <Tunable type="int" name="value" class="TunableRange" default="1" min="0" max="None" description="The number that describes the threshold." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <Tunable type="statistic" name="ranked_stat" class="TunableReference" description="The ranked statistic we are operating on. Sims won't be allowed to&#xA;traverse if they don't have this statistic." allow_none="False" restrict="RankedStatistic"/>
                    <Tunable type="bool" name="should_persist" class="Tunable" default="True" description="If checked, this lock data will be persisted."/>
                  </TunableTuple>
                </TunableVariant>
                <Tunable type="bool" name="replace_same_lock_type" class="Tunable" default="True" description="If True, it will replace the same type of lock data in the locking&#xA;component, otherwise it will update the existing data."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The door to lock."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="looping_loot_ops" class="TunableLoopingLootOp" description="A loot that allows a tech designer to loop through a specified set of &#xA;participants via a participant type (for instance ObjectChildren) and apply&#xA;loots to each of those objects using existing loots.&#xA;&#xA;An example would be the Family Bulletin Board where a Sim that reads a note&#xA;left for them and gets a relationship boost/hit depending on what kind of note&#xA;it is. This loot allows the tech designer to loop through all the notes on&#xA;the board and test for a specific relationship between the note and the Sim&#xA;and award a relationship change between the actor and the person that wrote&#xA;the note (which is stored on the note as the owner).">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableList name="loots_to_apply" class="TunableSet" description="A list of loot action references to apply to each of the objects &#xA;specified by the subject participant type on this loop." unique_entries="true">
                  <Tunable type="action" class="TunableReference" description="A reference to a loot to apply to any object returned by &#xA;the specified ParticipantType in Subject. To reference the new&#xA;object that is the current object in the loop use the&#xA;ParticipantType.OBJECT option." allow_none="False"/>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="make_pet_missing" class="TunableMakePetMissing" description="A loot action that makes pets go missing. ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="money_loot" class="TunableMoneyChange" description="Factory created by tuning to represent Simoleon loot payouts.    ">
                <TunableVariant type="None" name="amount" class="TunableLiteralOrRandomValue" default="literal" description="The amount of Simoleons awarded. The value will be rounded to the&#xA;closest integer. When two integers are equally close, rounding is done&#xA;towards the even one (e.g. 0.5 -&gt; 0, 1.5 -&gt; 2).">
                  <TunableTuple name="literal" class="TunableIntervalLiteral" description="A literal value that is to be used as the lower &#xA;and upper bound of an interval. This allows both literal and &#xA;range interval tunings in the same TunableVariant without &#xA;having to manually set the lower and upper bounds to the same&#xA;value.">
                    <Tunable type="float" name="value" class="TunableRange" default="10" min="0" max="None" description="The upper and lower bounds." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="random_in_range" class="TunableInterval" description="A tunable interval between lower_bound and upper_bound.">
                    <Tunable type="float" name="lower_bound" class="TunableRange" default="10" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="float" name="upper_bound" class="TunableRange" default="10" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="display_to_user" class="Tunable" default="False" description="If true, the amount will be displayed in the interaction name."/>
                <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                  <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                    <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                      <Tunable name="raw_value" class="TunableExistance"/>
                      <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                        <TunableTuple class="TunableVector2" description="Point on a Curve">
                          <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableList>
                    </TunableVariant>
                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                  </TunableTuple>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="motherplant_battle_change" class="TunableMotherplantBattleSituationStateChange" description="A loot that modifies the state of the motherplant battle situation.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="situation" name="motherplant_situation" class="TunableReference" description="The motherplant battle situation that we will be changing the&#xA;state of." allow_none="False"/>
                <TunableEnum type="MotherplantBattleStates" name="situation_state" class="TunableEnumEntry" default="BASIC" static_entries="situations-complex-mother_plant_battle_ops.MotherplantBattleStates" description="Situation state for the motherplant that we will set." invalid_entries="BASIC"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="name_reset" class="TunableNameResetLootOp" description="This loot will reset the custom name and description which been given to&#xA;the object. Object must have a NameComponent attached to it for this loot &#xA;operation to be valid.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="reset_description" class="Tunable" default="False" description="If checked, it will reset the custom description of the name &#xA;component."/>
                <Tunable type="bool" name="reset_name" class="Tunable" default="True" description="If checked, it will reset the custom name of the name component."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="narrative" class="TunableNarrativeLootOp" description="Loot operation that affects narratives.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="op_type" class="TunableVariant" default="trigger_event">
                  <TunableTuple name="end_narrative" class="Tunable_EndNarrativeOp" description="End a narrative. Use for stand-alone narratives that don't transition&#xA;to another narrative via a narrative event.">
                    <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                  </TunableTuple>
                  <TunableTuple name="reset_completion" class="Tunable_ResetNarrativeCompletionOp" description="Resets the completion status of a narrative that has been completed.">
                    <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                  </TunableTuple>
                  <TunableTuple name="start_narrative" class="Tunable_StartNarrativeOp" description="Start a narrative. Use for stand-alone narratives that don't start&#xA;based off a narrative event. ">
                    <Tunable type="narrative" name="narrative" class="TunableReference" allow_none="False"/>
                  </TunableTuple>
                  <TunableTuple name="trigger_event" class="Tunable_TriggerEventOp" description="Trigger a narrative event. This is the recommended and optimized way &#xA;to transition between narratives.">
                    <TunableEnum type="NarrativeEvent" name="event" class="TunableEnumEntry" default="INVALID" dynamic_entries="narrative-narrative_enums.NarrativeEvent._elements" static_entries="narrative-narrative_enums.NarrativeEvent" description="Event of interest." invalid_entries="INVALID"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="new_crime" class="TunableNewCrimeLootOp" description="An operation that starts a new crime for the detective career.">
                <Tunable type="career" name="career_reference" class="TunableReference" description="A reference to the detective career that keeps track of what crime&#xA;is currently being tracked." allow_none="False" restrict="DetectiveCareer"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <Tunable name="none" class="TunableExistance"/>
              <TunableTuple name="normalize_stat" class="TunableNormalizeStatisticsOp" description="A loot operation that normalizes the statistics listed between values found on two subjects.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="float" name="normalize_percent" class="TunablePercent" default="100" min="0" max="100" description="In seeking the average value, this is the percent of movement toward the average value &#xA;the stat will move to achieve the new value. For example, if you have a Sim with 50 &#xA;fun, and a Sim with 100 fun, and want to normalize them exactly halfway to their &#xA;average of 75, tune this to 100%. A value of 50% would move one Sim to 67.5 and the other&#xA;to 77.5"/>
                <TunableList name="stats_to_normalize" class="TunableList" description="Stats to be affected by the normalization.">
                  <Tunable type="statistic" class="TunableReference" allow_none="False" restrict="Commodity"/>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The Sim from which to transfer the listed stats from."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="notification_and_dialog" class="TunableDialogLootOp" description="An operation that displays a dialog.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="dialog" class="TunableVariant" default="notification" description="Type of dialog to show.">
                  <TunableTuple name="aspiration_progress" class="TunableUiDialogAspirationProgress" description="Display a dialog that will show the Sim's progress towards one&#xA;or more aspirations.">
                    <TunableList name="aspirations" class="TunableList" description="A list of aspirations we are tracking to show progress for in the&#xA;dialog.">
                      <Tunable type="aspiration" class="TunableReference" description="An aspiration we want to show progress for.&#xA;&#xA;Currently, only Career Aspirations are supported." allow_none="False" restrict="AspirationCareer"/>
                    </TunableList>
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <Tunable type="bool" name="is_special_dialog" class="Tunable" default="False" description="If checked, UI will treat this as a special ok or ok/cancel dialog &#xA;and represent the ok or ok/cancel options in a special way. &#xA;They will use the text as a tooltip for ok or ok/cancel options &#xA;and use particular icons for the buttons."/>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="progress_description" class="OptionalTunable" default="disabled" description="If enabled, we will replace the description for the aspiration with&#xA;this text, which has tokens for the progress.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableTuple" description="Tuning for the description to show aspiration progress.">
                        <Tunable type="int" name="complete" class="TunableLocalizedString" default="0x0" description="The localized description for a completed aspiration.&#xA;Tokens:&#xA;0: Sim&#xA;1: # Progress Completed&#xA;2: # Goal&#xA;Example: &quot;Progress (1.Number/2.Number)&quot;"/>
                        <Tunable type="int" name="incomplete" class="TunableLocalizedString" default="0x0" description="The localized description for an incomplete aspiration.&#xA;Tokens:&#xA;0: Sim&#xA;1: # Progress Completed&#xA;2: # Goal&#xA;Example: &quot;Progress (1.Number/2.Number)&quot;"/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="int" name="text_ok" class="TunableLocalizedString" default="0xd977b872" description="The OK button text."/>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <Tunable type="bool" name="use_description_for_tooltip" class="Tunable" default="False" description="If enabled, we will use the aspiration description as the&#xA;tooltip."/>
                  </TunableTuple>
                  <TunableTuple name="dialog_ok" class="TunableUiDialogOk" description="Display a dialog with an okay button.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <Tunable type="bool" name="is_special_dialog" class="Tunable" default="False" description="If checked, UI will treat this as a special ok or ok/cancel dialog &#xA;and represent the ok or ok/cancel options in a special way. &#xA;They will use the text as a tooltip for ok or ok/cancel options &#xA;and use particular icons for the buttons."/>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <Tunable type="int" name="text_ok" class="TunableLocalizedString" default="0xd977b872" description="The OK button text."/>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableTuple name="notification" class="TunableUiDialogNotification" description="This text will display in a notification pop up when completed.">
                    <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunablePlayAudio">
                        <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                        <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                        <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                        </TunableVariant>
                        <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                      <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                    </TunableList>
                    <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                    <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                    <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                    </TunableVariant>
                    <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                    <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                    </TunableVariant>
                    <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                    <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                        <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                            <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                          </TunableList>
                        </TunableTuple>
                        <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                        <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                          <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                        </TunableTuple>
                        <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                          <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                            <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                    </TunableVariant>
                    <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                      <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                      <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                        <TunableList name="variations" class="TunableList">
                          <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                        <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                          <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                            <Tunable name="active_holiday" class="TunableExistance"/>
                            <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                            <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                              <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                <Tunable name="current_level_name" class="TunableExistance"/>
                                <Tunable name="current_level_salary" class="TunableExistance"/>
                                <Tunable name="next_level_name" class="TunableExistance"/>
                                <Tunable name="next_level_salary" class="TunableExistance"/>
                                <Tunable name="previous_level_name" class="TunableExistance"/>
                                <Tunable name="previous_level_salary" class="TunableExistance"/>
                              </TunableVariant>
                              <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                            </TunableTuple>
                            <Tunable name="current_trends" class="TunableExistance"/>
                            <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                              <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                            </TunableTuple>
                            <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                              <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                <Tunable name="high_score" class="TunableExistance"/>
                                <Tunable name="high_score_sim" class="TunableExistance"/>
                              </TunableVariant>
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                            </TunableTuple>
                            <Tunable name="interaction_cost" class="TunableExistance"/>
                            <Tunable name="interaction_payout" class="TunableExistance"/>
                            <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                              <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                            </TunableTuple>
                            <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                            </TunableTuple>
                            <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                              <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                            </TunableTuple>
                            <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                              <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                  <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                </TunableTuple>
                                <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                  <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                    <Tunable name="disabled" class="TunableExistance"/>
                                    <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                  </TunableVariant>
                                </TunableTuple>
                              </TunableVariant>
                              <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                  <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                  <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                    <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                    <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                  </TunableVariant>
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                </TunableTuple>
                                <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                </TunableTuple>
                                <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                  <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                  <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableTuple>
                            <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                            </TunableTuple>
                            <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                              <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                              <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                            </TunableTuple>
                          </TunableVariant>
                        </TunableList>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                    </TunableVariant>
                    <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                    </TunableVariant>
                    <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                      <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                        <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                          <Tunable name="disabled" class="TunableExistance"/>
                          <TunableTuple name="enabled" class="TunableTuple">
                            <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                              <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                  <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                </TunableTuple>
                                <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                  <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                  <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                </TunableTuple>
                                <Tunable name="none" class="TunableExistance"/>
                                <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                <TunableTuple name="string" class="TunableTuple" description="A string.">
                                  <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                </TunableTuple>
                              </TunableVariant>
                            </TunableList>
                            <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                          </TunableTuple>
                        </TunableVariant>
                        <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                        <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                    <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="object_relationship" class="TunableObjectRelationshipLootOp" description="This loot will modify the relationship between an object and a Sim.&#xA;The target object must have an ObjectRelationshipComponent attached&#xA;to it for this loot operation to be valid.">
                <Tunable type="bool" name="add_if_nonexistant" class="Tunable" default="True" description="If checked, this relationship will be added if it doesn't currently&#xA;exist.  If unchecked, it will not be added if it doesn't currently&#xA;exist."/>
                <Tunable type="int" name="amount_to_add" class="Tunable" default="0" description="The amount tuned here will be added to the relationship between the&#xA;tuned object and Sim." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="remove_relationship" class="Tunable" default="False" description="If checked, the relationship between the tuned object and Sim will&#xA;be remove if it currently exists."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The object whose relationship to modify."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="object_rewards" class="TunableObjectRewardsOperation" description="Loot operation to give multiple objects to a sim as a reward from an &#xA;interaction.&#xA;All objects may have its own weight to calculate which should be created">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="force_family_inventory" class="Tunable" default="False" description="If Enabled, the rewards object(s) will be put in the family &#xA;inventory no matter what.  If not enabled, the object will try to&#xA;be added to the sim inventory, if that is not possible it will be&#xA;added to the family inventory as an automatic fallback."/>
                <Tunable type="bool" name="make_sim_owner" class="Tunable" default="False" description="If enabled, the actor of the loot will be set as the owner of the&#xA;object"/>
                <Tunable type="bool" name="needs_compositing" class="Tunable" default="False" description="If enabled, the item will be created then have an image composited&#xA;before it appears in inventory."/>
                <TunableVariant type="None" name="notification" class="OptionalTunable" default="disabled" description="If enabled, a notification will be displayed when this object reward&#xA;is granted to a Sim.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableVariant type="None" name="enabled" class="TunableNotificationSnippet" default="literal" description="The notification to display when this object reward is granted&#xA;to the Sim. There is one additional token provided: a string&#xA;representing a bulleted list of all individual rewards granted.&#xA; (This may be tuned in place here using 'literal' or as a reference to a Notification tuning snippet.)">
                    <TunableTuple name="literal" class="TunableUiDialogNotification" description="A dialog that is displayed as a notification.">
                      <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunablePlayAudio">
                          <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                          <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                          <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                          </TunableVariant>
                          <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                        <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                      </TunableList>
                      <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                      <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                      <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                      </TunableVariant>
                      <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                      <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                      </TunableVariant>
                      <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                      <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                        <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                          <TunableList name="variations" class="TunableList">
                            <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                          <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                            <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                              <Tunable name="active_holiday" class="TunableExistance"/>
                              <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                              <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                  <Tunable name="current_level_name" class="TunableExistance"/>
                                  <Tunable name="current_level_salary" class="TunableExistance"/>
                                  <Tunable name="next_level_name" class="TunableExistance"/>
                                  <Tunable name="next_level_salary" class="TunableExistance"/>
                                  <Tunable name="previous_level_name" class="TunableExistance"/>
                                  <Tunable name="previous_level_salary" class="TunableExistance"/>
                                </TunableVariant>
                                <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                              </TunableTuple>
                              <Tunable name="current_trends" class="TunableExistance"/>
                              <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                              </TunableTuple>
                              <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                  <Tunable name="high_score" class="TunableExistance"/>
                                  <Tunable name="high_score_sim" class="TunableExistance"/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                              </TunableTuple>
                              <Tunable name="interaction_cost" class="TunableExistance"/>
                              <Tunable name="interaction_payout" class="TunableExistance"/>
                              <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                              </TunableTuple>
                              <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                              </TunableTuple>
                              <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                              </TunableTuple>
                              <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                  <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                    <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                  </TunableTuple>
                                  <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                    <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                    </TunableVariant>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                              </TunableTuple>
                              <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                      </TunableVariant>
                      <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                      </TunableVariant>
                      <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                        <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableList>
                      <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                      <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                    </TunableTuple>
                    <Tunable type="snippet" name="reference" class="TunableReference" description="A reference to a Notification tuning snippet." allow_none="False" restrict="Notification"/>
                  </TunableVariant>
                </TunableVariant>
                <TunableTuple name="object_rewards" class="TunableObjectRewardsTuning" description="Object rewards when running the loot.  Rewards objects will be created&#xA;and sent to the tuned inventory.">
                  <Tunable type="int" name="quantity" class="TunableRange" default="10" min="0" max="None" description="Quantity of objects to create when loot action gets triggered.&#xA;The result of this loot will do a quantity number of random checks&#xA;to see which reward objects it will give.&#xA;e.g. quantity 2 will do 2 random checks using the weights tuned &#xA;to see which items it will give each time." tuning_state="NeedsTuning"/>
                  <TunableList name="reward_objects" class="TunableList" min="1" description="List of pair of object reference-weight for the random calculation&#xA;e.g. Pair1[3,obj1] Pair2[7,obj2] means obj1 has a 30% chance of &#xA;being picked and obj2 has 70% chance of being picked">
                    <TunableTuple class="TunableTuple">
                      <TunableVariant type="None" name="quantity" class="OptionalTunable" default="one_of_each" description="If this group of reward objects is chosen, this is the&#xA;number of rewards (chosen randomly) to give from this list.&#xA;If this is set to &quot;One of Each&quot; then the player will get one&#xA;of everything in the list.">
                        <Tunable name="one_of_each" class="TunableExistance"/>
                        <Tunable type="int" name="specific_amount" class="TunableRange" default="1" min="1" max="None" description="The number of random objects to give from this list.&#xA;This does mean the same object could be given multiple&#xA;times. This can also be tuned to a value higher than the&#xA;number of objects in the list." tuning_state="NeedsTuning"/>
                      </TunableVariant>
                      <TunableList name="reward" class="TunableList" min="1" description="List of objects to reward.  When the random check picks &#xA;this value from the weight calculation it will give all&#xA;the items tuned on this list.">
                        <TunableVariant type="None" class="TunableVariant" default="specify_definition">
                          <TunableTuple name="specify_definition" class="TunableObjectCreator" description="Object reference of the type of game object needed.">
                            <Tunable type="object" name="definition" class="TunableReference" description="The definition of the object to be created." allow_none="False" pack_safe="True"/>
                          </TunableTuple>
                          <TunableTuple name="specify_recipe" class="TunableRecipeCreator" description="Recipe to be created.">
                            <Tunable type="recipe" name="recipe" class="TunableReference" description="Recipe to produce an object with." allow_none="False"/>
                            <TunableList name="weighted_quality" class="TunableList" description="A list of weighted quality in which the object will be created.&#xA;&#xA;If empty, it will apply a default quality.">
                              <TunableTuple class="TunableTuple" description="A possible level of quality for this item that will be generated.&#xA;This will be randomly chosen based off weight against other items in the list.">
                                <Tunable type="object_state" name="quality" class="TunableReference" allow_none="False" restrict="CommodityBasedObjectStateValue"/>
                                <Tunable type="int" name="weight" class="TunableRange" default="1" min="1" max="None" tuning_state="NeedsTuning"/>
                              </TunableTuple>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableList>
                      <TunableList name="states_on_reward_object" class="TunableList" description="List of states to set on the object reward after it has &#xA;been created.">
                        <Tunable type="object_state" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                      </TunableList>
                      <Tunable type="int" name="weight" class="TunableRange" default="1" min="0" max="None" description="Weight that object will have on the probability calculation &#xA;of which objects will be created." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="place_in_mailbox" class="Tunable" default="False" description="If Enabled, the rewards object(s) will be put in the mailbox if&#xA;the active lot is the sims home lot"/>
                <TunableVariant type="None" name="store_sim_info_on_reward" class="OptionalTunable" default="disabled" description="If enabled, a sim info will be stored on the reward object. This &#xA;is mostly used for the cow plant life essence, which will store the&#xA;sim info of the sim from which the life essence was drained.&#xA;&#xA;Ex: For cow plant's milk life essence, we want to transfer the dead&#xA;sim's sim info from the cow plant to the created essence drink.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTuple" description="            &#xA;                ">
                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of this interaction which has a &#xA;StoredSimInfoComponent. The stored sim info will be transferred&#xA;to the created rewards and will then be removed from the source."/>
                    <Tunable type="bool" name="transfer_from_stored_sim_info" class="Tunable" default="True" description="If checked then the sim info that will be stored on the &#xA;reward is going to be transfered from the participants&#xA;StoredSimInfoComponent. The stored sim info will be transferred&#xA;to the created rewards and will then be removed from the source.&#xA;&#xA;If not checked then the participant sim info will be &#xA;stored directly onto the object, instead of transfered."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="oneshot_broadcaster" class="TunableBroadcasterOneShotLootOp" description="Triggers a one-shot broadcaster effect.  This MUST be an immediate&#xA;broadcaster and tuned as an 'On Enter' broadcaster.">
                <TunableTuple name="broadcaster_request" class="TunableBroadcasterRequest" description="The broadcaster request to run.">
                  <TunableList name="broadcaster_types" class="TunableTestedList" description="A list of broadcasters to request.">
                    <TunableTuple class="TunableTuple" description="An entry in this tested list.">
                      <Tunable type="broadcaster" name="item" class="TunableReference" description="The broadcasters to request." allow_none="False" pack_safe="True"/>
                      <Tunable type="bool" name="stop_processing" class="Tunable" default="False" description="If checked, no other element from this list is considered if&#xA;this element passes its associated test."/>
                      <TdescFragTag name="test" class="TunableTestSet" description="A list of tests groups.  At least one must pass all its sub-&#xA;tests to pass the TestSet.&#xA;&#xA;ORs of ANDs"/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="post_missing_pet_alert" class="TunablePostMissingPetAlert" description="A loot action to post an alert about a missing pet. ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The object the tags are applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="reaction" class="TunableReactionLootOp" description="An operation to play Reaction animations.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="mixer_reaction" class="OptionalTunable" default="disabled" description="A mixer interaction to push on the subject. This will be attached&#xA;to the posture's SI so it must meet the constraints of the posture&#xA;or else it will not run. This interaction should primarily be used&#xA;to animate the Sim. Mixers are useful for reactions because we can&#xA;inject them into staging SIs.&#xA;&#xA;If an SI Reaction is tuned in addition to this mixer, then the&#xA;mixer will act as a fallback to the SI.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableReactionMixer" description="&quot;&#xA;A reaction mixer that is pushed when this loot op runs. It will&#xA;only run if an SI reaction is not tuned, fails to run, or does&#xA;not run in a timely manner.">
                    <Tunable type="interaction" name="affordance" class="TunableReference" description="The affordance to push on the subject." allow_none="False" pack_safe="True" restrict="MixerInteraction"/>
                    <TunableVariant type="None" name="affordance_target" class="OptionalTunable" default="disabled" description="If enabled, the pushed interaction will target a specified&#xA;participant.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeReaction" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeReaction" description="The participant to be targeted by the pushed interaction."/>
                    </TunableVariant>
                    <TunableVariant type="None" name="super_affordance_override" class="OptionalTunable" default="disabled" description="If enabled, this super affordance will be the SI for the reaction&#xA;mixer. If disabled, we use the posture's SI. &#xA;&#xA;Note: This should only be tuned if we are trying to push a&#xA;SocialMixerInteraction as a reaction mixer. In that case you want&#xA;to push its SocialSuperInteraction.&#xA;&#xA;Furthermore, if the pusher of this reaction is a Social interaction&#xA;whose SI matches the override type, we'll reuse that SI as the&#xA;mixer's SI.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <Tunable type="interaction" name="enabled" class="TunableReference" description="The super affordance to use for this reaction mixer." allow_none="False" pack_safe="True" restrict="SocialSuperInteraction"/>
                    </TunableVariant>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="si_reaction" class="OptionalTunable" default="disabled" description="A Super Interaction that is pushed on the Subject when this&#xA;loot op is applied. If the SI cannot displace other&#xA;interactions in the queue and a mixer reaction is tuned, then&#xA;the mixer will get pushed.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableReactionSi" description="A Super Interaction that is pushed on the Subject when this&#xA;loot op is applied.">
                    <Tunable type="interaction" name="affordance" class="TunableReference" description="The affordance to push on the subject." allow_none="False" pack_safe="True" restrict="SuperInteraction"/>
                    <TunableEnum type="Priority" name="affordance_priority" class="TunableEnumEntry" default="Low" static_entries="interactions-priority.Priority" description="The priority at which the specified affordance is to be pushed.&#xA;&#xA;IMPORTANT: This will cancel any incompatible interactions the Sim&#xA;is currently running if they are at a lower priority. Autonomous&#xA;interactions are pushed at Low priority."/>
                    <TunableVariant type="None" name="affordance_run_priority" class="OptionalTunable" default="disabled" description="If enabled, specify the priority at which the affordance runs. This&#xA;may be different than 'affordance_priority'. For example. you might&#xA;want an affordance to push at high priority such that it cancels&#xA;existing interactions, but it runs at a lower priority such that it&#xA;can be more easily canceled.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="Priority" name="enabled" class="TunableEnumEntry" default="Low" static_entries="interactions-priority.Priority" description="The run priority for the specified affordance."/>
                    </TunableVariant>
                    <TunableVariant type="None" name="affordance_target" class="OptionalTunable" default="enabled" description="If enabled, the pushed interaction will target a specified&#xA;participant.">
                      <Tunable name="disabled" class="TunableExistance"/>
                      <TunableEnum type="ParticipantTypeReaction" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeReaction" description="The participant to be targeted by the pushed interaction."/>
                    </TunableVariant>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="refresh_whims" class="TunableRefreshWhimsLootOp" description="Loot operation that refreshes all of the non-locked whims on a sim.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="relationship_bits_lock" class="TunableUnlockRelationshipBitLock" description="Loot to unlock a relationship bit.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="relationship_lock" name="relationship_lock" class="TunableReference" description="The type of relationship lock to change." allow_none="False"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantTypeSim" name="target" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSim" description="The target of this loot operation."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="relationship_bits_loot" class="TunableRelationshipBitChange" description="A list of relationship bit operations to perform">
                <TunableList name="bit_operations" class="TunableList" description="List of operations to perform.">
                  <TunableTuple class="TunableTuple" description="Tuple describing the operation to perform.">
                    <Tunable type="relbit" name="bit" class="TunableReference" description="The bit to be manipulated." allow_none="False"/>
                    <TunableEnum type="RelationshipBitOperationType" name="operation" class="TunableEnumEntry" default="INVALID" static_entries="relationships-relationship_bit_change.RelationshipBitOperationType" description="The operation to perform." invalid_entries="INVALID"/>
                    <TunableEnum type="ParticipantType" name="recipients" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="The Sim(s) to apply the bit operation to." invalid_entries="Invalid"/>
                    <TunableEnum type="ParticipantType" name="targets" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="The target Sim(s) for each bit interaction." invalid_entries="Invalid"/>
                  </TunableTuple>
                </TunableList>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="release_table" class="TunableReleaseRestaurantTable" description="A loot that allows a sim to release a restaurant table they currently have&#xA;claimed.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="remove_notebook_entry" class="TunableRemoveNotebookEntry" description="An operation that clears the notebook data out the specified entries.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="removal_type" class="OptionalTunable" default="all_entries" description="Option to select if we want to remove by subcategory (like remove&#xA;all clues) or by a specific entry.">
                  <Tunable name="all_entries" class="TunableExistance"/>
                  <TunableList name="remove_by_reference" class="TunableList" description="List of entries to be removed.">
                    <Tunable type="notebook_entry" class="TunableReference" description="The entry that will be removed from the player's notebook." allow_none="False" pack_safe="True"/>
                  </TunableList>
                </TunableVariant>
                <TunableEnum type="NotebookSubCategories" name="subcategory_id" class="TunableEnumEntry" default="INVALID" dynamic_entries="ui-notebook_tuning.NotebookSubCategories._elements" static_entries="ui-notebook_tuning.NotebookSubCategories" description="Subcategory type." invalid_entries="INVALID"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="remove_object_info" class="TunableRemoveObjectInfoLootOp" description="Remove the StoredObjectInfoComponent, if it exists.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to remove from the Stored Object Info Component." invalid_entries="INVALID"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="remove_sickness" class="TunableRemoveSicknessLootOp" description="Removes a sickness from the subject.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="remove_stored_sim_info" class="TunableRemoveSimInfoLootOp" description="Loot action to remove the StoredSimInfoComponent, if it exists.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="reset_aspiration" class="TunableResetAspiration" description="Operation to reset an aspiration on a Sim.">
                <Tunable type="aspiration" name="aspiration" class="TunableReference" description="The aspiration that we want to reset." allow_none="False"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="reset_game" class="TunableResetGame" description="Game component's reset game loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim. Only resets&#xA;score. Leave it to tuning to reset state of target (presumably on xevent).">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="reset_high_score" class="TunableResetHighScore" description="Game component's reset high score loot operation. Note that the subject is &#xA;almost always object since the game component is not on the Sim. Only resets &#xA;high score. Leave it to tuning to reset state of target (presumably on xevent).">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="restaurant_expedite_order" class="TunableRestaurantExpediteGroupOrder" description="A loot that will insert the subjects group order to the front of the chefs&#xA;list of food to create.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="reward" class="TunableRewardOperation" description="Loot operation to give a reward to a Sim or Household.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="reward" name="reward" class="TunableReference" description="The reward given to the subject of the loot operation." allow_none="False"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="schedule_drama_node" class="TunableScheduleDramaNodeLoot" description="A loot operation for scheduling drama nodes.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="drama_node" name="drama_node" class="TunableReference" description="The drama node to schedule." allow_none="False"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <Tunable type="action" name="scheduled_delivery" class="TunableReference" allow_none="False" restrict="ScheduledDeliveryLoot"/>
              <TunableTuple name="set_club_gathering_vibe" class="TunableSetClubGatheringVibe">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableEnum type="ClubGatheringVibe" name="vibe" class="TunableEnumEntry" default="NO_VIBE" dynamic_entries="clubs-club_enums.ClubGatheringVibe._elements" static_entries="clubs-club_enums.ClubGatheringVibe" description="The vibe to set the gathering to."/>
              </TunableTuple>
              <TunableTuple name="set_primary_aspiration_track" class="TunableSetPrimaryAspirationTrack" description="An operation to set the primary aspiration track.">
                <Tunable type="aspiration_track" name="aspiration_track" class="TunableReference" description="The Aspiration Track to set as primary" allow_none="False"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="setup_game" class="TunableSetupGame" description="Game component's setup game loot operation. Note that the subject is almost&#xA;always object since the game component is not on the Sim.    ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="skill_effectiveness" class="TunableSkillEffectivenessLoot">
                <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="SkillEffectiveness" name="effectiveness" class="TunableEnumEntry" default="STANDARD" dynamic_entries="statistics-skill.SkillEffectiveness._elements" static_entries="statistics-skill.SkillEffectiveness" description="Enum to determine which curve to use when giving points to sim." tuning_state="NeedsTuning"/>
                <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
                <Tunable type="int" name="level" class="Tunable" default="0" description="x-point on skill effectiveness curve." tuning_state="NeedsTuning"/>
                <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                  <Tunable name="no_max" class="TunableExistance"/>
                  <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                    <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                    <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                    <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                      <TunableTuple class="TunableVector2" description="Point on a Curve">
                        <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                        <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                      </TunableTuple>
                    </TunableList>
                    <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                  <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                    <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                      <Tunable name="raw_value" class="TunableExistance"/>
                      <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                        <TunableTuple class="TunableVector2" description="Point on a Curve">
                          <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableList>
                    </TunableVariant>
                    <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                    <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                  </TunableTuple>
                </TunableList>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="slot_objects" class="TunableSlotObjects" description="Operation to slot an object into another.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableVariant type="None" name="slot_strategy" class="SlotStrategyVariant" default="slot_type_strategy" description="The slot strategy we want to use to place objects from the transfer&#xA;source into slots on the target.">
                  <TunableTuple name="auto_slotting" class="TunableSlotStrategyAutoSlot" description="Strategy to place the transfer objects uniquely in various slots on the&#xA;target, possibly distributing them across different slot types.">
                    <Tunable type="bool" name="evenly_distribute_slot_types" class="Tunable" default="True" description="If enabled, we will attempt to go down the slot types list&#xA;one at a time and pull a unique object, then repeat the&#xA;list until the desired number of objects has been slotted,&#xA;we run out of objects, or we run out of slots."/>
                    <Tunable type="int" name="max_number_of_objects" class="TunableRange" default="15" min="1" max="20" description="The number of objects we would like to slot into the target.&#xA;Obviously the number of valid objects available and the number of&#xA;free slots must accommodate this interval. However, it will fail&#xA;silently if we run out of either. This is essentially a firemeter&#xA;on how many objects we care to try and slot." tuning_state="NeedsTuning"/>
                    <TunableVariant type="None" name="objects_to_slot" class="SelectObjectVariant" default="object_participant" description="The selection for objects to be slotted into the slot target.">
                      <TunableTuple name="inventory_objects" class="TunableSelectInventoryObjects" description="Pulls all possible objects from the inventory participant which will fit&#xA;into the slots tuned in the slot strategy.">
                        <TunableEnum type="ParticipantTypeSingle" name="inventory_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant with the inventory we want to pull objects from."/>
                        <TdescFragTag name="object_tests" class="TunableTestSet" description="Tests whether or not an object in the inventory should be&#xA;transferred to a target slot or not.&#xA;&#xA;If this is being tuned in an interaction, the object in question&#xA;will be the Picked Item participant. This is so that we can keep&#xA;the resolver in case we want to test the actor or target as well.&#xA;&#xA;In other cases, the participant will be Actor, and the slot target&#xA;will be Object."/>
                      </TunableTuple>
                      <TunableTuple name="object_participant" class="TunableSelectSourceParticipant" description="A participant of the interaction to slot into the target's slot type.">
                        <TunableEnum type="ParticipantType" name="transfer_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="A participant to be slotted."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableEnum type="ParticipantTypeSingle" name="slot_target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The participant we want to slot objects into."/>
                    <TunableList name="slot_types" class="TunableList" description="The slot types we want to fill. Order denotes priority, as we will grab unique objects that fill those slots." unique_entries="true">
                      <Tunable type="slot_type" class="TunableReference" description="Slot type to place the transfered objects into the participant&#xA;target. Obviously the slot type must be available on the target&#xA;object and the source must support it." allow_none="False"/>
                    </TunableList>
                  </TunableTuple>
                  <TunableTuple name="slot_type_strategy" class="TunableSlotStrategyTargetSlotType" description="Strategy to place the transfer objects in a particular slot type on the&#xA;target.">
                    <Tunable type="int" name="max_number_of_objects" class="TunableRange" default="15" min="1" max="20" description="The number of objects we would like to slot into the target.&#xA;Obviously the number of valid objects available and the number of&#xA;free slots must accommodate this interval. However, it will fail&#xA;silently if we run out of either. This is essentially a firemeter&#xA;on how many objects we care to try and slot." tuning_state="NeedsTuning"/>
                    <TunableVariant type="None" name="objects_to_slot" class="SelectObjectVariant" default="object_participant" description="The selection for objects to be slotted into the slot target.">
                      <TunableTuple name="inventory_objects" class="TunableSelectInventoryObjects" description="Pulls all possible objects from the inventory participant which will fit&#xA;into the slots tuned in the slot strategy.">
                        <TunableEnum type="ParticipantTypeSingle" name="inventory_participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant with the inventory we want to pull objects from."/>
                        <TdescFragTag name="object_tests" class="TunableTestSet" description="Tests whether or not an object in the inventory should be&#xA;transferred to a target slot or not.&#xA;&#xA;If this is being tuned in an interaction, the object in question&#xA;will be the Picked Item participant. This is so that we can keep&#xA;the resolver in case we want to test the actor or target as well.&#xA;&#xA;In other cases, the participant will be Actor, and the slot target&#xA;will be Object."/>
                      </TunableTuple>
                      <TunableTuple name="object_participant" class="TunableSelectSourceParticipant" description="A participant of the interaction to slot into the target's slot type.">
                        <TunableEnum type="ParticipantType" name="transfer_participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="A participant to be slotted."/>
                      </TunableTuple>
                    </TunableVariant>
                    <TunableEnum type="ParticipantTypeSingle" name="slot_target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The participant we want to slot objects into."/>
                    <Tunable type="slot_type" name="target_slot_type" class="TunableReference" description="Slot type to place the transfered objects into the participant&#xA;target. Obviously the slot type must be available on the target&#xA;object and the source must support it." allow_none="False"/>
                  </TunableTuple>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="squad_loot" class="TunableSquadLootOp" description="Add or remove Sims from another Sims squad.">
                <TunableVariant type="None" name="action" class="TunableVariant" default="add_to" description="The choice of whether or not to add or remove the target from the&#xA;actors squad.">
                  <Tunable name="add_to" class="TunableExistance"/>
                  <Tunable name="remove_from" class="TunableExistance"/>
                </TunableVariant>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_sim" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The Sim that is being added to/removed from the subjects squad."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="state_change" class="TunableStateChangeLootOp" description="This loot will change the state of the subject.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="object_state" name="state_value" class="TunableReference" allow_none="False" restrict="ObjectStateValue"/>
                <TunableVariant type="None" name="subject" class="TunableVariant" default="participant" description="The subject of this loot.">
                  <TunableEnum type="Tag" name="all_objects_with_tag" class="TunableEnumEntry" default="INVALID" dynamic_entries="tag.Tag._elements" static_entries="tag.Tag" description="All objects with this tag." invalid_entries="INVALID"/>
                  <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="&quot;&#xA;The participant type for the subject of this loot." invalid_entries="Invalid"/>
                </TunableVariant>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableVariant type="None" name="statistics" class="TunableStatisticChange" default="none" description="A variant of statistic operations.">
                <Tunable name="none" class="TunableExistance"/>
                <TunableTuple name="object_relationship_change" class="TunableStatisticAddObjectRelationship" description="Add to the object relationship score statistic for this Super Interaction.">
                  <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                  </TunableVariant>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                  </TunableList>
                  <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="ObjectRelationshipTrack"/>
                  <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                    <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableTuple>
                <TunableTuple name="random_relationship_set" class="TunableRandomSimStatisticAddRelationship" description="Adds the relationship statistic score about an amount to a &#xA;random sim selected out of all the known sims for the Actor.">
                  <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="create_sim_if_no_results" class="OptionalTunable" default="disabled" description="If enabled, will result in a new Sim Info being created to meet&#xA;the conditions of the supplied Sim Template.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="sim_filter" name="enabled" class="TunableReference" description="A reference to a Sim Filter to use to create a Sim.&#xA;                &#xA;This does not guarantee that the created Sim will pass&#xA;tests_on_random_sim. However the resulting sim will be used as&#xA;a valid result." allow_none="False" restrict="TunableSimFilter"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="loot_applied_notification" class="OptionalTunable" default="disabled" description="If enable the notification will be displayed passing the subject&#xA;and the random sim as tokens.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableUiDialogNotification" description="Notification that will be shown when the loot is applied.">
                      <TunableVariant type="None" name="audio_sting" class="OptionalTunable" default="disabled" description="If enabled, play an audio sting when the dialog is shown.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunablePlayAudio">
                          <Tunable type="ResourceKey" name="audio" class="TunableResourceKey" default="None" description="The sound to play." resource_types="0x39b2aa4a"/>
                          <Tunable type="bool" name="immediate" class="Tunable" default="False" description="If checked, this audio will be triggered immediately, nothing&#xA;will block.&#xA;&#xA;ex. Earbuds audio will be played immediately while &#xA;the Sim is routing or animating."/>
                          <TunableVariant type="None" name="joint_name_hash" class="OptionalTunable" default="disabled" description="Specify if the audio is attached to a slot and, if so, which&#xA;slot. Otherwise the audio will be attached to the object's &#xA;origin.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <Tunable type="str" name="enabled" class="TunableStringHash32" default="None" description="The name of the slot this audio is attached to."/>
                          </TunableVariant>
                          <Tunable type="bool" name="play_on_active_sim_only" class="Tunable" default="False" description="If enabled, and audio target is Sim, the audio will only be &#xA;played on selected Sim. Otherwise it will be played regardless &#xA;Sim is selected or not.&#xA;&#xA;If audio target is Object, always set this to False. Otherwise&#xA;the audio will never be played.&#xA;&#xA;ex. This will be useful for Earbuds where we want to hear the&#xA;music only when the Sim is selected."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableList name="dialog_options" class="TunableEnumFlags" default="DISABLE_CLOSE_BUTTON" description="Options to apply to the dialog." unique_entries="true">
                        <TunableEnum type="UiDialogOption" class="TunableEnumEntry" default="DISABLE_CLOSE_BUTTON" static_entries="ui-ui_dialog.UiDialogOption"/>
                      </TunableList>
                      <TunableEnum type="UiDialogStyle" name="dialog_style" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog.UiDialogStyle" description="The style overlay to apply to this dialog."/>
                      <TunableEnum type="UiDialogNotificationExpandBehavior" name="expand_behavior" class="TunableEnumEntry" default="USER_SETTING" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationExpandBehavior" description="Specify the notification's expand behavior."/>
                      <TunableVariant type="None" name="icon" class="OptionalTunable" default="disabled" description="If enabled, specify an icon to be displayed.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="icon_override_participant" class="OptionalTunable" default="disabled" description="If enabled, allows a different participant to be considered the&#xA;owner of this dialog. Typically, this will only affect the Sim&#xA;portrait used at the top of the dialog, but there could be other&#xA;adverse affects so be sure to talk to your UI partner before tuning&#xA;this.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantTypeSingleSim" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantTypeSingleSim" description="The participant to be used as the owner of this dialog. If this&#xA;participant doesn't exist, the default owner will be used&#xA;instead."/>
                      </TunableVariant>
                      <TunableEnum type="UiDialogNotificationLevel" name="information_level" class="TunableEnumEntry" default="SIM" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationLevel" description="Specify the notification's information level."/>
                      <TunableVariant type="None" name="participant" class="OptionalTunable" default="disabled" description="This field is deprecated. Please use 'icon' instead.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType"/>
                      </TunableVariant>
                      <TunableEnum type="PhoneRingType" name="phone_ring_type" class="TunableEnumEntry" default="NO_RING" static_entries="ui-ui_dialog.PhoneRingType" description="The phone ring type of this dialog.  If tuned to anything other&#xA;than None this dialog will only appear after clicking on the phone."/>
                      <TunableVariant type="None" name="primary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the primary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the primary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon" class="OptionalTunable" default="disabled" description="If enabled, specify a secondary icon to be displayed. Only certain&#xA;dialog types may support this field.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableVariant type="None" name="enabled" class="TunableIconVariant" default="resource_key">
                          <TunableTuple name="lifestyle_brand" class="TunableLifestyleBrandIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="The Participant who owns the lifestyle brand we want to use." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="participant" class="TunableParticipantTypeIconFactory" description="The Sim who's thumbnail will be used.">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" unique_entries="true">
                              <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                            </TunableList>
                          </TunableTuple>
                          <TunableTuple name="privacy" class="TunablePrivacyIconFactory" description="Search an interaction's privacy liability to find violating Sims&#xA;and randomly select one to display an icon of."/>
                          <TunableTuple name="resource_key" class="TunableIconFactory" description="The icon image to be displayed.">
                            <Tunable type="ResourceKey" name="key" class="TunableIcon" default="None" description="The icon image to be displayed." resource_types="0x2f7d0004"/>
                          </TunableTuple>
                          <TunableTuple name="tradition" class="TunableHolidayIconFactory">
                            <TunableList name="participant_type" class="TunableEnumFlags" default="Actor" description="We use this participant's holiday tracker to get the icon." unique_entries="true">
                              <TunableEnum type="ParticipantTypeSingle" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle"/>
                            </TunableList>
                          </TunableTuple>
                        </TunableVariant>
                      </TunableVariant>
                      <TunableVariant type="None" name="secondary_icon_response" class="OptionalTunable" default="disabled" description="If enabled, associate a response to clicking the secondary icon.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableUiDialogResponse" description="The response associated to the secondary icon.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
                        <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                        <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
                          <TunableList name="variations" class="TunableList">
                            <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="text_tokens" class="OptionalTunable" default="disabled" description="If enabled, define text tokens to be used to localized text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <TunableTuple name="enabled" class="TunableLocalizationTokens" description="Define the text tokens that are available to all text fields in&#xA;the dialog, such as title, text, responses, default and initial&#xA;text values, tooltips, etc.">
                          <TunableList name="tokens" class="TunableList" description="A list of tokens that will be returned by this factory. Any string&#xA;that uses this token will have token '0' be set to the first&#xA;element, '1' to the second element, and so on. Do not let the list&#xA;inheritance values confuse you; regardless of what the list element&#xA;index is, the first element will always be 0, the second element 1,&#xA;and so on.">
                            <TunableVariant type="None" class="TunableVariant" default="participant_type" description="Define what the token at the specified index is.">
                              <Tunable name="active_holiday" class="TunableExistance"/>
                              <TunableTuple name="associated_club" class="TunableTuple" description="The token is a stored &quot;associated_club&quot; on this&#xA;interaction. Only works with ClubMixerInteractions or&#xA;ClubSuperInteractions."/>
                              <TunableTuple name="career_data" class="TunableTuple" description="The token is a localized string, number, or Sim,&#xA;representing the specified career data for the specified&#xA;participant.">
                                <TunableVariant type="None" name="career_data" class="TunableVariant" default="current_level_name" description="The piece of data to fetch.">
                                  <Tunable name="current_level_name" class="TunableExistance"/>
                                  <Tunable name="current_level_salary" class="TunableExistance"/>
                                  <Tunable name="next_level_name" class="TunableExistance"/>
                                  <Tunable name="next_level_salary" class="TunableExistance"/>
                                  <Tunable name="previous_level_name" class="TunableExistance"/>
                                  <Tunable name="previous_level_salary" class="TunableExistance"/>
                                </TunableVariant>
                                <Tunable type="career" name="career_type" class="TunableReference" description="The career we care about." allow_none="False"/>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant's whose career data we care about."/>
                              </TunableTuple>
                              <Tunable name="current_trends" class="TunableExistance"/>
                              <TunableTuple name="definition" class="TunableTuple" description="A catalog definition to use as a token. This is useful if&#xA;you want to properly localize an object's name or&#xA;description.">
                                <Tunable type="object" name="definition" class="TunableReference" allow_none="False"/>
                              </TunableTuple>
                              <TunableTuple name="game_component_data" class="TunableTuple" description="The token is a localized number or Sim representing &#xA;the specified game component data from game component.">
                                <TunableVariant type="None" name="game_component_data" class="TunableVariant" default="high_score" description="The piece of data to fetch.">
                                  <Tunable name="high_score" class="TunableExistance"/>
                                  <Tunable name="high_score_sim" class="TunableExistance"/>
                                </TunableVariant>
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant's from whom the game component data &#xA;we want to fetch."/>
                              </TunableTuple>
                              <Tunable name="interaction_cost" class="TunableExistance"/>
                              <Tunable name="interaction_payout" class="TunableExistance"/>
                              <TunableTuple name="lifestyle_brand" class="TunableTuple" description="The token used to display the name of a Lifestyle Brand &#xA;owned by a Sim.">
                                <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="ParticipantType.TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant who owns the lifestyle brand."/>
                              </TunableTuple>
                              <TunableTuple name="money_amount" class="TunableTuple" description="The token is a number representing the amount of Simoleons&#xA;that were awarded in loot to the specified participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant for whom we fetch the earned amount of&#xA;money."/>
                              </TunableTuple>
                              <TunableTuple name="object_property" class="TunableTuple" description="The token is a property of a game object.  This could be &#xA;catalog properties like its price or its rarity which is a &#xA;property given by a component.">
                                <TunableEnum type="GameObjectProperty" name="obj_property" class="TunableEnumEntry" default="CATALOG_PRICE" static_entries="objects-game_object_properties.GameObjectProperty" description="The property of the object that we will request."/>
                              </TunableTuple>
                              <TunableTuple name="participant_count" class="TunableTuple" description="The number of participants of the specified type.">
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="ObjectChildren" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="participant_type" class="TunableTuple" description="The token is a Sim or object participant from the&#xA;interaction.">
                                <TunableVariant type="None" name="formatter" class="TunableObjectLocalizationTokenFormatterVariant" default="single" description="Define the format for this token.">
                                  <TunableTuple name="bullet_list" class="Tunable_TunableObjectLocalizationTokenFormatterBulletList" description="The token is a string, which is a formatted bullet point list. Objects&#xA;are grouped by definition. The text for each item must be specified.">
                                    <Tunable type="int" name="bullet_text" class="TunableLocalizedString" default="0x0" description="The text for the bullet entry. The string is provided the&#xA;following tokens, in this order:&#xA; 0 An object representitive of the group&#xA; 1 The number of objects in the group"/>
                                  </TunableTuple>
                                  <TunableTuple name="single" class="Tunable_TunableObjectLocalizationTokenFormatterSingle" description="The token is a single object name. If multiple participants are&#xA;returned, an arbitrary one is used. That is, unless the mismatch key is&#xA;specified. In that case, the string is used unless all of the&#xA;participants' definitions match.">
                                    <TunableVariant type="None" name="mismatch_name" class="OptionalTunable" default="disabled" description="If enabled, this is the object name to use when using a multi-&#xA;object participant yielding definitions with different names.">
                                      <Tunable name="disabled" class="TunableExistance"/>
                                      <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="A localized string that may NOT require tokens." allow_catalog_name="True"/>
                                    </TunableVariant>
                                  </TunableTuple>
                                </TunableVariant>
                                <TunableVariant type="None" name="objects" class="TunableObjectGeneratorVariant" default="from_participant">
                                  <TunableTuple name="from_gardening" class="Tunable_ObjectGeneratorFromGardening" description="The generated objects are those gardening objects that are within the&#xA;specified distance from the tuned participant.">
                                    <Tunable type="float" name="distance" class="TunableRange" default="4" min="1.192092896e-07" max="None" description="The distance used to determine which objects are generated." tuning_state="NeedsTuning"/>
                                    <TunableVariant type="None" name="object_type" class="TunableVariant" default="plants" description="The type of gardening object to return.">
                                      <TunableTuple name="harvestables" class="Tunable_ObjectTypeHarvestable" description="Return all harvestables, i.e. all fruits/flowers parented to plants."/>
                                      <TunableTuple name="plants" class="Tunable_ObjectTypePlant" description="Return all plants."/>
                                    </TunableVariant>
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object used as a center point for distance calculations."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_participant" class="Tunable_ObjectGeneratorFromParticipant" description="Specify a participant type to generate objects based on this interaction.">
                                    <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant determining which objects are to be generated."/>
                                  </TunableTuple>
                                  <TunableTuple name="from_stored_object_component" class="Tunable_ObjectGeneratorFromStoredObjectComponent" description="Return the stored object of the specified type from the stored object&#xA;component of the specified participant.S">
                                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantTypeSingle" description="The participant from which the stored object is returned."/>
                                    <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object to apply loot actions to." invalid_entries="INVALID"/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableTuple>
                              <TunableTuple name="sickness" class="TunableTuple" description="The token is the name of the sickness on the specified Sim.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The participant who is sick."/>
                              </TunableTuple>
                              <TunableTuple name="statistic_value" class="TunableTuple" description="The token is a number representing the value of a specific&#xA;statistic from the selected participant.">
                                <TunableEnum type="ParticipantType" name="participant" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant from whom we will fetch the specified&#xA;statistic's value."/>
                                <Tunable type="statistic" name="statistic" class="TunableReference" description="The statistic's whose value we want to fetch." allow_none="False"/>
                              </TunableTuple>
                            </TunableVariant>
                          </TunableList>
                        </TunableTuple>
                      </TunableVariant>
                      <TunableVariant type="None" name="timeout_duration" class="OptionalTunable" default="disabled" description="If enabled, override the timeout duration for this dialog in game&#xA;time.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="float" name="enabled" class="TunableSimMinute" default="5" min="5" max="None" description="The time, in sim minutes, that this dialog should time out." tuning_state="NeedsTuning"/>
                      </TunableVariant>
                      <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
                        <Tunable name="disabled" class="TunableExistance"/>
                        <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
                      </TunableVariant>
                      <TunableList name="ui_responses" class="TunableList" description="A list of buttons that are mapped to UI commands.">
                        <TunableTuple class="TunableUiDialogResponse" description="A dialog response.">
                          <TunableVariant type="None" name="response_command" class="OptionalTunable" default="disabled" description="If enabled, specifies a command to be called by the client.">
                            <Tunable name="disabled" class="TunableExistance"/>
                            <TunableTuple name="enabled" class="TunableTuple">
                              <TunableList name="arguments" class="TunableList" description="The arguments for this command. Arguments will be added after the&#xA;command.">
                                <TunableVariant type="None" class="TunableVariant" default="none" description="An argument being passed to the command.">
                                  <TunableTuple name="boolean" class="TunableTuple" description="A boolean value.">
                                    <Tunable type="bool" name="arg_value" class="Tunable" default="False"/>
                                  </TunableTuple>
                                  <TunableTuple name="floating_point" class="TunableTuple" description="A floating point number.">
                                    <Tunable type="float" name="arg_value" class="Tunable" default="0.0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <TunableTuple name="integer" class="TunableTuple" description="An integer number.">
                                    <Tunable type="int" name="arg_value" class="Tunable" default="0" tuning_state="NeedsTuning"/>
                                  </TunableTuple>
                                  <Tunable name="none" class="TunableExistance"/>
                                  <TunableTuple name="special_command_data" class="TunableTuple" description="This will use the data passed into the show_dialog()&#xA;function. This must be supported with GPE work, so&#xA;only use this if you have talked to a GPE."/>
                                  <TunableTuple name="string" class="TunableTuple" description="A string.">
                                    <Tunable type="str" name="arg_value" class="Tunable" default=""/>
                                  </TunableTuple>
                                </TunableVariant>
                              </TunableList>
                              <Tunable type="str" name="command" class="Tunable" default="" description="The command."/>
                            </TunableTuple>
                          </TunableVariant>
                          <Tunable type="int" name="text" class="TunableLocalizedString" default="0x0" description="The prompt's text."/>
                          <TunableEnum type="UiDialogUiRequest" name="ui_request" class="TunableEnumEntry" default="NO_REQUEST" static_entries="ui-ui_dialog.UiDialogResponse.UiDialogUiRequest" description="This prompt's associated UI action."/>
                        </TunableTuple>
                      </TunableList>
                      <TunableEnum type="UiDialogNotificationUrgency" name="urgency" class="TunableEnumEntry" default="DEFAULT" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationUrgency" description="Specify the notification's urgency."/>
                      <TunableEnum type="UiDialogNotificationVisualType" name="visual_type" class="TunableEnumEntry" default="INFORMATION" static_entries="ui-ui_dialog_notification.UiDialogNotification.UiDialogNotificationVisualType" description="Specify the notification's visual treatment."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="number_of_random_sims" class="OptionalTunable" default="disabled" description="If enabled allows you to specify the number of Sims to choose to&#xA;add the relationship with.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="int" name="enabled" class="TunableRange" default="1" min="1" max="None" description="The number of Sims to choose to add relationship with from&#xA;the list of valid choices." tuning_state="NeedsTuning"/>
                  </TunableVariant>
                  <TunableVariant type="None" name="store_single_result_on_interaction" class="OptionalTunable" default="disabled" description="If enabled will place the result into the SavedActor specified on&#xA;the interaction.&#xA;&#xA;This will only work if the value of number_or_random_sims is 1.&#xA;This will overwrite whatever else is currently set in the&#xA;SavedActor space chosen.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableEnum type="ParticipantTypeSavedActor" name="enabled" class="TunableEnumEntry" default="SavedActor1" static_entries="interactions.ParticipantTypeSavedActor" description="            &#xA;                "/>
                  </TunableVariant>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TdescFragTag name="tests_on_random_sim" class="TunableTestSet" description="Tests that will be run to filer the Sims where we will pick the&#xA;random sim to apply this statistic change."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                  <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                    <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <TunableVariant type="None" name="who" class="TunableVariant" default="known_sims_only" description="Which Sims are valid choices before running tests.&#xA;If set to known_sims_only then it will only choose between Sims &#xA;that the subject sim already knows.&#xA;&#xA;IF set to all_sims then it will choose between all of the sims, &#xA;including those that the Sim hasn't met.">
                    <Tunable name="all_sims" class="TunableExistance"/>
                    <Tunable name="known_sims_only" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="relationship_change" class="TunableStatisticAddRelationship" description="Adds to the relationship score statistic for this Super Interaction">
                  <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                  </TunableVariant>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                  </TunableList>
                  <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                  <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                    <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableTuple>
                <TunableTuple name="relationship_set" class="TunableStatisticSetRelationship" description="Sets the relationship score statistic to a specific value.">
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="headline_icon_modifier" class="OptionalTunable" default="disabled" description="If enabled then when updating the relationship track we will&#xA;use an icon modifier when sending the headline.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <Tunable type="ResourceKey" name="enabled" class="TunableIcon" default="None" description="The icon that we will use as a modifier to the headline." resource_types="0x2f7d0004"/>
                  </TunableVariant>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner Sim for this relationship change. Relationship is updated&#xA;between the participant sim and the target objects as defined by&#xA;the object relationship track." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType"/>
                  </TunableList>
                  <TunableList name="target_participant_type" class="TunableEnumFlags" description="The target Sim for this relationship change. Any&#xA;relationship that would be given to 'self' is discarded." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="statistic" name="track" class="TunableReference" description="The track to be manipulated." allow_none="False" restrict="RelationshipTrack"/>
                  <TunableTuple name="track_range" class="TunableInterval" description="The relationship track must &gt; lower_bound and &lt;= upper_bound for&#xA;the operation to apply.">
                    <Tunable type="float" name="lower_bound" class="TunableRange" default="-101" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="float" name="upper_bound" class="TunableRange" default="100" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                  <Tunable type="float" name="value" class="Tunable" default="0" description="The value to set the relationship to." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="statistic_add" class="TunableStatisticAddOp" description="Attempt to add the specified statistic.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_change" class="TunableStatisticChangeOp" description="Modify the value of a statistic.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="amount" class="Tunable" default="0" description="The one-time gain for this operation." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="bool" name="exclusive_to_owning_si" class="Tunable" default="True" description="If enabled, this gain will be exclusive to the SI that created it&#xA;and will not be allowed to occur if the sim is running mixers from&#xA;a different SI.&#xA;If disabled, this gain will happen as long as this&#xA;SI is active, regardless of which SI owns the mixer the sim is&#xA;currently running.&#xA;This is only effective on Sims." tuning_state="NeedsTuning"/>
                  <TunableVariant type="None" name="maximum" class="TunableVariant" default="no_max" description="A variant containing the different ways you can cap the max amount a&#xA;statistic reaches as result of a change.">
                    <Tunable name="no_max" class="TunableExistance"/>
                    <TunableTuple name="points" class="TunableMaxPoints" description="The max amount of points that a stat can achieve after an increase.">
                      <Tunable type="int" name="max_points" class="Tunable" default="0" description="The point total that a stat cannot go above when increasing. &#xA;If the increase would go above this point total, instead it will&#xA;just be equal to this point total." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                    <TunableTuple name="rank" class="TunableMaxRank" description="The max rank a stat can achieve after an increase.">
                      <Tunable type="int" name="max_rank" class="TunableRange" default="0" min="0" max="None" description="The rank that a stat cannot go beyond when increasing.&#xA;If the increase would go beyond achieving this rank, instead&#xA;it will be set to the min points required to meet this rank.&#xA;This will prevent any gains toward the next rank from occurring.&#xA;&#xA;NOTE: Must be used with a RankedStatistic or it will return 0&#xA;as the max." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableVariant type="None" name="object_cost_multiplier" class="OptionalTunable" default="disabled" description="When enabled allows you to multiply the stat gain amount based on the &#xA;value of the object specified.">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableTunableObjectCostModifierCurve" description="A construct that determines a multiplier based on the value/cost of an&#xA;object.">
                      <TunableList name="multiplier_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a curve.&#xA;The value of the subject in simoleons is used. This means that a &#xA;curve for cost should have value at its x-axis.">
                        <TunableTuple class="TunableVector2" description="Point on a Curve">
                          <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                          <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                        </TunableTuple>
                      </TunableList>
                      <TunableEnum type="ParticipantTypeSingle" name="subject" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantTypeSingle" description="The object whose cost you want to base the multiplier on."/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableEnum type="PeriodicStatisticBehavior" name="periodic_change_behavior" class="TunableEnumEntry" default="APPLY_AT_START_ONLY" static_entries="statistics-statistic_enums.PeriodicStatisticBehavior" description="When applying this change operation at the beginning of an interaction&#xA;as part of a periodic statistic change and statistic is&#xA;a continuous statistic, tune the behavior of this operation when&#xA;interaction begins.&#xA;&#xA;Terminology:&#xA;BaseBehavior: For change operations that succeed chance&#xA;and test or if chance is 100% or no tests, the statistic stores the&#xA;start time and when interaction ends determine how much time is passed&#xA;and multiply amount.  Continuous statistic WILL NOT decay with this&#xA;behavior.  This is for better performance.&#xA;&#xA;IntervalBehavior:  If continuous statistic is using interval behavior.&#xA;the amount tuned will be given at specified interval if chance and&#xA;tests succeeds.  Continuous statistics WILL decay between interval&#xA;time.&#xA;        &#xA;Tuning Behavior &#xA;APPLY_AT_START_ONLY: If chance and tests for change operation is&#xA;successful, periodic update will occur and follow BaseBehavior.  If&#xA;either fail, change operation is not given at any point.&#xA;&#xA;RETEST_ON_INTERVAL: If test and chance succeeds, then this will follow&#xA;BaseBehavior.  If test or chance fails, this operation will follow&#xA;interval behavior.&#xA;&#xA;APPLY_AT_INTERVAL_ONLY: This will strictly follow Interval Behavior."/>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="statistic_multipliers" class="TunableList" description="Tunables for adding statistic based multipliers to the payout in the&#xA;format:&#xA;&#xA;amount *= statistic.value">
                    <TunableTuple class="TunableTunableStatisticModifierCurve" description="A construct that determines a multiplier based on a statistical value.">
                      <TunableVariant type="None" name="multiplier" class="TunableVariant" default="raw_value" description="Define how the multiplier will be applied.">
                        <Tunable name="raw_value" class="TunableExistance"/>
                        <TunableList name="value_curve" class="TunableCurve" description="The multiplier will be determined by interpolating against a&#xA;curve. The user-value is used. This means that a curve for&#xA;skills should have levels as its x-axis.">
                          <TunableTuple class="TunableVector2" description="Point on a Curve">
                            <Tunable type="float" name="x" class="Tunable" default="0.0" description="x component" tuning_state="NeedsTuning"/>
                            <Tunable type="float" name="y" class="Tunable" default="0.0" description="y component" tuning_state="NeedsTuning"/>
                          </TunableTuple>
                        </TunableList>
                      </TunableVariant>
                      <Tunable type="statistic" name="statistic" class="TunableReference" description="The payout amount will be multiplied by this statistic's value." allow_none="False" pack_safe="True"/>
                      <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The participant to look for the specified statistic on."/>
                    </TunableTuple>
                  </TunableList>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_change_by_category" class="TunableChangeStatisticByCategory" description="Change value of  all statistics of a specific category.">
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableVariant type="None" name="change" class="TunableVariant" default="none">
                    <Tunable name="none" class="TunableExistance"/>
                    <TunableTuple name="percent_change" class="TunablePercentChangeAmountFactory">
                      <Tunable type="float" name="percent_change_amount" class="TunablePercent" default="-50" min="-100" max="100" description="Percent of current value of statistic should amount&#xA;be changed.  If you want to decrease the amount by&#xA;50% enter -50% into the tuning field."/>
                    </TunableTuple>
                    <TunableTuple name="stat_change" class="TunableChangeAmountFactory">
                      <Tunable type="float" name="change_amout" class="Tunable" default="0" description="Amount of change to be applied to statistics that match category." tuning_state="NeedsTuning"/>
                    </TunableTuple>
                  </TunableVariant>
                  <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_remove" class="TunableStatisticRemoveOp" description="Attempt to remove the specified statistic.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_remove_by_category" class="TunableRemoveStatisticByCategory" description="Remove all statistics of a specific category.">
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <TunableEnum type="StatisticCategory" name="statistic_category" class="TunableEnumEntry" default="INVALID" dynamic_entries="statistics-statistic_categories.StatisticCategory._elements" static_entries="statistics-statistic_categories.StatisticCategory" description="The category of commodity to remove."/>
                  <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_set" class="TunableStatisticSetOp" description="Set a statistic to the provided value.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="int" name="value" class="Tunable" default="None" description="The new statistic value." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="statistic_set_in_range" class="TunableStatisticSetRangeOp" description="Set a statistic to a random value in the tuned range.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <TunableTuple name="value_range" class="TunableInterval" description="The upper and lower bound of the range.">
                    <Tunable type="int" name="lower_bound" class="TunableRange" default="1" min="None" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                    <Tunable type="int" name="upper_bound" class="TunableRange" default="2" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                  </TunableTuple>
                </TunableTuple>
                <TunableTuple name="statistic_set_max" class="TunableStatisticSetMaxOp" description="Set a statistic to its maximum value.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_set_min" class="TunableStatisticSetMinOp" description="Set a statistic to its minimum value.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                </TunableTuple>
                <TunableTuple name="statistic_set_rank" class="TunableStatisticSetRankOp" description="Set a Ranked Statistic to a specific rank level.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False" pack_safe="True" restrict="RankedStatistic"/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <Tunable type="int" name="value" class="Tunable" default="None" description="The new rank value." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableTuple name="statistic_transfer" class="TunableStatisticTransferOp" description="Transfer a statistic value from one target to another.">
                  <Tunable type="bool" name="advertise" class="Tunable" default="True" description="This statistic operation should advertise to autonomy.  This only&#xA;advertises if the statistic operation is used as part of Periodic&#xA;Statistic Change." tuning_state="NeedsTuning"/>
                  <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                    <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                    <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                      <TunableTuple class="TunableTuple">
                        <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                        <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                      </TunableTuple>
                    </TunableList>
                  </TunableTuple>
                  <Tunable type="statistic" name="stat" class="TunableReference" description="The statistic we are operating on." allow_none="False"/>
                  <TunableEnum type="ParticipantType" name="statistic_donor" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantType" description="The owner of the statistic we are transferring the value from."/>
                  <TunableList name="subject" class="TunableEnumFlags" default="Actor" description="The owner of the stat that we are operating on." unique_entries="true">
                    <TunableEnum type="ParticipantType" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" invalid_entries="Invalid"/>
                  </TunableList>
                  <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                  <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                    <Tunable name="no_text" class="TunableExistance"/>
                    <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                    <Tunable name="use_default" class="TunableExistance"/>
                  </TunableVariant>
                  <TunableEnum type="TransferType" name="transfer_type" class="TunableEnumEntry" default="ADDITIVE" static_entries="statistics-statistic_ops.TransferType" description="Type of statistic transfer to use."/>
                  <TunableVariant type="None" name="transfer_type_average_advanced" class="OptionalTunable" default="disabled" description="If enabled, the average calculation will be the sum of multiplying&#xA;the stat value and stat quantity then dividing with total quantity.&#xA;T  = Transferred Stat value&#xA;S  = Stat value&#xA;QT = Quantity Transferred Stat value&#xA;QS = Quantity Stat value&#xA;Result = ((T * QT) + (S * QS)) / (QT + QS)&#xA;&#xA;If disabled, the result will calculate Mean of 2 stat values.&#xA;Result = (T + S) / 2">
                    <Tunable name="disabled" class="TunableExistance"/>
                    <TunableTuple name="enabled" class="TunableTuple" description="Statistic quantities for both subject and donor.">
                      <Tunable type="statistic" name="quantity_stat" class="TunableReference" description="Statistic quantity subject which will be applied to the&#xA;average calculation." allow_none="False"/>
                      <Tunable type="statistic" name="quantity_transferred_stat" class="TunableReference" description="Statistic quantity donor which will be applied to the&#xA;average calculation." allow_none="False"/>
                    </TunableTuple>
                  </TunableVariant>
                  <Tunable type="statistic" name="transferred_stat" class="TunableReference" description="The statistic whose value to transfer." allow_none="False"/>
                </TunableTuple>
              </TunableVariant>
              <TunableTuple name="store_object_info" class="TunableStoreObjectInfoLootOp" description="Store data in a StoredObjectInfoComponent. That component is then added to&#xA;the target, which allows it to be retrieved later.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableList name="states_to_store" class="TunableSet" description="A list of states to be stored, if the source object has that state." unique_entries="true">
                  <Tunable type="object_state" class="TunableReference" description="A state to store." allow_none="False" restrict="ObjectState"/>
                </TunableList>
                <TunableEnum type="StoredObjectType" name="stored_object_type" class="TunableEnumEntry" default="INVALID" dynamic_entries="objects-components-stored_object_info_tuning.StoredObjectType._elements" static_entries="objects-components-stored_object_info_tuning.StoredObjectType" description="The type of object being stored. This will be used to retrieve the&#xA;stored object from the Stored Object Info Component of the target." invalid_entries="INVALID"/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="store_sim_info" class="TunableStoreSimInfoLootOp" description="Loot action to store target participant sim info in StoredSimInfoComponent &#xA;of subject.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="stored_sim_info_transfer" class="TunableTransferStoredSimInfo" description="Loot action to transfer the Stored Sim Info between participants. The Stored&#xA;Sim Info is taken from the Subject and applied to the Target.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="clear_stored_sim_on_subject" class="Tunable" default="False" description="If set to False, the Stored Sim will remain on the subject object. If&#xA;set to True, the Store Sim will be removed from the subject object."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="summon_npc" class="TunableSummonNPC" description="An Operation to summon NPC on the venue">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="NPCSummoningPurpose" name="summoning_purpose" class="TunableEnumEntry" default="DEFAULT" dynamic_entries="venues-venue_constants.NPCSummoningPurpose._elements" static_entries="venues-venue_constants.NPCSummoningPurpose" description="The purpose that is used to summon the NPC to the lot.  Defined&#xA;in venue tuning."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="take_turn" class="TunableTakeTurn" description="Factory created by tuning to represent a turn change loot operation.    ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="team_score" class="TunableTeamScore" description="Factory created by tuning to represent a team score change loot operation.    ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="team_score_points" class="TunableTeamScorePoints" description="Factory created by tuning to represent a team score change loot operation&#xA;that awards a specific number of points.    ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="score_increase" class="TunableInterval" description="An interval specifying the minimum and maximum score increases&#xA;from this loot. A random value in this interval will be&#xA;generated each time this loot is given.">
                  <Tunable type="int" name="lower_bound" class="TunableRange" default="35" min="0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="int" name="upper_bound" class="TunableRange" default="50" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TunableVariant type="None" name="score_increase_from_stat" class="OptionalTunable" default="disabled" description="If enabled, the score will be increased by this statistic value&#xA;instead of by 'Score Increase' interval value.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <Tunable type="statistic" name="enabled" class="TunableReference" description="The stat we are operating on." allow_none="False"/>
                </TunableVariant>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="topic_loot" class="TunableTopicUpdate" description="Factory created by tuning to represent topic update.    ">
                <Tunable type="bool" name="add" class="Tunable" default="True" description="Topic will be added to recipient. if unchecked topic will be&#xA;removed from recipient."/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableVariant type="None" name="target_participant_type" class="OptionalTunable" default="disabled" description="Participant(s) that subject will apply operations on.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableEnum type="ParticipantType" name="enabled" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                </TunableVariant>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="topic" name="topic" class="TunableReference" description="The topic we are updating." allow_none="False" restrict="Topic"/>
              </TunableTuple>
              <TunableTuple name="trait_add" class="TunableAddTraitLootOp" description="This loot will add the specified trait.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="trait" name="trait" class="TunableReference" description="The trait to be added." allow_none="False"/>
              </TunableTuple>
              <TunableTuple name="trait_remove" class="TunableRemoveTraitLootOp" description="This loot will remove the specified trait">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="trait" class="TunableVariant" default="specific_trait" description="Type of trait removal to perform.">
                  <TunableTuple name="random_personality_trait" class="Tunable_RemoveRandomPersonalityTrait" description="Remove a random personality trait.">
                    <TunableList name="traits_to_not_consider" class="TunableList" description="Personality traits that should not be considered for removal. Leave&#xA;blank to consider all personality traits.">
                      <Tunable type="trait" class="TunableReference" description="A personality trait that should not be removed." allow_none="False" pack_safe="True"/>
                    </TunableList>
                  </TunableTuple>
                  <TunableTuple name="specific_trait" class="Tunable_RemoveSpecificTrait" description="Remove the specified trait.">
                    <Tunable type="trait" name="specific_trait" class="TunableReference" description="The trait to be removed." allow_none="False" pack_safe="True"/>
                  </TunableTuple>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="transfer_name_loot" class="TunableTransferNameLootOp" description="Loot to transfer the custom name and custom description between objects.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="clear_subject_description" class="Tunable" default="False" description="If False, the subject's description will not be cleared. If True, then&#xA;the subject's description will be cleared. This will only happen if&#xA;transfer description is set to True."/>
                <Tunable type="bool" name="clear_subject_name" class="Tunable" default="False" description="If False, the subject's name will not be cleared. If True, then&#xA;the subject's name will be cleared. This will only happen if&#xA;transfer name is set to True. "/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Invalid" static_entries="interactions.ParticipantType" description="Participant(s) that subject will apply operations on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="bool" name="transfer_description" class="Tunable" default="True" description="If checked, it will transfer the custom description of the name &#xA;component from the subject to the target."/>
                <Tunable type="bool" name="transfer_name" class="Tunable" default="True" description="If checked, it will transfer the custom name of the name component&#xA;from the subject to the target."/>
              </TunableTuple>
              <TunableTuple name="transfer_ownership" class="TunableTransferOwnershipLootOp" description="This loot will give ownership of the tuned object to the tuned sim&#xA;or to the tuned sim's household.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="bool" name="give_sim_ownership" class="Tunable" default="False" description="If True, the sim will be the owner of this object, and the sim's &#xA;household will be the owning household. If False, the sim's &#xA;household will own the object and the sim owner will be cleared if&#xA;the household_id assigned is new."/>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The participant of the interaction whom the ownership will be &#xA;tested on."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="travel_to_target_sim" class="TunableTravelToTargetSim" description="An Operation to travel the actor sim to the target sim's lot.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="unlock_door" class="TunableUnlockDoor" description="An operation to unlock a door.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TunableEnum type="ParticipantType" name="target_participant_type" class="TunableEnumEntry" default="Object" static_entries="interactions.ParticipantType" description="The door to unlock."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="unlock_type" class="OptionalTunable" default="unlock_every_type" description="The type of the lock we want to remove, by default should be everything.">
                  <TunableEnum type="LockType" name="enabled" class="TunableEnumEntry" default="LOCK_ALL_WITH_SIMID_EXCEPTION" static_entries="objects-components-portal_locking_enums.LockType"/>
                  <Tunable name="unlock_every_type" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="unlock_hidden_aspiration_track" class="TunableUnlockHiddenAspirationTrack" description="An operation to unlock a hidden aspiration track.">
                <Tunable type="aspiration_track" name="aspiration_track" class="TunableReference" description="The Hidden Aspiration Track to unlock so that is can be selected during gameplay." allow_none="False"/>
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="unlock_item" class="TunableUnlockLootOp" description="This loot will give Sim an unlock item like recipe etc. ">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="unlock_item" class="TunableUnlockVariant" default="none" description="The unlock item that will give to the Sim.">
                  <Tunable name="none" class="TunableExistance"/>
                  <Tunable type="recipe" name="unlock_recipe" class="TunableReference" allow_none="False" pack_safe="True"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="vfx" class="TunablePlayVisualEffectLootOp" description="Loot operation to play vfx.">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableEnum type="ParticipantType" name="subject" class="TunableEnumEntry" default="Actor" static_entries="interactions.ParticipantType" description="The sim(s) the operation is applied to."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableTuple name="vfx" class="TunablePlayEffect" description="The effect to play.">
                  <Tunable type="str" name="effect_name" class="Tunable" default="" description="The name of the effect to play."/>
                  <TunableVariant type="None" name="joint_name" class="OptionalTunable" default="Slot" description="Specify if the visual effect is attached to a slot and, if so, which&#xA;slot.">
                    <Tunable name="Current_Position" class="TunableExistance"/>
                    <Tunable type="str" name="Slot" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is attached to."/>
                  </TunableVariant>
                </TunableTuple>
                <TunableVariant type="None" name="vfx_target" class="OptionalTunable" default="disabled" description="If enabled, the visual effect is set to target a specific joint on&#xA;another object or Sim.">
                  <Tunable name="disabled" class="TunableExistance"/>
                  <TunableTuple name="enabled" class="TunableTuple">
                    <Tunable type="str" name="joint_name" class="TunableStringHash32" default="_FX_" description="The name of the slot this effect is targeted to."/>
                    <TunableEnum type="ParticipantTypeSingle" name="participant" class="TunableEnumEntry" default="TargetSim" static_entries="interactions.ParticipantTypeSingle" description="The participant this visual effect targets."/>
                  </TunableTuple>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="weather_set_override_forecast" class="TunableWeatherSetOverrideForecastLootOp" description="Set the override forecast">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <TunableVariant type="None" name="weather_forecast" class="OptionalTunable" default="reset_to_default" description="The forecast to use as override.">
                  <Tunable type="snippet" name="enabled" class="TunableReference" description="A reference to a WeatherSeasonalForecasts tuning snippet." allow_none="False" restrict="WeatherSeasonalForecasts"/>
                  <Tunable name="reset_to_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="weather_set_season" class="TunableWeatherSetSeasonLootOp" description="Interpolate to the specified season over the specified time">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <Tunable type="float" name="interpolation_time" class="TunableSimMinute" default="20" min="None" max="None" description="The time over which the interpolation to the new season should&#xA;occur." tuning_state="NeedsTuning"/>
                <TunableEnum type="SeasonType" name="season" class="TunableEnumEntry" default="WINTER" static_entries="seasons-seasons_enums.SeasonType" description="The target season."/>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
              </TunableTuple>
              <TunableTuple name="weather_start_event" class="TunableWeatherStartEventLootOp" description="Start the specified weather event for the specified duration">
                <TunableTuple name="chance" class="TunableSuccessChance" description="Percent chance that the loot action will be considered. The&#xA;chance is evaluated just before running the tests.">
                  <Tunable type="float" name="base_chance" class="TunablePercent" default="100" min="0" max="100" description="The basic chance of success."/>
                  <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_chance.">
                    <TunableTuple class="TunableTuple">
                      <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_chance if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                      <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                    </TunableTuple>
                  </TunableList>
                </TunableTuple>
                <TunableTuple name="duration" class="TunableInterval" description="How long the event should last, in hours.">
                  <Tunable type="float" name="lower_bound" class="TunableRange" default="1.0" min="1.0" max="None" description="The lower bound of the interval." tuning_state="NeedsTuning"/>
                  <Tunable type="float" name="upper_bound" class="TunableRange" default="2.0" min="None" max="None" description="The upper bound of the interval." tuning_state="NeedsTuning"/>
                </TunableTuple>
                <TdescFragTag name="tests" class="TunableTestSet" description="The test to decide whether the loot action can be applied."/>
                <TunableVariant type="None" name="text" class="TunableVariant" default="use_default" description="Specify the display text to use for this tunable. This tuning&#xA;structure may be shared across multiple tunables. It is up to the&#xA;system consuming the tunable to determine in which ways the tuned&#xA;display text is used.&#xA;&#xA;e.g. Loot Operations&#xA; The adventure system auto-generates notifications based on the loot&#xA; that was awarded from a chance card. A loot's display text, if&#xA; used, will be an item in the generated bulleted list. The ability&#xA; to override display text allows tuners to set custom next in such&#xA; notifications.&#xA; &#xA;e.g. Reward Tuning&#xA; Rewards have display text so that, similarly to adventures, a&#xA; bulleted list of entries can be auto-generated when obtained by a&#xA; Sim. Use this tunable to control the text of such entries.">
                  <Tunable name="no_text" class="TunableExistance"/>
                  <Tunable type="int" name="override" class="TunableLocalizedString" default="0x0" description="Specify a string override. The tokens are different depending on&#xA;the type of tunable."/>
                  <Tunable name="use_default" class="TunableExistance"/>
                </TunableVariant>
                <Tunable type="weather_event" name="weather_event" class="TunableReference" description="The weather event to start." allow_none="False" restrict="WeatherEvent"/>
              </TunableTuple>
            </TunableVariant>
            <TunableTuple name="weight" class="TunableTunableMultiplier" description="The weight of this potential initial moment relative&#xA;to other items within this list.">
              <Tunable type="float" name="base_value" class="Tunable" default="1" description="The basic value to return if no modifications are applied." tuning_state="NeedsTuning"/>
              <TunableList name="multipliers" class="TunableList" description="A list of multipliers to apply to base_value.">
                <TunableTuple class="TunableTuple">
                  <Tunable type="float" name="multiplier" class="TunableRange" default="1" min="0" max="None" description="The multiplier to apply to base_value if the associated&#xA;tests pass." tuning_state="NeedsTuning"/>
                  <TdescFragTag name="tests" class="TunableTestSet" description="A series of tests that must pass in order for multiplier to&#xA;be applied."/>
                </TunableTuple>
              </TunableList>
            </TunableTuple>
          </TunableTuple>
        </TunableList>
      </TunableTuple>
    </TunableList>
    <TunableVariant name="version_error_dialog" class="OptionalTunable" description="If enabled, override the default version error dialog with your own." default="disabled">
      <Tunable name="disabled" class="TunableExistance"/>
      <TunableTuple name="enabled" class="TunableUiDialogOk" description='The dialog to display if this snippet requires a newer version of the injector.'>
        <Tunable type="bool" name="is_special_dialog" class="Tunable" default="False" description="If checked, UI will treat this as a special ok or ok/cancel dialog &#xA;and represent the ok or ok/cancel options in a special way. &#xA;They will use the text as a tooltip for ok or ok/cancel options &#xA;and use particular icons for the buttons."/>
        <TunableVariant type="None" name="text" class="TunableLocalizedStringFactoryVariant" default="single" description="The dialog's text.">
          <Tunable type="int" name="single" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
          <TunableTuple name="variation" class="TunableLocalizedStringFactoryVariation" description="A list of possible localized string variations.">
            <TunableList name="variations" class="TunableList">
              <Tunable type="int" class="TunableLocalizedString" default="0x0" description="A localized string that may use tokens."/>
            </TunableList>
          </TunableTuple>
        </TunableVariant>
        <Tunable type="int" name="text_ok" class="TunableLocalizedString" default="0xd977b872" description="The OK button text."/>
        <TunableVariant type="None" name="title" class="OptionalTunable" default="disabled" description="If enabled, this dialog will include title text.">
          <Tunable name="disabled" class="TunableExistance"/>
          <Tunable type="int" name="enabled" class="TunableLocalizedString" default="0x0" description="The dialog's title."/>
        </TunableVariant>
      </TunableTuple>
    </TunableVariant>
    <Tunable name="xml_injector_minimum_version" type="int" description="The minimum version of XML Injector required to process your snippet." default="1"/>
  </Instance>
</TuningRoot>